/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/sync/contactperson/profile-details/{prisonerNumber}/{profileType}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Synchronises a profile detail to DPS
     * @description Manually synchronises a profile detail to DPS. This is intended for use by developers to recover from errors. Requires role <b>MIGRATE_CONTACTPERSON</b> or <b>MIGRATE_NOMIS_SYSCON/b>
     */
    put: operations['syncContactPersonProfileDetail-0E7RQCE']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/retry-dlq/{dlqName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['retryDlq']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/retry-all-dlqs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['retryAllDlqs']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/purge-queue/{queueName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['purgeQueue']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate/activities/{migrationId}/move-start-dates': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Moves the start date for future activities in DPS.
     * @description Update all DPS activities for this prison to the new start date. Get all NOMIS activities migrated move the end dates to the day before the new start date. Requires role MIGRATE_ACTIVITIES
     */
    put: operations['moveActivityStartDates']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate/activities/{migrationId}/end': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * End all NOMIS activities and allocations for a migration on the day before the DPS activity start date
     * @description Get all NOMIS activities migrated on a migrationId and ends them all on the day before the DPS activity start date. Requires role MIGRATE_ACTIVITIES
     */
    put: operations['endMigratedActivities']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{prisonNumber}/visit-balance/repair': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Resynchronises a visit balance for the given prisoner from NOMIS to DPS
     * @description Used when an unexpected event has happened in NOMIS that has resulted in the DPS data drifting from NOMIS, so emergency use only. Requires ROLE_MIGRATE_VISIT_BALANCE
     */
    post: operations['repairVisitBalance']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{offenderNo}/resynchronise': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Resynchronises prisoner contacts from NOMIS back to DPS
     * @description Used when an unexpected event has happened in NOMIS that has resulted in the DPS data drifting from NOMIS, so emergency use only. Requires ROLE_MIGRATE_CONTACTPERSON or ROLE_MIGRATE_NOMIS_SYSCON
     */
    post: operations['repairPrisonerContacts']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{offenderNo}/alerts/resynchronise': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Resynchronises current alerts for the given prisoner from NOMIS back to DPS
     * @description Used when an unexpected event has happened in NOMIS that has resulted in the DPS data drifting from NOMIS, so emergency use only. Requires ROLE_MIGRATE_ALERTS
     */
    post: operations['repairAlerts']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/booking-id/{bookingId}/merge/sentencing-adjustments/repair': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Resynchronises new adjustments for the given booking from NOMIS back to DPS
     * @description Used when a merge has not be detected so new adjustments have not been copied to DPS, so emergency use only. Requires ROLE_MIGRATE_SENTENCING
     */
    post: operations['repairPostMergeAdjustments']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/persons/{personId}/resynchronise': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Resynchronises person data from NOMIS back to DPS
     * @description Used when an unexpected event has happened in NOMIS that has resulted in the DPS data drifting from NOMIS, so emergency use only. Requires ROLE_MIGRATE_CONTACTPERSON or ROLE_MIGRATE_NOMIS_SYSCON
     */
    post: operations['repairPerson']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/persons/{personId}/resynchronise-async': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Resynchronises person data from NOMIS back to DPS asynchronously
     * @description Used when an unexpected event has happened in NOMIS that has resulted in the DPS data drifting from NOMIS, so emergency use only and when operation will take a very long time. Requires ROLE_MIGRATE_CONTACTPERSON or ROLE_MIGRATE_NOMIS_SYSCON
     */
    post: operations['repairPersonAsync']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate/visits': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Starts a visit migration
     * @description Starts an asynchronous migration process. This operation will return immediately and the migration will be performed asynchronously. Requires role <b>MIGRATE_VISITS</b>
     */
    post: operations['migrateVisits']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate/visit-balance': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Starts a visit balance migration. The entity type is determined by the migration filter
     * @description Starts an asynchronous migration process. This operation will return immediately and the migration will be performed asynchronously. Requires role <b>MIGRATE_VISIT_BALANCE</b>
     */
    post: operations['migrateVisitBalance']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate/sentencing': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Starts a sentencing migration
     * @description Starts an asynchronous migration process. This operation will return immediately and the migration will be performed asynchronously. Requires role <b>MIGRATE_SENTENCING</b>
     */
    post: operations['migrateSentencing']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate/refresh/{migrationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Refreshes the statistics on a completed migration.
     * @description This will read from the mapping table to get the latest count of migration records.
     *           It will also then count the number of failures on the main queue and update the history record.
     *           This is useful if the migration has been marked as completed when there were still messages on the dead letter
     *           queue that where then processed later.
     *           Requires role <b>ROLE_PRISONER_FROM_NOMIS__MIGRATION__RW</b>
     */
    post: operations['refresh']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate/incidents': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Starts an incidents migration
     * @description Starts an asynchronous migration process. This operation will return immediately and the migration will be performed asynchronously. Requires role <b>MIGRATE_INCIDENT_REPORTS</b>
     */
    post: operations['migrateIncidents']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate/court-sentencing': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Starts a court case migration
     * @description Starts an asynchronous migration process. This operation will return immediately and the migration will be performed asynchronously. Requires role <b>MIGRATE_SENTENCING</b>
     */
    post: operations['migrateCourtSentencing']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate/corporate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Starts a organisation migration. The entity type is determined by the migration filter
     * @description Starts an asynchronous migration process. This operation will return immediately and the migration will be performed asynchronously. Requires role <b>MIGRATE_CONTACTPERSON</b>
     */
    post: operations['migrateCorporate']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate/core-person': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Starts a core person migration. The entity type is determined by the migration filter
     * @description Starts an asynchronous migration process. This operation will return immediately and the migration will be performed asynchronously. Requires role <b>MIGRATE_CORE_PERSON</b>
     */
    post: operations['migrateCorePerson']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate/contactperson': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Starts a prisoner restriction migration. The entity type is determined by the migration filter
     * @description Starts an asynchronous migration process. This operation will return immediately and the migration will be performed asynchronously. Requires role <b>MIGRATE_CONTACTPERSON</b>
     */
    post: operations['migrateContactPerson']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate/contact-person-profile-details': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Starts a contact person profile details migration
     * @description Starts an asynchronous migration process. This operation will return immediately and the migration will be performed asynchronously. Requires role <b>MIGRATE_CONTACTPERSON</b>
     */
    post: operations['migrateContactPerson_1']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate/cancel/{migrationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Cancels a running migration. The actual cancellation might take several minutes to complete
     * @description Requires role <b>ROLE_PRISONER_FROM_NOMIS__MIGRATION__RW</b>
     */
    post: operations['cancel']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate/appointments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Starts an appointments migration
     * @description Starts an asynchronous migration process. This operation will return immediately and the migration will be performed asynchronously. Requires role <b>MIGRATE_APPOINTMENTS</b>
     */
    post: operations['migrateAppointments']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate/allocations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Starts an allocations migration
     * @description Starts an asynchronous migration process. This operation will return immediately and the migration will be performed asynchronously. Requires role <b>MIGRATE_ACTIVITIES</b>
     */
    post: operations['migrateAllocations']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate/activities': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Starts an activities migration
     * @description Starts an asynchronous migration process. This operation will return immediately and the migration will be performed asynchronously. Requires role <b>MIGRATE_ACTIVITIES</b>
     */
    post: operations['migrateActivities']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/id/{internalLocationId}/repair': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Resynchronises location from NOMIS to DPS, i.e. updates DPS with the data from Nomis
     * @description Used when an unexpected event has happened in NOMIS that has resulted in the DPS data drifting from NOMIS, so emergency use only. Requires ROLE_NOMIS_LOCATIONS
     */
    post: operations['repairPunishments']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/incidents/{incidentId}/repair': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Resynchronises an existing incident from NOMIS back to DPS
     * @description Used when an unexpected event has happened in NOMIS that has resulted in the DPS data drifting from NOMIS, so emergency use only. Requires ROLE_MIGRATE_INCIDENT_REPORTS
     */
    post: operations['repairIncident']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/get-dlq-messages/{dlqName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get: operations['getDlqMessages']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate/visits/rooms/usage': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get visit room usage and mappings by filter
     * @description Retrieves a list of rooms with usage count and vsip mapping for the (filtered) visits
     */
    get: operations['getVisitRoomUsageDetailsByFilter']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate/history/{migrationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets a specific migration history record
     * @description Requires role <b>ROLE_PRISONER_FROM_NOMIS__MIGRATION__RW</b>
     */
    get: operations['get']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate/history/all/{migrationType}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Lists all filtered migration history for the specified migration type
     * @description The records are un-paged and requires role <b>ROLE_PRISONER_FROM_NOMIS__MIGRATION__RW</b>
     */
    get: operations['getHistory']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate/history/active/{migrationType}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets active/currently running migration data, using migration record and migration queues
     * @description Requires role <b>ROLE_PRISONER_FROM_NOMIS__MIGRATION__RW</b>
     */
    get: operations['activeMigration']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate/dead-letter-queue/{migrationType}/count': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets count of the dlq messages for the specified migration type
     * @description Requires role <b>ROLE_PRISONER_FROM_NOMIS__MIGRATION__RW</b>
     */
    get: operations['getDlqMessagesCount']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate/dead-letter-queue/{migrationType}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets all (max 100) the dlq messages for the specified migration type
     * @description Requires role <b>ROLE_PRISONER_FROM_NOMIS__MIGRATION__RW</b>
     */
    get: operations['getDlqMessages_1']
    put?: never
    post?: never
    /**
     * Deletes all the dlq messages for the specified migration type
     * @description Requires role <b>ROLE_PRISONER_FROM_NOMIS__MIGRATION__RW</b>
     */
    delete: operations['deleteDlqMessages']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate/court-sentencing/offender-payload/{offenderNo}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * provides the migration payload for debug purposes
     * @description Provides the migration payload for an offender, no migration is performed. Useful for investigating migration errors. Requires role <b>MIGRATE_SENTENCING</b>
     */
    get: operations['offenderMigrationPayload']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/casenotes/{nomisCaseNoteId}/repair': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Repairs a casenote that has been deleted in Nomis by removing any associated mappings in the mapping table and alerting DPS.
     *           *** IMPORTANT*** This endpoint will delete any other associated Nomis Mappings (if matching the associated DPS Case Note) as there is a
     *           one to many mapping between DPS and Nomis case notes.
     *           Any related (deleted) Nomis case notes will be indicated with the casenotes-synchronisation-deleted-related-success telemetry event
     * @description Used when an unexpected event has happened in NOMIS that has resulted in the DPS data drifting from NOMIS, so emergency use only. Requires ROLE_NOMIS_CASENOTES
     */
    delete: operations['repairDeletedCaseNote']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    ErrorResponse: {
      /** Format: int32 */
      status: number
      /** Format: int32 */
      errorCode?: number
      userMessage?: string
      developerMessage?: string
      moreInfo?: string
    }
    RetryDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    PurgeQueueResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    /**
     * @description The new start date for all activities
     * @example 2023-01-01
     */
    MoveActivityStartDateRequest: {
      /** Format: date */
      newActivityStartDate: string
    }
    /** @description Filter specifying what should be migrated from NOMIS to Visits service */
    VisitsMigrationFilter: {
      /**
       * @description List of prison Ids (AKA Agency Ids) to migrate visits from
       * @example MDI
       */
      prisonIds: string[]
      /**
       * @description List of visit types to migrate
       * @default ["SCON"]
       * @example [
       *       "SCON",
       *       "OFFI"
       *     ]
       */
      visitTypes: string[]
      /**
       * Format: date-time
       * @description Only include visits created after this date. NB this is creation date not the actual visit date
       * @example 2020-03-23T12:00:00
       */
      fromDateTime?: string
      /**
       * Format: date-time
       * @description Only include visits created before this date. NB this is creation date not the actual visit date
       * @example 2020-03-24T12:00:00
       */
      toDateTime?: string
      /**
       * @description When true exclude visits without an associated room (visits created during the VSIP synchronisation process), defaults to false. Only required during testing when mapping records are manually deleted
       * @default false
       * @example false
       */
      ignoreMissingRoom: boolean
    }
    MigrationContextVisitsMigrationFilter: {
      /** @enum {string} */
      type:
        | 'VISITS'
        | 'APPOINTMENTS'
        | 'ACTIVITIES'
        | 'ALLOCATIONS'
        | 'CORE_PERSON'
        | 'INCIDENTS'
        | 'COURT_SENTENCING'
        | 'PERSONALRELATIONSHIPS'
        | 'PERSONALRELATIONSHIPS_PROFILEDETAIL'
        | 'ORGANISATIONS'
        | 'SENTENCING_ADJUSTMENTS'
        | 'VISIT_BALANCE'
      migrationId: string
      /** Format: int64 */
      estimatedCount: number
      body: components['schemas']['VisitsMigrationFilter']
      properties: {
        [key: string]: unknown
      }
    }
    /** @description Filter specifying what should be migrated from NOMIS to DPS */
    VisitBalanceMigrationFilter: {
      /**
       * @description Only include visit balances for this prison id
       * @example MDI
       */
      prisonId?: string
    }
    MigrationContextVisitBalanceMigrationFilter: {
      /** @enum {string} */
      type:
        | 'VISITS'
        | 'APPOINTMENTS'
        | 'ACTIVITIES'
        | 'ALLOCATIONS'
        | 'CORE_PERSON'
        | 'INCIDENTS'
        | 'COURT_SENTENCING'
        | 'PERSONALRELATIONSHIPS'
        | 'PERSONALRELATIONSHIPS_PROFILEDETAIL'
        | 'ORGANISATIONS'
        | 'SENTENCING_ADJUSTMENTS'
        | 'VISIT_BALANCE'
      migrationId: string
      /** Format: int64 */
      estimatedCount: number
      body: components['schemas']['VisitBalanceMigrationFilter']
      properties: {
        [key: string]: unknown
      }
    }
    /** @description Filter specifying what should be migrated from NOMIS to Sentencing service */
    SentencingMigrationFilter: {
      /**
       * Format: date
       * @description Only include Sentencing entity issued on or after this date
       * @example 2020-03-23
       */
      fromDate?: string
      /**
       * Format: date
       * @description Only include Sentencing entity issued before or on this date
       * @example 2020-03-24
       */
      toDate?: string
    }
    MigrationContextSentencingMigrationFilter: {
      /** @enum {string} */
      type:
        | 'VISITS'
        | 'APPOINTMENTS'
        | 'ACTIVITIES'
        | 'ALLOCATIONS'
        | 'CORE_PERSON'
        | 'INCIDENTS'
        | 'COURT_SENTENCING'
        | 'PERSONALRELATIONSHIPS'
        | 'PERSONALRELATIONSHIPS_PROFILEDETAIL'
        | 'ORGANISATIONS'
        | 'SENTENCING_ADJUSTMENTS'
        | 'VISIT_BALANCE'
      migrationId: string
      /** Format: int64 */
      estimatedCount: number
      body: components['schemas']['SentencingMigrationFilter']
      properties: {
        [key: string]: unknown
      }
    }
    /** @description Filter specifying what should be migrated from NOMIS to the Incident Reporting service */
    IncidentsMigrationFilter: {
      /**
       * Format: date
       * @description Only include incidents created on or after this date
       * @example 2020-03-23
       */
      fromDate?: string
      /**
       * Format: date
       * @description Only include incidents created before or on this date
       * @example 2020-03-24
       */
      toDate?: string
    }
    MigrationContextIncidentsMigrationFilter: {
      /** @enum {string} */
      type:
        | 'VISITS'
        | 'APPOINTMENTS'
        | 'ACTIVITIES'
        | 'ALLOCATIONS'
        | 'CORE_PERSON'
        | 'INCIDENTS'
        | 'COURT_SENTENCING'
        | 'PERSONALRELATIONSHIPS'
        | 'PERSONALRELATIONSHIPS_PROFILEDETAIL'
        | 'ORGANISATIONS'
        | 'SENTENCING_ADJUSTMENTS'
        | 'VISIT_BALANCE'
      migrationId: string
      /** Format: int64 */
      estimatedCount: number
      body: components['schemas']['IncidentsMigrationFilter']
      properties: {
        [key: string]: unknown
      }
    }
    /** @description Filter to allow initial migration testing with 1 offender */
    CourtSentencingMigrationFilter: {
      offenderNo?: string
      /**
       * Format: date
       * @description Only include court cases created on or after this date
       * @example 2020-03-23
       */
      fromDate?: string
      /**
       * Format: date
       * @description Only include court cases created before or on this date
       * @example 2020-03-24
       */
      toDate?: string
      deleteExisting: boolean
    }
    MigrationContextCourtSentencingMigrationFilter: {
      /** @enum {string} */
      type:
        | 'VISITS'
        | 'APPOINTMENTS'
        | 'ACTIVITIES'
        | 'ALLOCATIONS'
        | 'CORE_PERSON'
        | 'INCIDENTS'
        | 'COURT_SENTENCING'
        | 'PERSONALRELATIONSHIPS'
        | 'PERSONALRELATIONSHIPS_PROFILEDETAIL'
        | 'ORGANISATIONS'
        | 'SENTENCING_ADJUSTMENTS'
        | 'VISIT_BALANCE'
      migrationId: string
      /** Format: int64 */
      estimatedCount: number
      body: components['schemas']['CourtSentencingMigrationFilter']
      properties: {
        [key: string]: unknown
      }
    }
    /** @description Filter specifying what should be migrated from NOMIS to DPS */
    OrganisationsMigrationFilter: {
      /**
       * Format: date
       * @description Only include Organisations created on or after this date
       * @example 2020-03-23
       */
      fromDate?: string
      /**
       * Format: date
       * @description Only include Organisations created before or on this date
       * @example 2020-03-24
       */
      toDate?: string
    }
    MigrationContextOrganisationsMigrationFilter: {
      /** @enum {string} */
      type:
        | 'VISITS'
        | 'APPOINTMENTS'
        | 'ACTIVITIES'
        | 'ALLOCATIONS'
        | 'CORE_PERSON'
        | 'INCIDENTS'
        | 'COURT_SENTENCING'
        | 'PERSONALRELATIONSHIPS'
        | 'PERSONALRELATIONSHIPS_PROFILEDETAIL'
        | 'ORGANISATIONS'
        | 'SENTENCING_ADJUSTMENTS'
        | 'VISIT_BALANCE'
      migrationId: string
      /** Format: int64 */
      estimatedCount: number
      body: components['schemas']['OrganisationsMigrationFilter']
      properties: {
        [key: string]: unknown
      }
    }
    /** @description Filter specifying what should be migrated from NOMIS to DPS */
    CorePersonMigrationFilter: {
      /**
       * Format: date
       * @description Only include Persons created on or after this date
       * @example 2020-03-23
       */
      fromDate?: string
      /**
       * Format: date
       * @description Only include Persons created before or on this date
       * @example 2020-03-24
       */
      toDate?: string
    }
    MigrationContextCorePersonMigrationFilter: {
      /** @enum {string} */
      type:
        | 'VISITS'
        | 'APPOINTMENTS'
        | 'ACTIVITIES'
        | 'ALLOCATIONS'
        | 'CORE_PERSON'
        | 'INCIDENTS'
        | 'COURT_SENTENCING'
        | 'PERSONALRELATIONSHIPS'
        | 'PERSONALRELATIONSHIPS_PROFILEDETAIL'
        | 'ORGANISATIONS'
        | 'SENTENCING_ADJUSTMENTS'
        | 'VISIT_BALANCE'
      migrationId: string
      /** Format: int64 */
      estimatedCount: number
      body: components['schemas']['CorePersonMigrationFilter']
      properties: {
        [key: string]: unknown
      }
    }
    /** @description Filter specifying what should be migrated from NOMIS to DPS */
    PrisonerRestrictionMigrationFilter: {
      /**
       * Format: date
       * @description Only include restrictions created on or after this date
       * @example 2020-03-23
       */
      fromDate?: string
      /**
       * Format: date
       * @description Only include restrictions created before or on this date
       * @example 2020-03-24
       */
      toDate?: string
    }
    MigrationContextPrisonerRestrictionMigrationFilter: {
      /** @enum {string} */
      type:
        | 'VISITS'
        | 'APPOINTMENTS'
        | 'ACTIVITIES'
        | 'ALLOCATIONS'
        | 'CORE_PERSON'
        | 'INCIDENTS'
        | 'COURT_SENTENCING'
        | 'PERSONALRELATIONSHIPS'
        | 'PERSONALRELATIONSHIPS_PROFILEDETAIL'
        | 'ORGANISATIONS'
        | 'SENTENCING_ADJUSTMENTS'
        | 'VISIT_BALANCE'
      migrationId: string
      /** Format: int64 */
      estimatedCount: number
      body: components['schemas']['PrisonerRestrictionMigrationFilter']
      properties: {
        [key: string]: unknown
      }
    }
    /** @description Filter specifying what should be migrated from NOMIS to DPS */
    ContactPersonProfileDetailsMigrationFilter: {
      /**
       * @description Only migrate a single prisoner - used for testing
       * @example A1234BC
       */
      prisonerNumber?: string
    }
    MigrationContextContactPersonProfileDetailsMigrationFilter: {
      /** @enum {string} */
      type:
        | 'VISITS'
        | 'APPOINTMENTS'
        | 'ACTIVITIES'
        | 'ALLOCATIONS'
        | 'CORE_PERSON'
        | 'INCIDENTS'
        | 'COURT_SENTENCING'
        | 'PERSONALRELATIONSHIPS'
        | 'PERSONALRELATIONSHIPS_PROFILEDETAIL'
        | 'ORGANISATIONS'
        | 'SENTENCING_ADJUSTMENTS'
        | 'VISIT_BALANCE'
      migrationId: string
      /** Format: int64 */
      estimatedCount: number
      body: components['schemas']['ContactPersonProfileDetailsMigrationFilter']
      properties: {
        [key: string]: unknown
      }
    }
    /** @description Filter specifying what should be migrated from NOMIS to Appointments service */
    AppointmentsMigrationFilter: {
      /**
       * Format: date
       * @description Only include appointments on or after this date
       * @example 2020-03-23
       */
      fromDate?: string
      /**
       * Format: date
       * @description Only include appointments before or on this date
       * @example 2020-03-24
       */
      toDate?: string
      /**
       * @description Only include appointments for these prison ids
       * @example ['MDI','LEI']
       */
      prisonIds: string[]
    }
    MigrationContextAppointmentsMigrationFilter: {
      /** @enum {string} */
      type:
        | 'VISITS'
        | 'APPOINTMENTS'
        | 'ACTIVITIES'
        | 'ALLOCATIONS'
        | 'CORE_PERSON'
        | 'INCIDENTS'
        | 'COURT_SENTENCING'
        | 'PERSONALRELATIONSHIPS'
        | 'PERSONALRELATIONSHIPS_PROFILEDETAIL'
        | 'ORGANISATIONS'
        | 'SENTENCING_ADJUSTMENTS'
        | 'VISIT_BALANCE'
      migrationId: string
      /** Format: int64 */
      estimatedCount: number
      body: components['schemas']['AppointmentsMigrationFilter']
      properties: {
        [key: string]: unknown
      }
    }
    /** @description Filter specifying which allocations should be migrated from NOMIS to DPS service */
    AllocationsMigrationFilter: {
      /**
       * @description Only include allocations for this prison id
       * @example MDI
       */
      prisonId: string
      /**
       * Format: int64
       * @description Only include allocations from a single course activity
       * @example 12345
       */
      courseActivityId?: number
      /**
       * Format: date
       * @description The date the new activity will start. This should be the same as the related activity migration.
       * @example 2025-01-31
       */
      activityStartDate?: string
    }
    MigrationContextAllocationsMigrationFilter: {
      /** @enum {string} */
      type:
        | 'VISITS'
        | 'APPOINTMENTS'
        | 'ACTIVITIES'
        | 'ALLOCATIONS'
        | 'CORE_PERSON'
        | 'INCIDENTS'
        | 'COURT_SENTENCING'
        | 'PERSONALRELATIONSHIPS'
        | 'PERSONALRELATIONSHIPS_PROFILEDETAIL'
        | 'ORGANISATIONS'
        | 'SENTENCING_ADJUSTMENTS'
        | 'VISIT_BALANCE'
      migrationId: string
      /** Format: int64 */
      estimatedCount: number
      body: components['schemas']['AllocationsMigrationFilter']
      properties: {
        [key: string]: unknown
      }
    }
    /** @description Filter specifying which activities should be migrated from NOMIS to DPS service */
    ActivitiesMigrationFilter: {
      /**
       * @description Only include activities for this prison id
       * @example MDI
       */
      prisonId: string
      /**
       * Format: int64
       * @description Only include a single course activity
       * @example 12345
       */
      courseActivityId?: number
      /**
       * Format: date
       * @description The date the new activity will start. Cannot be null except for old data prior to start date being mandatory.
       * @example 2025-01-31
       */
      activityStartDate?: string
      /**
       * Format: date
       * @description The date the NOMIS activities will end. If null then they have not been ended yet.
       * @example 2025-01-30
       */
      nomisActivityEndDate?: string
    }
    MigrationContextActivitiesMigrationFilter: {
      /** @enum {string} */
      type:
        | 'VISITS'
        | 'APPOINTMENTS'
        | 'ACTIVITIES'
        | 'ALLOCATIONS'
        | 'CORE_PERSON'
        | 'INCIDENTS'
        | 'COURT_SENTENCING'
        | 'PERSONALRELATIONSHIPS'
        | 'PERSONALRELATIONSHIPS_PROFILEDETAIL'
        | 'ORGANISATIONS'
        | 'SENTENCING_ADJUSTMENTS'
        | 'VISIT_BALANCE'
      migrationId: string
      /** Format: int64 */
      estimatedCount: number
      body: components['schemas']['ActivitiesMigrationFilter']
      properties: {
        [key: string]: unknown
      }
    }
    DlqMessage: {
      body: {
        [key: string]: unknown
      }
      messageId: string
    }
    GetDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      /** Format: int32 */
      messagesReturnedCount: number
      messages: components['schemas']['DlqMessage'][]
    }
    /** @description Visit room usage and vsip mapping */
    VisitRoomUsageResponse: {
      /** @description The nomis internal location description */
      agencyInternalLocationDescription: string
      /**
       * Format: int64
       * @description room usage count
       */
      count: number
      /** @description VSIP room mapping */
      vsipRoom?: string
      /** @description The nomis prison id */
      prisonId: string
    }
    MigrationHistory: {
      migrationId: string
      /** Format: date-time */
      whenStarted: string
      /** Format: date-time */
      whenEnded?: string
      /** Format: int64 */
      estimatedRecordCount: number
      filter?: string
      /** Format: int64 */
      recordsMigrated: number
      /** Format: int64 */
      recordsFailed: number
      /** @enum {string} */
      migrationType:
        | 'VISITS'
        | 'APPOINTMENTS'
        | 'ACTIVITIES'
        | 'ALLOCATIONS'
        | 'CORE_PERSON'
        | 'INCIDENTS'
        | 'COURT_SENTENCING'
        | 'PERSONALRELATIONSHIPS'
        | 'PERSONALRELATIONSHIPS_PROFILEDETAIL'
        | 'ORGANISATIONS'
        | 'SENTENCING_ADJUSTMENTS'
        | 'VISIT_BALANCE'
      /** @enum {string} */
      status: 'STARTED' | 'COMPLETED' | 'CANCELLED_REQUESTED' | 'CANCELLED'
      id: string
      isNew: boolean
    }
    InProgressMigration: {
      /** Format: int64 */
      recordsMigrated?: number
      /** Format: int32 */
      toBeProcessedCount?: number
      /** Format: int32 */
      beingProcessedCount?: number
      /** Format: int32 */
      recordsFailed?: number
      migrationId?: string
      /** Format: date-time */
      whenStarted?: string
      /** Format: int64 */
      estimatedRecordCount?: number
      /** @enum {string} */
      migrationType?:
        | 'VISITS'
        | 'APPOINTMENTS'
        | 'ACTIVITIES'
        | 'ALLOCATIONS'
        | 'CORE_PERSON'
        | 'INCIDENTS'
        | 'COURT_SENTENCING'
        | 'PERSONALRELATIONSHIPS'
        | 'PERSONALRELATIONSHIPS_PROFILEDETAIL'
        | 'ORGANISATIONS'
        | 'SENTENCING_ADJUSTMENTS'
        | 'VISIT_BALANCE'
      /** @enum {string} */
      status?: 'STARTED' | 'COMPLETED' | 'CANCELLED_REQUESTED' | 'CANCELLED'
    }
    CaseReferenceLegacyData: {
      offenderCaseReference: string
      /** Format: date-time */
      updatedDate: string
    }
    ChargeLegacyData: {
      postedDate?: string
      nomisOutcomeCode?: string
      outcomeDescription?: string
      outcomeDispositionCode?: string
      outcomeConvictionFlag?: boolean
    }
    CourtAppearanceLegacyData: {
      postedDate?: string
      nomisOutcomeCode?: string
      outcomeDescription?: string
      /** Format: date-time */
      nextEventDateTime?: string
      appearanceTime?: string
      outcomeDispositionCode?: string
      outcomeConvictionFlag?: boolean
    }
    CourtCaseLegacyData: {
      caseReferences: components['schemas']['CaseReferenceLegacyData'][]
    }
    MigrationCreateCharge: {
      /** Format: int64 */
      chargeNOMISId: number
      offenceCode: string
      legacyData: components['schemas']['ChargeLegacyData']
      /** Format: date */
      offenceStartDate?: string
      /** Format: date */
      offenceEndDate?: string
      sentence?: components['schemas']['MigrationCreateSentence']
      /** Format: int64 */
      mergedFromCaseId?: number
      /** Format: date */
      mergedFromDate?: string
    }
    MigrationCreateCourtAppearance: {
      /** Format: int64 */
      eventId: number
      courtCode: string
      /** Format: date */
      appearanceDate: string
      /** Format: uuid */
      appearanceTypeUuid: string
      legacyData: components['schemas']['CourtAppearanceLegacyData']
      charges: components['schemas']['MigrationCreateCharge'][]
    }
    MigrationCreateCourtCase: {
      /** Format: int64 */
      caseId: number
      active: boolean
      courtCaseLegacyData: components['schemas']['CourtCaseLegacyData']
      appearances: components['schemas']['MigrationCreateCourtAppearance'][]
      merged?: boolean
    }
    MigrationCreateCourtCases: {
      prisonerId: string
      courtCases: components['schemas']['MigrationCreateCourtCase'][]
    }
    MigrationCreateFine: {
      fineAmount: number
    }
    MigrationCreatePeriodLength: {
      periodLengthId: components['schemas']['NomisPeriodLengthId']
      legacyData: components['schemas']['PeriodLengthLegacyData']
      /** Format: int32 */
      periodYears?: number
      /** Format: int32 */
      periodMonths?: number
      /** Format: int32 */
      periodWeeks?: number
      /** Format: int32 */
      periodDays?: number
    }
    MigrationCreateSentence: {
      sentenceId: components['schemas']['MigrationSentenceId']
      active: boolean
      legacyData: components['schemas']['SentenceLegacyData']
      periodLengths: components['schemas']['MigrationCreatePeriodLength'][]
      fine?: components['schemas']['MigrationCreateFine']
      consecutiveToSentenceId?: components['schemas']['MigrationSentenceId']
      /** Format: date */
      returnToCustodyDate?: string
    }
    MigrationSentenceId: {
      /** Format: int64 */
      offenderBookingId: number
      /** Format: int32 */
      sequence: number
    }
    NomisPeriodLengthId: {
      /** Format: int64 */
      offenderBookingId: number
      /** Format: int32 */
      sentenceSequence: number
      /** Format: int32 */
      termSequence: number
    }
    PeriodLengthLegacyData: {
      lifeSentence?: boolean
      sentenceTermCode?: string
      sentenceTermDescription?: string
    }
    SentenceLegacyData: {
      postedDate: string
      sentenceCalcType?: string
      sentenceCategory?: string
      sentenceTypeDesc?: string
      active?: boolean
      nomisLineReference?: string
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export interface operations {
  'syncContactPersonProfileDetail-0E7RQCE': {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonerNumber: string
        profileType: 'MARITAL' | 'CHILD'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Profile detail synchronised to DPS */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to start migration */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Found nothing to synchronise */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  retryDlq: {
    parameters: {
      query?: never
      header?: never
      path: {
        dlqName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['RetryDlqResult']
        }
      }
    }
  }
  retryAllDlqs: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['RetryDlqResult'][]
        }
      }
    }
  }
  purgeQueue: {
    parameters: {
      query?: never
      header?: never
      path: {
        queueName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PurgeQueueResult']
        }
      }
    }
  }
  moveActivityStartDates: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Migration ID */
        migrationId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MoveActivityStartDateRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': string[]
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  endMigratedActivities: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Migration ID */
        migrationId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  repairVisitBalance: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  repairPrisonerContacts: {
    parameters: {
      query?: never
      header?: never
      path: {
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  repairAlerts: {
    parameters: {
      query?: never
      header?: never
      path: {
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  repairPostMergeAdjustments: {
    parameters: {
      query?: never
      header?: never
      path: {
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  repairPerson: {
    parameters: {
      query?: never
      header?: never
      path: {
        personId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  repairPersonAsync: {
    parameters: {
      query?: never
      header?: never
      path: {
        personId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Accepted */
      202: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  migrateVisits: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['VisitsMigrationFilter']
      }
    }
    responses: {
      /** @description Migration process started */
      202: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MigrationContextVisitsMigrationFilter']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to start migration */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Migration already in progress */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  migrateVisitBalance: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['VisitBalanceMigrationFilter']
      }
    }
    responses: {
      /** @description Migration process started */
      202: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MigrationContextVisitBalanceMigrationFilter']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to start migration */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Migration already in progress */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  migrateSentencing: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SentencingMigrationFilter']
      }
    }
    responses: {
      /** @description Migration process started */
      202: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MigrationContextSentencingMigrationFilter']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to start migration */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Migration already in progress */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  refresh: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Migration Id
         * @example 2020-03-24T12:00:00
         */
        migrationId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Refresh completed */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Migration is not in a completed state */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Migration not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  migrateIncidents: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['IncidentsMigrationFilter']
      }
    }
    responses: {
      /** @description Migration process started */
      202: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MigrationContextIncidentsMigrationFilter']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to start migration */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Migration already in progress */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  migrateCourtSentencing: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CourtSentencingMigrationFilter']
      }
    }
    responses: {
      /** @description Migration process started */
      202: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MigrationContextCourtSentencingMigrationFilter']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to start migration */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Migration already in progress */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  migrateCorporate: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OrganisationsMigrationFilter']
      }
    }
    responses: {
      /** @description Migration process started */
      202: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MigrationContextOrganisationsMigrationFilter']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to start migration */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Migration already in progress */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  migrateCorePerson: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CorePersonMigrationFilter']
      }
    }
    responses: {
      /** @description Migration process started */
      202: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MigrationContextCorePersonMigrationFilter']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to start migration */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Migration already in progress */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  migrateContactPerson: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonerRestrictionMigrationFilter']
      }
    }
    responses: {
      /** @description Migration process started */
      202: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MigrationContextPrisonerRestrictionMigrationFilter']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to start migration */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Migration already in progress */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  migrateContactPerson_1: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ContactPersonProfileDetailsMigrationFilter']
      }
    }
    responses: {
      /** @description Migration process started */
      202: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MigrationContextContactPersonProfileDetailsMigrationFilter']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to start migration */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  cancel: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Migration Id
         * @example 2020-03-24T12:00:00
         */
        migrationId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Cancellation request accepted */
      202: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Migration not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  migrateAppointments: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AppointmentsMigrationFilter']
      }
    }
    responses: {
      /** @description Migration process started */
      202: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MigrationContextAppointmentsMigrationFilter']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to start migration */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Migration already in progress */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  migrateAllocations: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AllocationsMigrationFilter']
      }
    }
    responses: {
      /** @description Migration process started */
      202: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MigrationContextAllocationsMigrationFilter']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to start migration */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Migration already in progress */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  migrateActivities: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ActivitiesMigrationFilter']
      }
    }
    responses: {
      /** @description Migration process started */
      202: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MigrationContextActivitiesMigrationFilter']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to start migration */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Migration already in progress */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  repairPunishments: {
    parameters: {
      query?: {
        /** @description if true, record will be deleted in DPS and mapping table */
        recordDeleted?: boolean
      }
      header?: never
      path: {
        /** @description Id of the location in Nomis */
        internalLocationId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  repairIncident: {
    parameters: {
      query?: {
        /** @description if true, will attempt to create a new incident */
        createIncident?: boolean
      }
      header?: never
      path: {
        incidentId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
  getDlqMessages: {
    parameters: {
      query?: {
        maxMessages?: number
      }
      header?: never
      path: {
        dlqName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['GetDlqResult']
        }
      }
    }
  }
  getVisitRoomUsageDetailsByFilter: {
    parameters: {
      query?: {
        /**
         * @description Filter results by prison ids (returns all prisons if not specified)
         * @example ['MDI','LEI']
         */
        prisonIds?: string[]
        /**
         * @description Filter results by visitType (returns all types if not specified)
         * @example ['SCON','OFFI']
         */
        visitTypes?: string[]
        /**
         * @description Filter results by visits that start on or after the given timestamp
         * @example 2021-11-03T09:00:00
         */
        fromDateTime?: string
        /**
         * @description Filter results by visits that start on or before the given timestamp
         * @example 2021-11-03T09:00:00
         */
        toDateTime?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description list of visit room and count is returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VisitRoomUsageResponse'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to start migration */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  get: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Migration Id
         * @example 2020-03-24T12:00:00
         */
        migrationId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The visit balance migration history record */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MigrationHistory']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Migration not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getHistory: {
    parameters: {
      query?: {
        /**
         * @description Only include migrations started after this date time
         * @example 2020-03-23T12:00:00
         */
        fromDateTime?: string
        /**
         * @description Only include migrations started before this date time
         * @example 2020-03-24T12:00:00
         */
        toDateTime?: string
        /**
         * @description When true only include migrations that had at least one failure
         * @example false
         */
        includeOnlyFailures?: boolean
        /**
         * @description Specify the prison associated with the migration
         * @example HEI
         */
        prisonId?: string
      }
      header?: never
      path: {
        /** @description Migration Type */
        migrationType:
          | 'VISITS'
          | 'APPOINTMENTS'
          | 'ACTIVITIES'
          | 'ALLOCATIONS'
          | 'CORE_PERSON'
          | 'INCIDENTS'
          | 'COURT_SENTENCING'
          | 'PERSONALRELATIONSHIPS'
          | 'PERSONALRELATIONSHIPS_PROFILEDETAIL'
          | 'ORGANISATIONS'
          | 'SENTENCING_ADJUSTMENTS'
          | 'VISIT_BALANCE'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description All history records for specified migration type */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MigrationHistory'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  activeMigration: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Migration Type */
        migrationType:
          | 'VISITS'
          | 'APPOINTMENTS'
          | 'ACTIVITIES'
          | 'ALLOCATIONS'
          | 'CORE_PERSON'
          | 'INCIDENTS'
          | 'COURT_SENTENCING'
          | 'PERSONALRELATIONSHIPS'
          | 'PERSONALRELATIONSHIPS_PROFILEDETAIL'
          | 'ORGANISATIONS'
          | 'SENTENCING_ADJUSTMENTS'
          | 'VISIT_BALANCE'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Only called during an active migration from the UI - assumes latest migration is active */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['InProgressMigration']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Migration not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getDlqMessagesCount: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Migration Type */
        migrationType:
          | 'VISITS'
          | 'APPOINTMENTS'
          | 'ACTIVITIES'
          | 'ALLOCATIONS'
          | 'CORE_PERSON'
          | 'INCIDENTS'
          | 'COURT_SENTENCING'
          | 'PERSONALRELATIONSHIPS'
          | 'PERSONALRELATIONSHIPS_PROFILEDETAIL'
          | 'ORGANISATIONS'
          | 'SENTENCING_ADJUSTMENTS'
          | 'VISIT_BALANCE'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Count of dlq messages for specified migration type */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MigrationHistory'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getDlqMessages_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Migration Type */
        migrationType:
          | 'VISITS'
          | 'APPOINTMENTS'
          | 'ACTIVITIES'
          | 'ALLOCATIONS'
          | 'CORE_PERSON'
          | 'INCIDENTS'
          | 'COURT_SENTENCING'
          | 'PERSONALRELATIONSHIPS'
          | 'PERSONALRELATIONSHIPS_PROFILEDETAIL'
          | 'ORGANISATIONS'
          | 'SENTENCING_ADJUSTMENTS'
          | 'VISIT_BALANCE'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description All dlq messages for specified migration type */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MigrationHistory'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteDlqMessages: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Migration Type */
        migrationType:
          | 'VISITS'
          | 'APPOINTMENTS'
          | 'ACTIVITIES'
          | 'ALLOCATIONS'
          | 'CORE_PERSON'
          | 'INCIDENTS'
          | 'COURT_SENTENCING'
          | 'PERSONALRELATIONSHIPS'
          | 'PERSONALRELATIONSHIPS_PROFILEDETAIL'
          | 'ORGANISATIONS'
          | 'SENTENCING_ADJUSTMENTS'
          | 'VISIT_BALANCE'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description All dlq messages have been deleted for specified migration type */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MigrationHistory'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  offenderMigrationPayload: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender No AKA prisoner number
         * @example A1234AK
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Migration payload returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MigrationCreateCourtCases']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incorrect permissions to call endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  repairDeletedCaseNote: {
    parameters: {
      query?: never
      header?: never
      path: {
        nomisCaseNoteId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
    }
  }
}
