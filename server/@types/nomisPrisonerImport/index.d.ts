/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/sentence-adjustments/{adjustmentId}': {
    /** Requires role NOMIS_SENTENCING. Retrieves a sentence adjustment by id */
    get: operations['getSentenceAdjustment']
    /** Requires role NOMIS_SENTENCING. Updates a sentence adjustment by id */
    put: operations['updateSentenceAdjustment']
    /** Requires role NOMIS_SENTENCING. Deletes a sentence adjustment by id */
    delete: operations['deleteSentenceAdjustment']
  }
  '/schedules/{courseScheduleId}/booking/{bookingId}/attendance': {
    /** Creates or updates an attendance for the course schedule. Requires role NOMIS_ACTIVITIES */
    put: operations['upsertAttendance']
  }
  '/prisoners/{offenderNo}/visits/{visitId}': {
    /** Updates details of an existing visit such as the visitors and time slot */
    put: operations['updateVisit']
  }
  '/prisoners/{offenderNo}/visits/{visitId}/cancel': {
    put: operations['cancelVisit']
  }
  '/non-associations/offender/{offenderNo}/ns-offender/{nsOffenderNo}/sequence/{typeSequence}': {
    /** Updates an existing non-association. Requires role NOMIS_NON_ASSOCIATIONS */
    put: operations['updateNonAssociation']
    /** Deletes the specified non-association detail record. if there was only one, the parent NA record is deleted too. Requires role NOMIS_NON_ASSOCIATIONS */
    delete: operations['deleteNonAssociation']
  }
  '/non-associations/offender/{offenderNo}/ns-offender/{nsOffenderNo}/sequence/{typeSequence}/close': {
    /** Closes an existing non-association. Requires role NOMIS_NON_ASSOCIATIONS */
    put: operations['closeNonAssociation']
  }
  '/key-date-adjustments/{adjustmentId}': {
    /** Requires role NOMIS_SENTENCING. Retrieves a key date adjustment by id */
    get: operations['getKeyDateAdjustment']
    /** Requires role NOMIS_SENTENCING. Updates a sentence adjustment by id */
    put: operations['updateKeyDateAdjustment']
    /** Requires role NOMIS_SENTENCING. Deletes a key date adjustment by id */
    delete: operations['deleteKeyDateAdjustment']
  }
  '/incentives/reference-codes/{code}': {
    /** Gets a global incentive level by provided code and domain of IEP_LEVEL */
    get: operations['getGlobalIncentiveLevel']
    /** Updates an existing global incentive level, updateable fields are description and active */
    put: operations['updateGlobalIncentiveLevel']
  }
  '/incentives/prison/{prison}/code/{code}': {
    /** Gets prison incentive level data by provided code and prison */
    get: operations['getPrisonIncentiveLevel']
    /** Creates incentive level data associated with a Prison */
    put: operations['updatePrisonIncentiveLevelData']
  }
  '/appointments/{nomisEventId}': {
    /** Updates an existing appointment. Requires role NOMIS_APPOINTMENTS */
    put: operations['updateAppointment']
    /** Deletes an existing appointment by actually deleting from the table. Intended for appointments created in error. Requires role NOMIS_APPOINTMENTS */
    delete: operations['deleteAppointment']
  }
  '/appointments/{nomisEventId}/uncancel': {
    /** Undoes an appointment cancellation. Requires role NOMIS_APPOINTMENTS */
    put: operations['uncancelAppointment']
  }
  '/appointments/{nomisEventId}/cancel': {
    /** Cancels an existing appointment. Requires role NOMIS_APPOINTMENTS */
    put: operations['cancelAppointment']
  }
  '/adjudications/adjudication-number/{adjudicationNumber}/repairs': {
    /** List of repairs are refreshed so this operation may result in any combinations of inserts, updates or deletes. Requires ROLE_NOMIS_ADJUDICATIONS */
    put: operations['updateRepairs']
  }
  '/adjudications/adjudication-number/{adjudicationNumber}/hearings/{hearingId}': {
    /** Updates a hearing for a given adjudication and hearing Id. Requires ROLE_NOMIS_ADJUDICATIONS */
    put: operations['updateHearing']
    /** Deletes a hearing for a given adjudication and hearing Id. Requires ROLE_NOMIS_ADJUDICATIONS */
    delete: operations['deleteHearing']
  }
  '/activities/{courseActivityId}': {
    /** Gets activity details including schedule rules and pay rates. Requires role NOMIS_ACTIVITIES */
    get: operations['getActivity']
    /** Updates an activity and associated pay rates. Requires role NOMIS_ACTIVITIES */
    put: operations['updateActivity']
    /** Deletes a course activity and its children - pay rates, schedules, allocations and attendances. Intended to be used for data fixes. Requires role NOMIS_ACTIVITIES */
    delete: operations['deleteActivity']
  }
  '/activities/{courseActivityId}/schedule': {
    /** Updates a course schedule. Requires role NOMIS_ACTIVITIES */
    put: operations['updateCourseSchedule']
  }
  '/activities/{courseActivityId}/end': {
    /** Ends a course activity and all active attendances with end date today. Requires role NOMIS_ACTIVITIES */
    put: operations['endActivity']
  }
  '/activities/{courseActivityId}/allocation': {
    /** Creates or updates a prisoner's allocation to an activity. Requires role NOMIS_ACTIVITIES */
    put: operations['upsertAllocation']
  }
  '/prisoners/{offenderNo}/visits': {
    /** Creates a new visit and decrements the visit balance. */
    post: operations['createVisit']
  }
  '/prisoners/{offenderNo}/adjudications': {
    /** Creates an adjudication. Requires ROLE_NOMIS_ADJUDICATIONS */
    post: operations['createAdjudication']
  }
  '/prisoners/booking-id/{bookingId}/sentences/{sentenceSequence}/adjustments': {
    /** Required role NOMIS_SENTENCING Creates a new sentence adjustment (aka Debit/Credit). Key dates will not be recalculated as a side effect of this operation */
    post: operations['createSentenceAdjustment']
  }
  '/prisoners/booking-id/{bookingId}/incentives': {
    /** Creates a new incentive using next sequence no. */
    post: operations['createIncentive']
  }
  '/prisoners/booking-id/{bookingId}/incentives/reorder': {
    /** Reorder a series of IEPs so the sequence number matches the IEP date time. Latest time gets the higher sequence so the current IEP is the latest. This is required to correct DPS incentives that are created out of order */
    post: operations['reorderCurrentIncentives']
  }
  '/prisoners/booking-id/{bookingId}/adjustments': {
    /** Required role NOMIS_SENTENCING Creates a new key date adjustment. Key dates will be recalculated as a side effect of this operation */
    post: operations['createKeyDateAdjustment']
  }
  '/non-associations': {
    /** Creates a new non-association. Requires role NOMIS_NON_ASSOCIATIONS */
    post: operations['createNonAssociation']
  }
  '/incentives/reference-codes': {
    /** Creates a new global incentive level */
    post: operations['createGlobalIncentiveLevel']
  }
  '/incentives/reference-codes/reorder': {
    /** reorders all global incentive levels using provided list of Incentive codes, including inactive. 1-based index */
    post: operations['reorderGlobalIncentiveLevels']
  }
  '/incentives/prison/{prison}': {
    /** Creates incentive level data associated with a Prison */
    post: operations['createPrisonIncentiveLevelData']
  }
  '/appointments': {
    /** Creates a new appointment. Requires role NOMIS_APPOINTMENTS */
    post: operations['createAppointment']
  }
  '/adjudications/adjudication-number/{adjudicationNumber}/hearings': {
    /** Creates a hearing for a given adjudication. Requires ROLE_NOMIS_ADJUDICATIONS */
    post: operations['createHearing']
  }
  '/adjudications/adjudication-number/{adjudicationNumber}/hearings/{hearingId}/result': {
    /** Creates a hearing result for a given hearing. DPS only supports 1 result per hearing. Requires ROLE_NOMIS_ADJUDICATIONS */
    post: operations['createHearingResult']
    /** Deletes a hearing result for a given adjudication and hearing Id. The result sequence is always 1 for synchronising DPS migrated/created data. Requires ROLE_NOMIS_ADJUDICATIONS */
    delete: operations['deleteHearingResult']
  }
  '/activities': {
    /** Creates a new activity and associated pay rates. Requires role NOMIS_ACTIVITIES */
    post: operations['createActivity']
  }
  '/visits/{visitId}': {
    /** Retrieves a visit by id. */
    get: operations['getVisit']
  }
  '/visits/rooms/usage-count': {
    /** Retrieves a list of rooms with usage count for the (filtered) visits. Only future visits are included */
    get: operations['getVisitRoomCountsByFilter']
  }
  '/visits/ids': {
    /** Retrieves a paged list of visits by filter */
    get: operations['getVisitsByFilter']
  }
  '/prisoners/ids': {
    /** Requires role SYNCHRONISATION_REPORTING. */
    get: operations['getPrisonerIdentifiers']
  }
  '/non-associations/offender/{offenderNo}/ns-offender/{nsOffenderNo}': {
    /** Get the open non-association for the two offender numbers. Requires role NOMIS_NON_ASSOCIATIONS */
    get: operations['getNonAssociation']
  }
  '/non-associations/offender/{offenderNo}/ns-offender/{nsOffenderNo}/all': {
    /** Get all non-associations for the two offender numbers, including expired. Requires role NOMIS_NON_ASSOCIATIONS */
    get: operations['getNonAssociationDetails']
  }
  '/non-associations/ids': {
    /** Retrieves a paged list of composite ids by filter. Requires ROLE_NOMIS_NON_ASSOCIATIONS. */
    get: operations['getNonAssociationsByFilter']
  }
  '/incentives/ids': {
    /** Retrieves a paged list of incentive composite ids by filter. Requires ROLE_NOMIS_INCENTIVES. */
    get: operations['getIncentivesByFilter']
  }
  '/incentives/booking-id/{bookingId}/incentive-sequence/{incentiveSequence}': {
    /** Retrieves a created incentive level for a prisoner. Requires ROLE_NOMIS_INCENTIVES. */
    get: operations['getIncentive']
  }
  '/incentives/booking-id/{bookingId}/current': {
    /** Retrieves the current incentive level (by booking) for a prisoner. Requires ROLE_NOMIS_INCENTIVES. */
    get: operations['getCurrentIncentive']
  }
  '/appointments/{eventId}': {
    /** Get an appointment given the unique event id. Requires role NOMIS_APPOINTMENTS */
    get: operations['getAppointmentById']
  }
  '/appointments/ids': {
    /** Retrieves a paged list of incentive composite ids by filter. Requires ROLE_NOMIS_APPOINTMENTS. */
    get: operations['getAppointmentsByFilter']
  }
  '/appointments/booking/{bookingId}/location/{locationId}/start/{dateTime}': {
    /** Get an appointment given the booking id, internal location, date and start time. Requires role NOMIS_APPOINTMENTS */
    get: operations['getAppointment']
  }
  '/allocations/{allocationId}': {
    /** Gets allocation details. Requires role NOMIS_ACTIVITIES */
    get: operations['getAllocation']
  }
  '/allocations/ids': {
    /** Searches for active course allocations. Requires role NOMIS_ACTIVITIES */
    get: operations['findActiveAllocations']
  }
  '/adjustments/ids': {
    /** Retrieves a paged list of adjustment ids by filter. Requires ROLE_NOMIS_SENTENCING. */
    get: operations['getAdjustmentsByFilter']
  }
  '/adjudications/hearings/{hearingId}': {
    /** Retrieves a hearing by the hearing Id. Requires ROLE_NOMIS_ADJUDICATIONS */
    get: operations['getAdjudicationHearing']
  }
  '/adjudications/hearings/{hearingId}/result': {
    /** Retrieves a hearing result by the nomis hearing id. DPS migrated and synchronised hearing results always have a result sequence of 1 Requires ROLE_NOMIS_ADJUDICATIONS */
    get: operations['getAdjudicationHearingResult']
  }
  '/adjudications/charges/ids': {
    /** Retrieves a paged list of adjudication charge ids by filter. Requires ROLE_NOMIS_ADJUDICATIONS. */
    get: operations['getAdjudicationChargeIdsByFilter']
  }
  '/adjudications/adjudication-number/{adjudicationNumber}': {
    /** Retrieves an adjudication by the adjudication number. Requires ROLE_NOMIS_ADJUDICATIONS */
    get: operations['getAdjudication']
  }
  '/adjudications/adjudication-number/{adjudicationNumber}/charge-sequence/{chargeSequence}': {
    /** Retrieves an adjudication by the adjudication number and charge sequence. Will only return the specified charge. Requires ROLE_NOMIS_ADJUDICATIONS */
    get: operations['getAdjudicationByCharge']
  }
  '/activities/ids': {
    /** Searches for active course activities with allocated prisoners. Requires role NOMIS_ACTIVITIES */
    get: operations['findActiveActivities']
  }
  '/attendances/{eventId}': {
    /** Deletes an attendance from NOMIS. Requires role NOMIS_ACTIVITIES */
    delete: operations['deleteAttendance']
  }
  '/allocations/{referenceId}': {
    /** Deletes an allocation from NOMIS and any children - pay rates, attendances. Requires role NOMIS_ACTIVITIES */
    delete: operations['deleteAllocation']
  }
}

export interface components {
  schemas: {
    ErrorResponse: {
      /** Format: int32 */
      status: number
      /** Format: int32 */
      errorCode?: number
      userMessage?: string
      developerMessage?: string
      moreInfo?: string
    }
    /** @description Sentence adjustment update request */
    UpdateSentenceAdjustmentRequest: {
      /**
       * @description NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS
       * @example RX
       * @enum {string}
       */
      adjustmentTypeCode: 'RSR' | 'UR' | 'S240A' | 'RST' | 'RX'
      /**
       * Format: date
       * @description Date adjustment is applied
       */
      adjustmentDate?: string
      /**
       * Format: date
       * @description Start of the period which contributed to the adjustment
       */
      adjustmentFromDate?: string
      /**
       * Format: int64
       * @description Number of days for the adjustment
       */
      adjustmentDays: number
      /** @description Comment */
      comment?: string
      /**
       * @description Flag to indicate if the adjustment is being applied
       * @default true
       */
      active: boolean
    }
    /** @description Course activity create/update request */
    UpsertAttendanceRequest: {
      /**
       * Format: date
       * @description The date of the course schedule
       * @example 2023-04-03
       */
      scheduleDate: string
      /**
       * Format: partial-time
       * @description The time of the course schedule
       * @example 10:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The time the course schedule ends
       * @example 11:00
       */
      endTime: string
      /**
       * @description The status of the attendance
       * @example SCH
       */
      eventStatusCode: string
      /**
       * @description The outcome code for a completed attendance
       * @example ATT
       */
      eventOutcomeCode?: string
      /**
       * @description Comments relating to the attendance
       * @example Disruptive
       */
      comments?: string
      /**
       * @description Whether the absence is excused
       * @example true
       */
      unexcusedAbsence: boolean
      /**
       * @description Whether the absence is authorised
       * @example true
       */
      authorisedAbsence: boolean
      /**
       * @description Whether the attendance is to be paid
       * @example true
       */
      paid: boolean
      /**
       * @description Any bonus pay for the attendance
       * @example 1.5
       */
      bonusPay?: number
    }
    /** @description Attendance create/update response */
    UpsertAttendanceResponse: {
      /**
       * Format: int64
       * @description The attendance event id
       */
      eventId: number
      /**
       * Format: int64
       * @description The course schedule id for the attendance
       */
      courseScheduleId: number
      /** @description Whether or the attendance was created */
      created: boolean
    }
    /** @description Visit update request */
    UpdateVisitRequest: {
      /**
       * @description Visit start date and time
       * @example 2021-07-05T10:35:17
       */
      startDateTime: string
      /**
       * @description Visit end time
       * @example 14:30
       */
      endTime: string
      /** @description Visitors */
      visitorPersonIds: number[]
      /** @description Name of the real world room where visit will take place */
      room: string
      /**
       * @description Whether visit is restricted to a closed session
       * @enum {string}
       */
      openClosedStatus: 'OPEN' | 'CLOSED'
    }
    /** @description Visit cancellation */
    CancelVisitRequest: {
      /**
       * @description The cancellation reason
       * @enum {string}
       */
      outcome: 'VISCANC' | 'OFFCANC' | 'ADMIN' | 'NSHOW'
    }
    /** @description Offender NonAssociation update request */
    UpdateNonAssociationRequest: {
      /**
       * @description Reason code of the first prisoner, domain NON_ASSO_RSN
       * @example VIC
       */
      reason: string
      /**
       * @description Reason code of the other prisoner, domain NON_ASSO_RSN
       * @example PER
       */
      recipReason: string
      /**
       * @description Type code, domain NON_ASSO_TYP
       * @example WING
       */
      type: string
      /**
       * @description Free text name of staff member
       * @example Joe Bloggs
       */
      authorisedBy?: string
      /**
       * Format: date
       * @description Effective date
       * @example 2022-08-12
       */
      effectiveDate: string
      /**
       * @description Comment
       * @example Some comment
       */
      comment?: string
    }
    /** @description Key date adjustment update request */
    UpdateKeyDateAdjustmentRequest: {
      /**
       * @description NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS
       * @example ADA
       * @enum {string}
       */
      adjustmentTypeCode: 'LAL' | 'UAL' | 'RADA' | 'ADA' | 'SREM'
      /**
       * Format: date
       * @description Date adjustment is applied
       */
      adjustmentDate?: string
      /**
       * Format: date
       * @description Start of the period which contributed to the adjustment
       */
      adjustmentFromDate: string
      /**
       * Format: int64
       * @description Number of days for the adjustment
       */
      adjustmentDays: number
      /** @description Comment */
      comment?: string
      /**
       * @description Flag to indicate if the adjustment is being applied
       * @default true
       */
      active: boolean
    }
    /** @description IEP creation request */
    CreateIncentiveRequest: {
      /**
       * @description IEP Level
       * @example Standard
       */
      iepLevel: string
      /**
       * @description Review comments
       * @example A review took place
       */
      comments?: string
      /**
       * @description Date and time when last review took place
       * @example 2021-07-05T10:35:17
       */
      iepDateTime: string
      /**
       * @description Prison ID
       * @example MDI
       */
      prisonId: string
      /**
       * @description Username of the reviewer
       * @example AJONES
       */
      userId: string
    }
    ReferenceCode: {
      code: string
      domain: string
      description: string
      active: boolean
      /** Format: int32 */
      sequence?: number
      parentCode?: string
      /** Format: date */
      expiredDate?: string
      systemDataFlag: boolean
    }
    /** @description Prison Incentive level data create request */
    CreatePrisonIncentiveRequest: {
      /**
       * @description Incentive Level code
       * @example STD
       */
      levelCode: string
      /**
       * @description active status of the Global Incentive Level
       * @example true
       */
      active: boolean
      /**
       * @description default on admission
       * @example true
       */
      defaultOnAdmission: boolean
      /**
       * Format: int32
       * @description The number of weekday visits for a convicted prisoner per fortnight
       * @example 5500
       */
      visitOrderAllowance?: number
      /**
       * Format: int32
       * @description The number of privileged/weekend visits for a convicted prisoner per 4 weeks
       * @example 5500
       */
      privilegedVisitOrderAllowance?: number
      /**
       * Format: int32
       * @description The amount transferred weekly from the private cash account to the spends account for a remand prisoner to use
       * @example 5500
       */
      remandTransferLimitInPence?: number
      /**
       * Format: int32
       * @description The maximum amount allowed in the spends account for a remand prisoner
       * @example 5500
       */
      remandSpendLimitInPence?: number
      /**
       * Format: int32
       * @description The amount transferred weekly from the private cash account to the spends account for a convicted prisoner to use
       * @example 5500
       */
      convictedTransferLimitInPence?: number
      /**
       * Format: int32
       * @description The maximum amount allowed in the spends account for a convicted prisoner
       * @example 5500
       */
      convictedSpendLimitInPence?: number
    }
    /** @description Incentive information */
    PrisonIncentiveLevelDataResponse: {
      prisonId: string
      iepLevelCode: string
      /** Format: int32 */
      visitOrderAllowance?: number
      /** Format: int32 */
      privilegedVisitOrderAllowance?: number
      defaultOnAdmission: boolean
      /** Format: int32 */
      remandTransferLimitInPence?: number
      /** Format: int32 */
      remandSpendLimitInPence?: number
      /** Format: int32 */
      convictedTransferLimitInPence?: number
      /** Format: int32 */
      convictedSpendLimitInPence?: number
      active: boolean
      /** Format: date */
      expiryDate?: string
      visitAllowanceActive?: boolean
      /** Format: date */
      visitAllowanceExpiryDate?: string
    }
    /** @description Offender individual schedule creation request */
    CreateAppointmentRequest: {
      /**
       * Format: int64
       * @description Booking id of the prisoner
       * @example 1234567
       */
      bookingId: number
      /**
       * Format: date
       * @description Appointment date
       * @example 2022-08-12
       */
      eventDate: string
      /**
       * Format: partial-time
       * @description Appointment start time
       * @example 09:45
       */
      startTime: string
      /**
       * Format: partial-time
       * @description Activity end time
       * @example 15:20
       */
      endTime: string
      /**
       * Format: int64
       * @description Room where the appointment is to occur (in cell if null)
       * @example 112233
       */
      internalLocationId?: number
      /**
       * @description Appointment event sub-type
       * @example MEOT
       */
      eventSubType: string
      /**
       * @description Comment
       * @example Some comment
       */
      comment?: string
    }
    CodeDescription: {
      code: string
      description: string
    }
    /** @description The repairs required due to the damage */
    Repair: {
      type: components['schemas']['CodeDescription']
      comment?: string
      cost?: number
      /** @description Username of person who created the record in NOMIS */
      createdByUsername: string
    }
    UpdateRepairsResponse: {
      /** @description The repairs required due to the damage */
      repairs: components['schemas']['Repair'][]
    }
    /** @description Current list of repairs required due to damage */
    RepairToUpdateOrAdd: {
      /**
       * @description NOMIS repair type code
       * @enum {string}
       */
      typeCode: 'CLEA' | 'DECO' | 'ELEC' | 'FABR' | 'LOCK' | 'PLUM'
      /** @description Description of repair required by damage */
      comment?: string
    }
    /** @description Repairs required due to damage. Any items not in this list will be removed from the Adjudication in NOMIS */
    UpdateRepairsRequest: {
      /** @description Current list of repairs required due to damage */
      repairs: components['schemas']['RepairToUpdateOrAdd'][]
    }
    /** @description Hearing update fields */
    UpdateHearingRequest: {
      /**
       * @description Type of hearing
       * @example GOV
       */
      hearingType: string
      /**
       * Format: date
       * @description Hearing date
       */
      hearingDate: string
      /**
       * Format: partial-time
       * @description Hearing time
       */
      hearingTime: string
      /**
       * Format: int64
       * @description location id for the hearing
       * @example 123456
       */
      internalLocationId: number
    }
    /** @description Course schedule request */
    CourseScheduleRequest: {
      /**
       * Format: int64
       * @description The id of the course schedule if known
       * @example 13245
       */
      id?: number
      /**
       * Format: date
       * @description The date of the course schedule
       * @example 2023-04-03
       */
      date: string
      /**
       * Format: partial-time
       * @description The time of the course schedule
       * @example 10:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The time the course schedule ends
       * @example 11:00
       */
      endTime: string
      /**
       * @description Whether the course schedule has been cancelled
       * @example true
       */
      cancelled: boolean
    }
    /** @description Course activity creation request pay rates */
    PayRateRequest: {
      /**
       * @description The incentive level
       * @example BAS
       */
      incentiveLevel: string
      /**
       * @description The pay band (1 TO 10)
       * @example 4
       */
      payBand: string
      /**
       * @description The half day rate
       * @example 0.5
       */
      rate: number
    }
    /** @description Course activity creation request schedule rules */
    ScheduleRuleRequest: {
      /**
       * Format: partial-time
       * @description Schedule start time in 24 hour clock
       * @example 08:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description Schedule end time in 24 hour clock
       * @example 11:00
       */
      endTime: string
      /**
       * @description Scheduled on Monday
       * @example true
       */
      monday: boolean
      /**
       * @description Scheduled on Tuesday
       * @example true
       */
      tuesday: boolean
      /**
       * @description Scheduled on Wednesday
       * @example true
       */
      wednesday: boolean
      /**
       * @description Scheduled on Thursday
       * @example true
       */
      thursday: boolean
      /**
       * @description Scheduled on Friday
       * @example true
       */
      friday: boolean
      /** @description Scheduled on Saturday */
      saturday: boolean
      /** @description Scheduled on Sunday */
      sunday: boolean
    }
    /** @description Course activity update request */
    UpdateActivityRequest: {
      /**
       * Format: date
       * @description Activity start date
       * @example 2022-08-12
       */
      startDate: string
      /**
       * Format: date
       * @description Activity end date
       * @example 2022-08-12
       */
      endDate?: string
      /**
       * Format: int64
       * @description Room where the activity is to occur (from activity schedule)
       */
      internalLocationId?: number
      /**
       * Format: int32
       * @description Capacity of activity (from activity schedule)
       */
      capacity: number
      /** @description Pay rates */
      payRates: components['schemas']['PayRateRequest'][]
      /** @description Description from concatenated activity and activity schedule */
      description: string
      /** @description Minimum Incentive Level */
      minimumIncentiveLevelCode: string
      /**
       * @description Half or Full day (H or F)
       * @example H
       * @enum {string}
       */
      payPerSession: 'F' | 'H'
      /** @description Schedule rules */
      scheduleRules: components['schemas']['ScheduleRuleRequest'][]
      /** @description Exclude bank holidays? */
      excludeBankHolidays: boolean
      /** @description Outside work? */
      outsideWork: boolean
      /** @description Program Service code (from activity category) */
      programCode: string
      /** @description Schedules */
      schedules: components['schemas']['CourseScheduleRequest'][]
    }
    /** @description Activity creation response */
    CreateActivityResponse: {
      /**
       * Format: int64
       * @description The created course activity id
       */
      courseActivityId: number
      /** @description The created course schedules */
      courseSchedules: components['schemas']['CreateScheduledInstanceResponse'][]
    }
    /** @description The created course schedules */
    CreateScheduledInstanceResponse: {
      /**
       * Format: int64
       * @description The created scheduled instance id
       */
      courseScheduleId: number
      /**
       * Format: date
       * @description The instance date
       */
      date: string
      /**
       * Format: partial-time
       * @description The instance start time
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The instance end time
       */
      endTime: string
    }
    /** @description Course schedule update update response */
    UpdateCourseScheduleResponse: {
      /**
       * Format: int64
       * @description The id of the course schedule
       * @example 123456
       */
      courseScheduleId: number
    }
    /** @description Course activity create or update allocation request */
    UpsertAllocationRequest: {
      /**
       * Format: int64
       * @description Booking id of the prisoner
       * @example 1234567
       */
      bookingId: number
      /**
       * @description The prisoner's pay band
       * @example 2
       */
      payBandCode: string
      /**
       * Format: date
       * @description Activity start date
       * @example 2022-08-12
       */
      startDate: string
      /**
       * Format: date
       * @description Activity end date
       * @example 2022-08-12
       */
      endDate?: string
      /**
       * @description Activity end reason (from domain PS_END_RSN)
       * @example REL
       */
      endReason?: string
      /** @description Activity end comment */
      endComment?: string
      /** @description Offender is suspended from Activity? */
      suspended?: boolean
      /** @description Activity suspended comment */
      suspendedComment?: string
      /**
       * @description Offender program status from domain OFF_PRG_STS
       * @example ALLOC
       */
      programStatusCode: string
    }
    /** @description OffenderProgramProfile create/update response */
    UpsertAllocationResponse: {
      /**
       * Format: int64
       * @description The created OffenderProgramProfile id
       * @example 12345678
       */
      offenderProgramReferenceId: number
      /** @description Whether or not the allocation was created */
      created: boolean
    }
    /** @description Visit creation request */
    CreateVisitRequest: {
      /**
       * @description Visit start date and time
       * @example 2021-07-05T10:35:17
       */
      startDateTime: string
      /**
       * @description Visit end time
       * @example 14:30
       */
      endTime: string
      /** @description Prison where the visit is to occur */
      prisonId: string
      /** @description Visitors */
      visitorPersonIds: number[]
      /**
       * @description Visit type, whether social or official
       * @enum {string}
       */
      visitType: 'SCON' | 'OFFI'
      /**
       * Format: date
       * @description Issue date
       */
      issueDate: string
      /** @description Comment to be added to visit */
      visitComment: string
      /** @description Comment to be added to visit order (if one is created) */
      visitOrderComment: string
      /** @description Name of the real world room where visit will take place */
      room: string
      /**
       * @description Whether visit is restricted to a closed session
       * @enum {string}
       */
      openClosedStatus: 'OPEN' | 'CLOSED'
    }
    /** @description Visit creation response */
    CreateVisitResponse: {
      /**
       * Format: int64
       * @description The created Nomis visit id
       */
      visitId: number
    }
    AdjudicationCharge: {
      offence: components['schemas']['AdjudicationOffence']
      evidence?: string
      reportDetail?: string
      offenceId?: string
      /** Format: int32 */
      chargeSequence: number
    }
    /** @description Associated incident details */
    AdjudicationIncident: {
      /**
       * Format: int64
       * @description The adjudication incident Id, part of the composite key with adjudicationSequence
       */
      adjudicationIncidentId: number
      reportingStaff: components['schemas']['Staff']
      /**
       * Format: date
       * @description Date of the associated incident
       */
      incidentDate: string
      /**
       * Format: partial-time
       * @description Date and time of the associated incident
       */
      incidentTime: string
      /**
       * Format: date
       * @description Date when the associated incident was reported
       */
      reportedDate: string
      /**
       * Format: partial-time
       * @description Date and time when the associated incident was reported
       */
      reportedTime: string
      /** @description Username of person who created the record in NOMIS */
      createdByUsername: string
      /**
       * @description Date time when the record was created in NOMIS
       * @example 2021-07-05T10:35:17
       */
      createdDateTime: string
      internalLocation: components['schemas']['InternalLocation']
      incidentType: components['schemas']['CodeDescription']
      /** @description Incident details */
      details?: string
      prison: components['schemas']['CodeDescription']
      /** @description Prisoners that witnessed the incident. Rarely used in NOMIS */
      prisonerWitnesses: components['schemas']['Prisoner'][]
      /** @description Prisoners that were victims in the incident. Not often used in NOMIS */
      prisonerVictims: components['schemas']['Prisoner'][]
      /** @description Other suspects involved in the incident that may or may not have been placed on report */
      otherPrisonersInvolved: components['schemas']['Prisoner'][]
      /** @description The officer who reported the incident who may differ from the reporting officer. Often used in NOMIS */
      reportingOfficers: components['schemas']['Staff'][]
      /** @description Staff that witnessed the incident. Used in NOMIS in a small percentage of cases */
      staffWitnesses: components['schemas']['Staff'][]
      /** @description Staff that was a victim in the incident. Rarely used in NOMIS */
      staffVictims: components['schemas']['Staff'][]
      /** @description Other staff that was involved in the incident either using force or some other link. Used in NOMIS in a small percentage of cases */
      otherStaffInvolved: components['schemas']['Staff'][]
      /** @description The repairs required due to the damage */
      repairs: components['schemas']['Repair'][]
    }
    AdjudicationOffence: {
      code: string
      description: string
      type?: components['schemas']['CodeDescription']
      category?: components['schemas']['CodeDescription']
    }
    /** @description Adjudication Information */
    AdjudicationResponse: {
      /**
       * Format: int32
       * @description The adjudication/party sequence, part of the composite key with adjudicationIncidentId
       */
      adjudicationSequence: number
      /** @description The offender number, aka nomsId, prisonerId */
      offenderNo: string
      /**
       * Format: int64
       * @description The id of the booking associated with the adjudication
       */
      bookingId: number
      /**
       * Format: int64
       * @description The adjudication number (business key)
       */
      adjudicationNumber: number
      gender: components['schemas']['CodeDescription']
      currentPrison?: components['schemas']['CodeDescription']
      /**
       * Format: date
       * @description Date Prisoner was added to the adjudication ????
       */
      partyAddedDate: string
      /** @description Adjudication comments */
      comment?: string
      incident: components['schemas']['AdjudicationIncident']
      /** @description Charges associated with this adjudication */
      charges: components['schemas']['AdjudicationCharge'][]
      /** @description Investigator that gathers evidence. Used in NOMIS in a small percentage of cases */
      investigations: components['schemas']['Investigation'][]
      /** @description hearings associated with this adjudication */
      hearings: components['schemas']['Hearing'][]
    }
    Evidence: {
      type: components['schemas']['CodeDescription']
      /** Format: date */
      date: string
      detail: string
      /** @description Username of person who created the record in NOMIS */
      createdByUsername: string
    }
    /** @description hearings associated with this adjudication */
    Hearing: {
      /** Format: int64 */
      hearingId: number
      type?: components['schemas']['CodeDescription']
      /**
       * Format: date
       * @description Hearing scheduled date as set by DPS but not used by NOMIS or set in NOMIS
       */
      scheduleDate?: string
      /**
       * Format: partial-time
       * @description Hearing scheduled time as set by DPS but not used by NOMIS or set in NOMIS
       */
      scheduleTime?: string
      /**
       * Format: date
       * @description Hearing date
       */
      hearingDate?: string
      /**
       * Format: partial-time
       * @description Hearing time
       */
      hearingTime?: string
      comment?: string
      representativeText?: string
      hearingStaff?: components['schemas']['Staff']
      internalLocation?: components['schemas']['InternalLocation']
      eventStatus?: components['schemas']['CodeDescription']
      hearingResults: components['schemas']['HearingResult'][]
      /** Format: int64 */
      eventId?: number
      /**
       * @description Date time when the record was created the record in NOMIS
       * @example 2021-07-05T10:35:17
       */
      createdDateTime: string
      /** @description Username of person who created the record in NOMIS */
      createdByUsername: string
      /** @description List of hearing notifications */
      notifications: components['schemas']['HearingNotification'][]
    }
    /** @description List of hearing notifications */
    HearingNotification: {
      /**
       * Format: date
       * @description Hearing notification date
       */
      deliveryDate: string
      /**
       * Format: partial-time
       * @description Hearing notification time
       */
      deliveryTime: string
      /** @description Notification comment */
      comment?: string
      notifiedStaff: components['schemas']['Staff']
    }
    HearingResult: {
      pleaFindingType?: components['schemas']['CodeDescription']
      findingType?: components['schemas']['CodeDescription']
      charge: components['schemas']['AdjudicationCharge']
      offence: components['schemas']['AdjudicationOffence']
      resultAwards: components['schemas']['HearingResultAward'][]
      /**
       * @description Date time when the record was created the record in NOMIS
       * @example 2021-07-05T10:35:17
       */
      createdDateTime: string
      /** @description Username of person who created the record in NOMIS */
      createdByUsername: string
    }
    HearingResultAward: {
      /**
       * Format: int32
       * @description Sequence of this sanction for this prisoner's booking
       */
      sequence: number
      sanctionType?: components['schemas']['CodeDescription']
      sanctionStatus?: components['schemas']['CodeDescription']
      comment?: string
      /** Format: date */
      effectiveDate: string
      /** Format: date */
      statusDate?: string
      /** Format: int32 */
      sanctionDays?: number
      /** Format: int32 */
      sanctionMonths?: number
      compensationAmount?: number
      consecutiveAward?: components['schemas']['HearingResultAward']
      /** Format: int32 */
      chargeSequence: number
      /** Format: int64 */
      adjudicationNumber: number
    }
    InternalLocation: {
      /**
       * Format: int64
       * @description NOMIS location id
       */
      locationId: number
      /** @description NOMIS location code */
      code: string
      /** @description NOMIS location description */
      description: string
    }
    /** @description Investigator that gathers evidence. Used in NOMIS in a small percentage of cases */
    Investigation: {
      investigator: components['schemas']['Staff']
      comment?: string
      /** Format: date */
      dateAssigned: string
      evidence: components['schemas']['Evidence'][]
    }
    /** @description Other suspects involved in the incident that may or may not have been placed on report */
    Prisoner: {
      /** @description The offender number, aka nomsId, prisonerId */
      offenderNo: string
      /** @description First name of prisoner */
      firstName?: string
      /** @description Last name of prisoner */
      lastName: string
      /** @description Username of person who created the record in NOMIS where this prisoner is used */
      createdByUsername: string
      /**
       * Format: date
       * @description date added in NOMIS to the adjudication incident
       */
      dateAddedToIncident: string
      /** @description comment about why they were added to the adjudication incident */
      comment?: string
    }
    /** @description Staff notified */
    Staff: {
      /** @description Username of first account related to staff */
      username: string
      /**
       * Format: int64
       * @description NOMIS staff id
       */
      staffId: number
      /** @description First name of staff member */
      firstName: string
      /** @description Last name of staff member */
      lastName: string
      /** @description Username of person who created the record in NOMIS where this staff is used */
      createdByUsername?: string
      /**
       * Format: date
       * @description date added in NOMIS to the adjudication incident
       */
      dateAddedToIncident?: string
      /** @description comment about why they were added to the adjudication incident */
      comment?: string
    }
    /** @description Charges associated with this adjudication */
    ChargeToCreate: {
      /**
       * @description Offence code they are charged with
       * @example 51:1N
       */
      offenceCode: string
      /**
       * @description Charges associated with this adjudication (business key)
       * @example 1234567/1
       */
      offenceId: string
    }
    /** @description Core Adjudication to be created */
    CreateAdjudicationRequest: {
      /**
       * Format: int64
       * @description The adjudication number (business key)
       * @example 10128828
       */
      adjudicationNumber: number
      incident: components['schemas']['IncidentToCreate']
      /** @description Charges associated with this adjudication */
      charges: components['schemas']['ChargeToCreate'][]
      /** @description The evidence records as part of the incident */
      evidence: components['schemas']['EvidenceToCreate'][]
    }
    /** @description The evidence records as part of the incident */
    EvidenceToCreate: {
      /**
       * @description Type of evidence
       * @example PHOTO
       */
      typeCode: string
      /**
       * @description Description of evidence
       * @example Image of damages
       */
      detail: string
    }
    /** @description Associated incident details */
    IncidentToCreate: {
      /**
       * @description Reporting staff member username
       * @example JANE.BROOKES
       */
      reportingStaffUsername: string
      /**
       * Format: date
       * @description Date of the associated incident
       */
      incidentDate: string
      /**
       * Format: partial-time
       * @description Date and time of the associated incident
       * @example 12:00:00
       */
      incidentTime: string
      /**
       * Format: date
       * @description Date when the associated incident was reported
       */
      reportedDate: string
      /**
       * Format: partial-time
       * @description Date and time when the associated incident was reported
       * @example 12:00:00
       */
      reportedTime: string
      /**
       * Format: int64
       * @description location id where incident took place
       * @example 123456
       */
      internalLocationId: number
      /**
       * @description Incident details
       * @example The details of the incident are as follows
       */
      details: string
      /**
       * @description Prison code where the incident took place
       * @example MDI
       */
      prisonId: string
      /**
       * @description Prisoners numbers that witnessed the incident
       * @example A1234AA,A1234AB
       */
      prisonerVictimsOffenderNumbers: string[]
      /**
       * @description Staff usernames that witnessed the incident
       * @example A.BARNES,M.ABDULLAH
       */
      staffWitnessesUsernames: string[]
      /**
       * @description Staff usernames that were victims in the incident
       * @example A.BARNES,M.ABDULLAH
       */
      staffVictimsUsernames: string[]
      /** @description The repairs required due to the damage */
      repairs: components['schemas']['RepairToCreate'][]
    }
    /** @description The repairs required due to the damage */
    RepairToCreate: {
      /**
       * @description Type of repairs
       * @example PLUM
       */
      typeCode: string
      /**
       * @description Optional description of repairs
       * @example Damage to the plumbing
       */
      comment?: string
      /**
       * @description Optional cost of repairs
       * @example 62.12
       */
      cost?: number
    }
    /** @description Sentence adjustment create request */
    CreateSentenceAdjustmentRequest: {
      /**
       * @description NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS
       * @example RX
       * @enum {string}
       */
      adjustmentTypeCode: 'RSR' | 'UR' | 'S240A' | 'RST' | 'RX'
      /**
       * Format: date
       * @description Date adjustment is applied
       */
      adjustmentDate?: string
      /**
       * Format: date
       * @description Start of the period which contributed to the adjustment
       */
      adjustmentFromDate?: string
      /**
       * Format: int64
       * @description Number of days for the adjustment
       */
      adjustmentDays: number
      /** @description Comment */
      comment?: string
      /**
       * @description Flag to indicate if the adjustment is being applied
       * @default true
       */
      active: boolean
    }
    /** @description Create adjustment response */
    CreateAdjustmentResponse: {
      /** Format: int64 */
      id: number
    }
    /** @description Incentive creation response */
    CreateIncentiveResponse: {
      /**
       * Format: int64
       * @description The created Nomis booking and sequence
       */
      bookingId: number
      /** Format: int64 */
      sequence: number
    }
    /** @description Key date adjustment create request */
    CreateKeyDateAdjustmentRequest: {
      /**
       * @description NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS
       * @example ADA
       * @enum {string}
       */
      adjustmentTypeCode: 'LAL' | 'UAL' | 'RADA' | 'ADA' | 'SREM'
      /**
       * Format: date
       * @description Date adjustment is applied
       */
      adjustmentDate?: string
      /**
       * Format: date
       * @description Start of the period which contributed to the adjustment
       */
      adjustmentFromDate: string
      /**
       * Format: int64
       * @description Number of days for the adjustment
       */
      adjustmentDays: number
      /** @description Comment */
      comment?: string
      /**
       * @description Flag to indicate if the adjustment is being applied
       * @default true
       */
      active: boolean
    }
    /** @description Offender individual schedule creation request */
    CreateNonAssociationRequest: {
      /**
       * @description Noms id of the prisoner
       * @example A1234DF
       */
      offenderNo: string
      /**
       * @description Noms id of the other prisoner
       * @example A1234EG
       */
      nsOffenderNo: string
      /**
       * @description Reason code of the first prisoner, domain NON_ASSO_RSN
       * @example VIC
       */
      reason: string
      /**
       * @description Reason code of the other prisoner, domain NON_ASSO_RSN
       * @example PER
       */
      recipReason: string
      /**
       * @description Type code, domain NON_ASSO_TYP
       * @example WING
       */
      type: string
      /**
       * @description Free text name of staff member
       * @example Joe Bloggs
       */
      authorisedBy?: string
      /**
       * Format: date
       * @description Effective date
       * @example 2022-08-12
       */
      effectiveDate: string
      /**
       * @description Comment
       * @example Some comment
       */
      comment?: string
    }
    /** @description Non-association creation response */
    CreateNonAssociationResponse: {
      /**
       * Format: int32
       * @description The created offender_na_details type sequence number
       */
      typeSequence: number
    }
    ReorderRequest: {
      codeList: string[]
    }
    /** @description Provides the generated hearing ID after creation */
    CreateHearingResponse: {
      /**
       * Format: int64
       * @description The Id for the created Hearing
       */
      hearingId: number
    }
    /** @description Hearing to be created */
    CreateHearingRequest: {
      /**
       * @description Type of hearing
       * @example GOV
       */
      hearingType: string
      /**
       * Format: date
       * @description Hearing date
       */
      hearingDate: string
      /**
       * Format: partial-time
       * @description Hearing time
       */
      hearingTime: string
      /** @description agency id of hearing */
      agencyId: string
      /**
       * Format: int64
       * @description location id for the hearing
       * @example 123456
       */
      internalLocationId: number
    }
    /** @description Provides the generated hearing result composite ID after creation */
    CreateHearingResultResponse: {
      /** Format: int64 */
      hearingId: number
      /** Format: int32 */
      resultSequence: number
    }
    /** @description Hearing result to be created */
    CreateHearingResultRequest: {
      /**
       * @description adjudicator username for the hearing record
       * @example ASMITH_GEN
       */
      adjudicatorUsername?: string
      /**
       * @description The offender's plea code on this charge
       * @example NOT_GUILTY
       */
      pleaFindingCode: string
      /**
       * @description Finding code
       * @example GUILTY
       */
      findingCode: string
    }
    /** @description Course activity creation request */
    CreateActivityRequest: {
      /** @description Code generated from the activity and schedule ids and mapped */
      code: string
      /**
       * Format: date
       * @description Activity start date
       * @example 2022-08-12
       */
      startDate: string
      /**
       * Format: date
       * @description Activity end date
       * @example 2022-08-12
       */
      endDate?: string
      /** @description Prison where the activity is to occur */
      prisonId: string
      /**
       * Format: int64
       * @description Room where the activity is to occur (from activity schedule)
       */
      internalLocationId?: number
      /**
       * Format: int32
       * @description Capacity of activity (from activity schedule)
       */
      capacity: number
      /** @description Pay rates */
      payRates: components['schemas']['PayRateRequest'][]
      /** @description Description from concatenated activity and activity schedule */
      description: string
      /** @description Minimum Incentive Level */
      minimumIncentiveLevelCode: string
      /** @description Program Service code (from activity category) */
      programCode: string
      /**
       * @description Half or Full day (H or F)
       * @example H
       * @enum {string}
       */
      payPerSession: 'F' | 'H'
      /** @description Schedules */
      schedules: components['schemas']['CourseScheduleRequest'][]
      /** @description Schedule rules */
      scheduleRules: components['schemas']['ScheduleRuleRequest'][]
      /** @description Exclude bank holidays? */
      excludeBankHolidays: boolean
      /** @description Outside work? */
      outsideWork: boolean
    }
    /** @description the lead visitor */
    LeadVisitor: {
      /**
       * Format: int64
       * @description visitor NOMIS person Id
       */
      personId: number
      /** @description full name of visitor */
      fullName: string
      /** @description Ordered list of telephone numbers for contact with latest first */
      telephones: string[]
    }
    /** @description Visit information */
    VisitResponse: {
      /**
       * Format: int64
       * @description The visit id
       */
      visitId: number
      /** @description The offender number, aka nomsId, prisonerId */
      offenderNo: string
      /**
       * @description Visit start date and time
       * @example 2021-07-05T10:35:17
       */
      startDateTime: string
      /**
       * @description Visit end date and time
       * @example 2021-07-05T10:35:17
       */
      endDateTime: string
      /** @description Prison where the visit is to occur */
      prisonId: string
      /** @description Visitors */
      visitors: components['schemas']['Visitor'][]
      leadVisitor?: components['schemas']['LeadVisitor']
      visitType: components['schemas']['CodeDescription']
      visitStatus: components['schemas']['CodeDescription']
      visitOutcome: components['schemas']['CodeDescription']
      agencyInternalLocation: components['schemas']['CodeDescription']
      /** @description Visit comments */
      commentText?: string
      /** @description Visitor concerns text */
      visitorConcernText?: string
      /**
       * @description date and time of creation
       * @example 2021-07-05T10:35:17
       */
      whenCreated: string
      /**
       * @description date and time of last update
       * @example 2021-07-05T10:35:17
       */
      whenUpdated?: string
      /** @description User id for visit creation */
      createUserId: string
      /** @description User id for last visit update */
      modifyUserId?: string
    }
    /** @description Visitors */
    Visitor: {
      /**
       * Format: int64
       * @description visitor NOMIS person Id
       */
      personId: number
      /** @description Indicates lead visitor for the visit */
      leadVisitor: boolean
    }
    Pageable: {
      /** Format: int32 */
      page?: number
      /** Format: int32 */
      size?: number
      sort?: string[]
    }
    /** @description Visit id */
    VisitRoomCountResponse: {
      /** @description The internal location description */
      agencyInternalLocationDescription: string
      /**
       * Format: int64
       * @description The room usage count
       */
      count: number
      /** @description The prison id */
      prisonId: string
    }
    PageVisitIdResponse: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['VisitIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      last?: boolean
      empty?: boolean
    }
    PageableObject: {
      /** Format: int64 */
      offset?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      pageSize?: number
      /** Format: int32 */
      pageNumber?: number
      paged?: boolean
      unpaged?: boolean
    }
    SortObject: {
      empty?: boolean
      sorted?: boolean
      unsorted?: boolean
    }
    /** @description Visit id */
    VisitIdResponse: {
      /**
       * Format: int64
       * @description The visit id
       */
      visitId: number
    }
    /** @description Sentence adjustment */
    SentenceAdjustmentResponse: {
      /**
       * Format: int64
       * @description The sentence adjustment id
       */
      id: number
      /**
       * Format: int64
       * @description The booking id
       */
      bookingId: number
      /** @description The offender number, aka nomsId, prisonerId */
      offenderNo: string
      /**
       * Format: int64
       * @description The sequence of the sentence within this booking
       */
      sentenceSequence: number
      adjustmentType: components['schemas']['SentencingAdjustmentType']
      /**
       * Format: date
       * @description Date adjustment is applied
       */
      adjustmentDate?: string
      /**
       * Format: date
       * @description Start of the period which contributed to the adjustment
       */
      adjustmentFromDate?: string
      /**
       * Format: date
       * @description End of the period which contributed to the adjustment
       */
      adjustmentToDate?: string
      /**
       * Format: int64
       * @description Number of days for the adjustment
       */
      adjustmentDays: number
      /** @description Comment */
      comment?: string
      /** @description Flag to indicate if the adjustment is being applied */
      active: boolean
      /** @description Flag to indicate the adjustment is hidden from end users. This is true when it was created as part of a key date adjustment */
      hiddenFromUsers: boolean
    }
    /** @description Adjustment type */
    SentencingAdjustmentType: {
      /**
       * @description code
       * @example RX
       */
      code: string
      /**
       * @description description
       * @example Remand
       */
      description: string
    }
    PagePrisonerId: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['PrisonerId'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      last?: boolean
      empty?: boolean
    }
    PrisonerId: {
      /** Format: int64 */
      bookingId: number
      offenderNo: string
    }
    /** @description Appointment information */
    NonAssociationResponse: {
      /**
       * @description Noms id of the prisoner
       * @example A1234DF
       */
      offenderNo: string
      /**
       * @description Noms id of the other prisoner
       * @example A1234EG
       */
      nsOffenderNo: string
      /**
       * Format: int32
       * @description Sequence number
       * @example 1
       */
      typeSequence: number
      /**
       * @description Reason code of the first prisoner, domain NON_ASSO_RSN
       * @example VIC
       */
      reason: string
      /**
       * @description Reason code of the other prisoner, domain NON_ASSO_RSN
       * @example PER
       */
      recipReason: string
      /**
       * @description Type code, domain NON_ASSO_TYP
       * @example WING
       */
      type: string
      /**
       * @description Free text name of staff member
       * @example Joe Bloggs
       */
      authorisedBy?: string
      /**
       * @description Last updated by
       * @example JSMITH_GEN
       */
      updatedBy: string
      /**
       * Format: date
       * @description Effective date
       * @example 2022-08-12
       */
      effectiveDate: string
      /**
       * Format: date
       * @description Expiry date, open if null
       * @example 2022-08-12
       */
      expiryDate?: string
      /**
       * @description Comment
       * @example Some comment
       */
      comment?: string
    }
    /** @description Non association id */
    NonAssociationIdResponse: {
      /** @description The 1st offender */
      offenderNo1: string
      /** @description The 2nd offender */
      offenderNo2: string
    }
    PageNonAssociationIdResponse: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['NonAssociationIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      last?: boolean
      empty?: boolean
    }
    /** @description Key date adjustment */
    KeyDateAdjustmentResponse: {
      /**
       * Format: int64
       * @description The key date adjustment id
       */
      id: number
      /**
       * Format: int64
       * @description The booking id
       */
      bookingId: number
      /** @description The offender number, aka nomsId, prisonerId */
      offenderNo: string
      adjustmentType: components['schemas']['SentencingAdjustmentType']
      /**
       * Format: date
       * @description Date adjustment is applied
       */
      adjustmentDate?: string
      /**
       * Format: date
       * @description Start of the period which contributed to the adjustment
       */
      adjustmentFromDate?: string
      /**
       * Format: date
       * @description End of the period which contributed to the adjustment
       */
      adjustmentToDate?: string
      /**
       * Format: int64
       * @description Number of days for the adjustment
       */
      adjustmentDays: number
      /** @description Comment */
      comment?: string
      /** @description Flag to indicate if the adjustment is being applied */
      active: boolean
    }
    /** @description Incentive id */
    IncentiveIdResponse: {
      /**
       * Format: int64
       * @description The booking id
       */
      bookingId: number
      /**
       * Format: int64
       * @description The sequence of the incentive within this booking
       */
      sequence: number
    }
    PageIncentiveIdResponse: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['IncentiveIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      last?: boolean
      empty?: boolean
    }
    /** @description Incentive information */
    IncentiveResponse: {
      /** @description The offender number, aka nomsId, prisonerId */
      offenderNo: string
      /**
       * Format: int64
       * @description The booking id
       */
      bookingId: number
      /**
       * Format: int64
       * @description The sequence of the incentive within this booking
       */
      incentiveSequence: number
      /** @description Comment for Incentive level */
      commentText?: string
      /**
       * @description Date and time of Incentive level creation
       * @example 2021-07-05T10:35:17
       */
      iepDateTime: string
      /** @description Prison where the Incentive level was created */
      prisonId: string
      iepLevel: components['schemas']['CodeDescription']
      /** @description User id of user creating prisoner incentive level */
      userId?: string
      /** @description Is this IEP the current IEP for the booking? */
      currentIep: boolean
      /**
       * @description The NOMIS module that created this IEP
       * @enum {string}
       */
      auditModule: 'OCUWARNG' | 'PRISON_API' | 'OIDADMIS' | 'MERGE' | 'OIDOIEPS' | 'OIDITRAN' | 'OSIOSEAR'
      /**
       * @description date and time of creation
       * @example 2021-07-05T10:35:17
       */
      whenCreated: string
      /**
       * @description date and time of last update
       * @example 2021-07-05T10:35:17
       */
      whenUpdated?: string
    }
    /** @description Event id */
    AppointmentIdResponse: {
      /**
       * Format: int64
       * @description The event id
       */
      eventId: number
    }
    PageAppointmentIdResponse: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['AppointmentIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      last?: boolean
      empty?: boolean
    }
    /** @description Allocation to an activity */
    GetAllocationResponse: {
      /**
       * @description Prison ID
       * @example BXI
       */
      prisonId: string
      /**
       * Format: int64
       * @description Nomis Course Activity ID
       * @example 1234
       */
      courseActivityId: number
      /**
       * @description Nomis ID
       * @example A1234BC
       */
      nomisId: string
      /**
       * Format: int64
       * @description ID of the active booking
       * @example 12345
       */
      bookingId: number
      /**
       * Format: date
       * @description Date allocated to the course
       * @example 2023-03-12
       */
      startDate: string
      /**
       * Format: date
       * @description Date deallocated from the course
       * @example 2023-05-26
       */
      endDate?: string
      /**
       * @description Deallocation comment
       * @example Removed due to schedule clash
       */
      endComment?: string
      /**
       * @description Nomis reason code for ending (reference code domain PS_END_RSN)
       * @example WDRAWN
       */
      endReasonCode?: string
      /** @description Whether the prisoner is currently suspended from the course */
      suspended: boolean
      /**
       * @description Pay band
       * @example 1
       */
      payBand?: string
      /**
       * @description Cell description (can be null if OUT or being transferred)
       * @example RSI-A-1-001
       */
      livingUnitDescription?: string
    }
    /** @description Find active allocation ids response */
    FindActiveAllocationIdsResponse: {
      /**
       * Format: int64
       * @description Allocation id
       * @example 1
       */
      allocationId: number
    }
    PageFindActiveAllocationIdsResponse: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['FindActiveAllocationIdsResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      last?: boolean
      empty?: boolean
    }
    /** @description Adjustment id */
    AdjustmentIdResponse: {
      /**
       * Format: int64
       * @description The adjustment id
       */
      adjustmentId: number
      /** @description SENTENCE or KEY_DATE */
      adjustmentCategory: string
    }
    PageAdjustmentIdResponse: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['AdjustmentIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      last?: boolean
      empty?: boolean
    }
    /** @description adjudication id */
    AdjudicationChargeIdResponse: {
      /**
       * Format: int64
       * @description The adjudication number
       */
      adjudicationNumber: number
      /**
       * Format: int32
       * @description The adjudication charge sequence
       */
      chargeSequence: number
      /** @description The prisoner number */
      offenderNo: string
    }
    PageAdjudicationChargeIdResponse: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['AdjudicationChargeIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      last?: boolean
      empty?: boolean
    }
    /** @description The requested adjudication charge and associated adjudication details. Note: the adjudication may have other charges associated with it */
    AdjudicationChargeResponse: {
      /**
       * Format: int32
       * @description The adjudication/party sequence, part of the composite key with adjudicationIncidentId
       */
      adjudicationSequence: number
      /** @description The offender number, aka nomsId, prisonerId */
      offenderNo: string
      /**
       * Format: int64
       * @description The id of the booking associated with the adjudication
       */
      bookingId: number
      /**
       * Format: int64
       * @description The adjudication number (business key)
       */
      adjudicationNumber: number
      gender: components['schemas']['CodeDescription']
      currentPrison?: components['schemas']['CodeDescription']
      /**
       * Format: date
       * @description Date Prisoner was added to the adjudication ????
       */
      partyAddedDate: string
      /** @description Adjudication comments */
      comment?: string
      incident: components['schemas']['AdjudicationIncident']
      charge: components['schemas']['AdjudicationCharge']
      /** @description Investigator that gathers evidence. Used in NOMIS in a small percentage of cases */
      investigations: components['schemas']['Investigation'][]
      /** @description hearings associated with this adjudication */
      hearings: components['schemas']['Hearing'][]
    }
    /** @description Activity details */
    GetActivityResponse: {
      /**
       * Format: int64
       * @description Activity id
       * @example 1
       */
      courseActivityId: number
      /**
       * @description Program service code
       * @example INDUCTION
       */
      programCode: string
      /**
       * @description Prison code
       * @example RSI
       */
      prisonId: string
      /**
       * Format: date
       * @description Date course started
       * @example 2020-04-11
       */
      startDate: string
      /**
       * Format: date
       * @description Date course ended
       * @example 2023-11-15
       */
      endDate?: string
      /**
       * Format: int64
       * @description Course internal location
       * @example 1234
       */
      internalLocationId?: number
      /**
       * @description Course internal location code
       * @example KITCH
       */
      internalLocationCode?: string
      /**
       * @description Course internal location description
       * @example RSI-WORK_IND-KITCH
       */
      internalLocationDescription?: string
      /**
       * Format: int32
       * @description Course capacity
       * @example 10
       */
      capacity: number
      /**
       * @description Course description
       * @example Kitchen work
       */
      description: string
      /**
       * @description The minimum incentive level allowed on the course
       * @example BAS
       */
      minimumIncentiveLevel: string
      /** @description Whether the course runs on bank holidays */
      excludeBankHolidays: boolean
      /**
       * @description Half or Full day (H or F)
       * @example H
       */
      payPerSession: string
      /** @description Rules for creating schedules - days and times */
      scheduleRules: components['schemas']['ScheduleRulesResponse'][]
      /** @description Pay rates available */
      payRates: components['schemas']['PayRatesResponse'][]
      /** @description Outside work flag */
      outsideWork: boolean
    }
    /** @description Activity Pay Rates */
    PayRatesResponse: {
      /**
       * @description Incentive level code
       * @example BAS
       */
      incentiveLevelCode: string
      /**
       * @description Pay band
       * @example 1
       */
      payBand: string
      /**
       * @description rate
       * @example 3.2
       */
      rate: number
    }
    /** @description Activity Schedule Rules */
    ScheduleRulesResponse: {
      /**
       * Format: partial-time
       * @description Course start time
       * @example 09:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description Course end time
       * @example 11:00
       */
      endTime: string
      /**
       * @description Runs on Mondays
       * @example true
       */
      monday: boolean
      /**
       * @description Runs on Tuesdays
       * @example true
       */
      tuesday: boolean
      /**
       * @description Runs on Wednesdays
       * @example true
       */
      wednesday: boolean
      /**
       * @description Runs on Thursdays
       * @example true
       */
      thursday: boolean
      /**
       * @description Runs on Fridays
       * @example true
       */
      friday: boolean
      /**
       * @description Runs on Saturdays
       * @example true
       */
      saturday: boolean
      /**
       * @description Runs on Sundays
       * @example true
       */
      sunday: boolean
    }
    /** @description Find active activity ids response */
    FindActiveActivityIdsResponse: {
      /**
       * Format: int64
       * @description Activity id
       * @example 1
       */
      courseActivityId: number
    }
    PageFindActiveActivityIdsResponse: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['FindActiveActivityIdsResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      last?: boolean
      empty?: boolean
    }
  }
}

export interface operations {
  /** Requires role NOMIS_SENTENCING. Retrieves a sentence adjustment by id */
  getSentenceAdjustment: {
    parameters: {
      path: {
        /** Sentence adjustment id */
        adjustmentId: string
      }
    }
    responses: {
      /** the sentence adjustment details */
      200: {
        content: {
          'application/json': components['schemas']['SentenceAdjustmentResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Adjustment not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Requires role NOMIS_SENTENCING. Updates a sentence adjustment by id */
  updateSentenceAdjustment: {
    parameters: {
      path: {
        /** Sentence adjustment id */
        adjustmentId: string
      }
    }
    responses: {
      /** the sentence adjustment has been updated */
      200: unknown
      /** Supplied data is invalid, for instance missing required fields or invalid values. See schema for details */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSentenceAdjustmentRequest']
      }
    }
  }
  /** Requires role NOMIS_SENTENCING. Deletes a sentence adjustment by id */
  deleteSentenceAdjustment: {
    parameters: {
      path: {
        /** Sentence adjustment id */
        adjustmentId: string
      }
    }
    responses: {
      /** the sentence adjustment has been deleted */
      204: never
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Creates or updates an attendance for the course schedule. Requires role NOMIS_ACTIVITIES */
  upsertAttendance: {
    parameters: {
      path: {
        /** Course schedule id */
        courseScheduleId: string
        /** Booking id */
        bookingId: string
      }
    }
    responses: {
      /** Attendance updated */
      200: {
        content: {
          'application/json': components['schemas']['UpsertAttendanceResponse']
        }
      }
      /** Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpsertAttendanceRequest']
      }
    }
  }
  /** Updates details of an existing visit such as the visitors and time slot */
  updateVisit: {
    parameters: {
      path: {
        /** Offender Noms Id */
        offenderNo: string
        /** Nomis visit Id */
        visitId: string
      }
    }
    responses: {
      /** Visit information updated */
      200: unknown
      /** Person ids do not exist */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** offenderNo or visits id does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateVisitRequest']
      }
    }
  }
  cancelVisit: {
    parameters: {
      path: {
        /** Offender Noms Id */
        offenderNo: string
        /** Nomis Visit Id */
        visitId: string
      }
    }
    responses: {
      /** Visit cancelled */
      200: unknown
      /** Invalid cancellation reason */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** VSIP visit id not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CancelVisitRequest']
      }
    }
  }
  /** Updates an existing non-association. Requires role NOMIS_NON_ASSOCIATIONS */
  updateNonAssociation: {
    parameters: {
      path: {
        /** Offender */
        offenderNo: string
        /** Non-association offender */
        nsOffenderNo: string
        /** Sequence number. Amend this specific detail record */
        typeSequence: number
      }
    }
    responses: {
      /** Successfully amended non-association */
      200: unknown
      /** Invalid data such as reason or type do not exist etc. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_NON_ASSOCIATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Non-association does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateNonAssociationRequest']
      }
    }
  }
  /** Deletes the specified non-association detail record. if there was only one, the parent NA record is deleted too. Requires role NOMIS_NON_ASSOCIATIONS */
  deleteNonAssociation: {
    parameters: {
      path: {
        /** Offender */
        offenderNo: string
        /** Non-association offender */
        nsOffenderNo: string
        /** Sequence number. Close this specific detail record */
        typeSequence: number
      }
    }
    responses: {
      /** Success */
      200: unknown
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_NON_ASSOCIATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Non-association does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Closes an existing non-association. Requires role NOMIS_NON_ASSOCIATIONS */
  closeNonAssociation: {
    parameters: {
      path: {
        /** Offender */
        offenderNo: string
        /** Non-association offender */
        nsOffenderNo: string
        /** Sequence number. Close this specific detail record */
        typeSequence: number
      }
    }
    responses: {
      /** Success */
      200: unknown
      /** Non-association is already closed */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_NON_ASSOCIATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Non-association does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Requires role NOMIS_SENTENCING. Retrieves a key date adjustment by id */
  getKeyDateAdjustment: {
    parameters: {
      path: {
        /** Key date adjustment id */
        adjustmentId: string
      }
    }
    responses: {
      /** the key date adjustment details */
      200: {
        content: {
          'application/json': components['schemas']['KeyDateAdjustmentResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Adjustment not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Requires role NOMIS_SENTENCING. Updates a sentence adjustment by id */
  updateKeyDateAdjustment: {
    parameters: {
      path: {
        /** Key date adjustment id */
        adjustmentId: string
      }
    }
    responses: {
      /** the key date adjustment has been updated */
      200: unknown
      /** Supplied data is invalid, for instance missing required fields or invalid values. See schema for details */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Adjustment not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateKeyDateAdjustmentRequest']
      }
    }
  }
  /** Requires role NOMIS_SENTENCING. Deletes a key date adjustment by id */
  deleteKeyDateAdjustment: {
    parameters: {
      path: {
        /** Key date adjustment id */
        adjustmentId: string
      }
    }
    responses: {
      /** the key date adjustment has been deleted */
      204: never
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Gets a global incentive level by provided code and domain of IEP_LEVEL */
  getGlobalIncentiveLevel: {
    parameters: {
      path: {
        /** Incentive reference code */
        code: string
      }
    }
    responses: {
      /** return the Global Incentive level */
      200: {
        content: {
          'application/json': components['schemas']['ReferenceCode']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Global Incentive Level does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Updates an existing global incentive level, updateable fields are description and active */
  updateGlobalIncentiveLevel: {
    parameters: {
      path: {
        /** Incentive reference code */
        code: string
      }
    }
    responses: {
      /** Updated Global Incentive level */
      200: {
        content: {
          'application/json': components['schemas']['ReferenceCode']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Global incentive level not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateIncentiveRequest']
      }
    }
  }
  /** Gets prison incentive level data by provided code and prison */
  getPrisonIncentiveLevel: {
    parameters: {
      path: {
        /** Prison id */
        prison: string
        /** Incentive level code */
        code: string
      }
    }
    responses: {
      /** return the Prison Incentive level */
      200: {
        content: {
          'application/json': components['schemas']['PrisonIncentiveLevelDataResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Prison Incentive Level does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Creates incentive level data associated with a Prison */
  updatePrisonIncentiveLevelData: {
    parameters: {
      path: {
        /** Prison Id */
        prison: string
        /** Incentive level code */
        code: string
      }
    }
    responses: {
      /** Prison Incentive level data updated */
      200: {
        content: {
          'application/json': components['schemas']['PrisonIncentiveLevelDataResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePrisonIncentiveRequest']
      }
    }
  }
  /** Updates an existing appointment. Requires role NOMIS_APPOINTMENTS */
  updateAppointment: {
    parameters: {
      path: {
        /** NOMIS event Id */
        nomisEventId: string
      }
    }
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': components['schemas']['CreateAppointmentRequest']
        }
      }
      /** Invalid data such as location or subtype do not exist etc. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_APPOINTMENTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Event id does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAppointmentRequest']
      }
    }
  }
  /** Deletes an existing appointment by actually deleting from the table. Intended for appointments created in error. Requires role NOMIS_APPOINTMENTS */
  deleteAppointment: {
    parameters: {
      path: {
        /** NOMIS event Id */
        nomisEventId: string
      }
    }
    responses: {
      /** Success */
      204: never
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_APPOINTMENTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Event id does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Undoes an appointment cancellation. Requires role NOMIS_APPOINTMENTS */
  uncancelAppointment: {
    parameters: {
      path: {
        /** NOMIS event Id */
        nomisEventId: string
      }
    }
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': components['schemas']['CreateAppointmentRequest']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_APPOINTMENTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Event id does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Cancels an existing appointment. Requires role NOMIS_APPOINTMENTS */
  cancelAppointment: {
    parameters: {
      path: {
        /** NOMIS event Id */
        nomisEventId: string
      }
    }
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': components['schemas']['CreateAppointmentRequest']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_APPOINTMENTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Event id does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** List of repairs are refreshed so this operation may result in any combinations of inserts, updates or deletes. Requires ROLE_NOMIS_ADJUDICATIONS */
  updateRepairs: {
    parameters: {
      path: {
        /** Adjudication number */
        adjudicationNumber: string
      }
    }
    responses: {
      /** Repairs updated */
      200: {
        content: {
          'application/json': components['schemas']['UpdateRepairsResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Adjudication does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateRepairsRequest']
      }
    }
  }
  /** Updates a hearing for a given adjudication and hearing Id. Requires ROLE_NOMIS_ADJUDICATIONS */
  updateHearing: {
    parameters: {
      path: {
        /** Adjudication number */
        adjudicationNumber: string
        /** Hearing Id */
        hearingId: string
      }
    }
    responses: {
      /** Updated Hearing Returned */
      200: {
        content: {
          'application/json': components['schemas']['UpdateHearingRequest']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Hearing does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateHearingRequest']
      }
    }
  }
  /** Deletes a hearing for a given adjudication and hearing Id. Requires ROLE_NOMIS_ADJUDICATIONS */
  deleteHearing: {
    parameters: {
      path: {
        /** Adjudication number */
        adjudicationNumber: string
        /** Hearing Id */
        hearingId: string
      }
    }
    responses: {
      /** Hearing deleted */
      200: unknown
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Adjudication does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Gets activity details including schedule rules and pay rates. Requires role NOMIS_ACTIVITIES */
  getActivity: {
    parameters: {
      path: {
        /** Course activity id */
        courseActivityId: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['GetActivityResponse']
        }
      }
      /** Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Updates an activity and associated pay rates. Requires role NOMIS_ACTIVITIES */
  updateActivity: {
    parameters: {
      path: {
        /** Course activity id */
        courseActivityId: string
      }
    }
    responses: {
      /** Activity information */
      200: {
        content: {
          'application/json': components['schemas']['CreateActivityResponse']
        }
      }
      /** Prison, location, program service or iep value do not exist */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Activity Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateActivityRequest']
      }
    }
  }
  /** Deletes a course activity and its children - pay rates, schedules, allocations and attendances. Intended to be used for data fixes. Requires role NOMIS_ACTIVITIES */
  deleteActivity: {
    parameters: {
      path: {
        courseActivityId: number
      }
    }
    responses: {
      /** Activity is deleted */
      204: never
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Updates a course schedule. Requires role NOMIS_ACTIVITIES */
  updateCourseSchedule: {
    parameters: {
      path: {
        /** Course activity id */
        courseActivityId: string
      }
    }
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': components['schemas']['UpdateCourseScheduleResponse']
        }
      }
      /** Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** The course schedule does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CourseScheduleRequest']
      }
    }
  }
  /** Ends a course activity and all active attendances with end date today. Requires role NOMIS_ACTIVITIES */
  endActivity: {
    parameters: {
      path: {
        /** Course activity id */
        courseActivityId: string
      }
      query: {
        /** End comment */
        endComment?: string
      }
    }
    responses: {
      /** Activity ended */
      200: unknown
      /** Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Creates or updates a prisoner's allocation to an activity. Requires role NOMIS_ACTIVITIES */
  upsertAllocation: {
    parameters: {
      path: {
        /** Course activity id */
        courseActivityId: string
      }
    }
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': components['schemas']['UpsertAllocationResponse']
        }
      }
      /** There was an error with the request, see the response for details */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpsertAllocationRequest']
      }
    }
  }
  /** Creates a new visit and decrements the visit balance. */
  createVisit: {
    parameters: {
      path: {
        /** Offender Noms Id */
        offenderNo: string
      }
    }
    responses: {
      /** Visit information with created id */
      201: {
        content: {
          'application/json': components['schemas']['CreateVisitResponse']
        }
      }
      /** Prison or person ids do not exist */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** offenderNo does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateVisitRequest']
      }
    }
  }
  /** Creates an adjudication. Requires ROLE_NOMIS_ADJUDICATIONS */
  createAdjudication: {
    parameters: {
      path: {
        /** Offender Noms Id */
        offenderNo: string
      }
    }
    responses: {
      /** Adjudication Created Returned */
      201: {
        content: {
          'application/json': components['schemas']['AdjudicationResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Prisoner does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Adjudication already exists */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAdjudicationRequest']
      }
    }
  }
  /** Required role NOMIS_SENTENCING Creates a new sentence adjustment (aka Debit/Credit). Key dates will not be recalculated as a side effect of this operation */
  createSentenceAdjustment: {
    parameters: {
      path: {
        /** Booking Id */
        bookingId: string
        /** Sentence sequence number */
        sentenceSequence: string
      }
    }
    responses: {
      /** Created Sentence adjustment id */
      201: {
        content: {
          'application/json': components['schemas']['CreateAdjustmentResponse']
        }
      }
      /** Supplied data is invalid, for instance missing required fields or invalid values. See schema for details */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Booking or sentence sequence do not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateSentenceAdjustmentRequest']
      }
    }
  }
  /** Creates a new incentive using next sequence no. */
  createIncentive: {
    parameters: {
      path: {
        /** Offender Booking Id */
        bookingId: string
      }
    }
    responses: {
      /** Incentive information with created sequence */
      201: {
        content: {
          'application/json': components['schemas']['CreateIncentiveResponse']
        }
      }
      /** Prison or iep value do not exist */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** booking does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateIncentiveRequest']
      }
    }
  }
  /** Reorder a series of IEPs so the sequence number matches the IEP date time. Latest time gets the higher sequence so the current IEP is the latest. This is required to correct DPS incentives that are created out of order */
  reorderCurrentIncentives: {
    parameters: {
      path: {
        /** Offender Booking Id */
        bookingId: string
      }
    }
    responses: {
      /** Incentives successfully reordered */
      200: unknown
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Access this endpoint forbidden, incorrect role. Must have NOMIS_INCENTIVES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** booking does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Required role NOMIS_SENTENCING Creates a new key date adjustment. Key dates will be recalculated as a side effect of this operation */
  createKeyDateAdjustment: {
    parameters: {
      path: {
        /** Booking Id */
        bookingId: string
      }
    }
    responses: {
      /** Created key date adjustment */
      201: {
        content: {
          'application/json': components['schemas']['CreateAdjustmentResponse']
        }
      }
      /** Supplied data is invalid, for instance missing required fields or invalid values. See schema for details */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Booking does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateKeyDateAdjustmentRequest']
      }
    }
  }
  /** Creates a new non-association. Requires role NOMIS_NON_ASSOCIATIONS */
  createNonAssociation: {
    responses: {
      /** Successfully created non-association */
      201: {
        content: {
          'application/json': components['schemas']['CreateNonAssociationResponse']
        }
      }
      /** Invalid data such as booking or location do not exist etc. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_NON_ASSOCIATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateNonAssociationRequest']
      }
    }
  }
  /** Creates a new global incentive level */
  createGlobalIncentiveLevel: {
    responses: {
      /** Global Incentive level */
      201: {
        content: {
          'application/json': components['schemas']['ReferenceCode']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateIncentiveRequest']
      }
    }
  }
  /** reorders all global incentive levels using provided list of Incentive codes, including inactive. 1-based index */
  reorderGlobalIncentiveLevels: {
    responses: {
      /** Reorder successful */
      200: unknown
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReorderRequest']
      }
    }
  }
  /** Creates incentive level data associated with a Prison */
  createPrisonIncentiveLevelData: {
    parameters: {
      path: {
        /** Prison Id */
        prison: string
      }
    }
    responses: {
      /** Prison Incentive level data created */
      201: {
        content: {
          'application/json': components['schemas']['PrisonIncentiveLevelDataResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePrisonIncentiveRequest']
      }
    }
  }
  /** Creates a new appointment. Requires role NOMIS_APPOINTMENTS */
  createAppointment: {
    responses: {
      /** Appointment information with created id */
      201: {
        content: {
          'application/json': components['schemas']['CreateAppointmentRequest']
        }
      }
      /** Invalid data such as booking or location do not exist etc. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_APPOINTMENTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAppointmentRequest']
      }
    }
  }
  /** Creates a hearing for a given adjudication. Requires ROLE_NOMIS_ADJUDICATIONS */
  createHearing: {
    parameters: {
      path: {
        /** Adjudication number */
        adjudicationNumber: string
      }
    }
    responses: {
      /** Hearing Created Returned */
      201: {
        content: {
          'application/json': components['schemas']['CreateHearingResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Adjudication does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateHearingRequest']
      }
    }
  }
  /** Creates a hearing result for a given hearing. DPS only supports 1 result per hearing. Requires ROLE_NOMIS_ADJUDICATIONS */
  createHearingResult: {
    parameters: {
      path: {
        /** Adjudication number */
        adjudicationNumber: string
        /** Nomis Hearing Id */
        hearingId: string
      }
    }
    responses: {
      /** Hearing result created */
      201: {
        content: {
          'application/json': components['schemas']['CreateHearingResultResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Hearing does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateHearingResultRequest']
      }
    }
  }
  /** Deletes a hearing result for a given adjudication and hearing Id. The result sequence is always 1 for synchronising DPS migrated/created data. Requires ROLE_NOMIS_ADJUDICATIONS */
  deleteHearingResult: {
    parameters: {
      path: {
        /** Adjudication number */
        adjudicationNumber: string
        /** Hearing Id */
        hearingId: string
      }
    }
    responses: {
      /** Hearing result deleted */
      200: unknown
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Adjudication does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Creates a new activity and associated pay rates. Requires role NOMIS_ACTIVITIES */
  createActivity: {
    responses: {
      /** Activity information with created id */
      201: {
        content: {
          'application/json': components['schemas']['CreateActivityResponse']
        }
      }
      /** Prison, location, program service or iep value do not exist */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateActivityRequest']
      }
    }
  }
  /** Retrieves a visit by id. */
  getVisit: {
    parameters: {
      path: {
        /** Nomis Visit Id */
        visitId: string
      }
    }
    responses: {
      /** Visit Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['VisitResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** visit does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieves a list of rooms with usage count for the (filtered) visits. Only future visits are included */
  getVisitRoomCountsByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /** Filter results by prison ids (returns all prisons if not specified) */
        prisonIds?: string[]
        /** Filter results by visitType (returns all types if not specified) */
        visitTypes?: string[]
        /** Filter results by visits that were created on or after the given timestamp */
        fromDateTime?: string
        /** Filter results by visits that were created on or before the given timestamp */
        toDateTime?: string
        /** Filter results by restricting to future visit usage only */
        futureVisitsOnly?: boolean
      }
    }
    responses: {
      /** list of visit room and count is returned */
      200: {
        content: {
          'application/json': components['schemas']['VisitRoomCountResponse'][]
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieves a paged list of visits by filter */
  getVisitsByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /** Filter results by prison ids (returns all prisons if not specified) */
        prisonIds?: string[]
        /** Filter results by visitType (returns all types if not specified) */
        visitTypes?: string[]
        /** Filter results by visits that were created on or after the given timestamp */
        fromDateTime?: string
        /** Filter results by visits that were created on or before the given timestamp */
        toDateTime?: string
      }
    }
    responses: {
      /** Pageable list of visit ids is returned */
      200: {
        content: {
          'application/json': components['schemas']['PageVisitIdResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Requires role SYNCHRONISATION_REPORTING. */
  getPrisonerIdentifiers: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /** Only return active prisoners currently in prison */
        active?: boolean
      }
    }
    responses: {
      /** paged list of prisoner ids */
      200: {
        content: {
          'application/json': components['schemas']['PagePrisonerId']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role SYNCHRONISATION_REPORTING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get the open non-association for the two offender numbers. Requires role NOMIS_NON_ASSOCIATIONS */
  getNonAssociation: {
    parameters: {
      path: {
        /** Offender */
        offenderNo: string
        /** Non-association offender */
        nsOffenderNo: string
      }
      query: {
        /** Sequence number. If present, get this detail record, otherwise get the open record if there is one. */
        typeSequence?: number
      }
    }
    responses: {
      /** Non-association information */
      200: {
        content: {
          'application/json': components['schemas']['NonAssociationResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_NON_ASSOCIATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** No open non-association exists for these offender numbers, or one of the offenders does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get all non-associations for the two offender numbers, including expired. Requires role NOMIS_NON_ASSOCIATIONS */
  getNonAssociationDetails: {
    parameters: {
      path: {
        /** Offender */
        offenderNo: string
        /** Non-association offender */
        nsOffenderNo: string
      }
    }
    responses: {
      /** List of non-associations */
      200: {
        content: {
          'application/json': components['schemas']['NonAssociationResponse'][]
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_NON_ASSOCIATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Non-association does not exist, or one of the offenders does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieves a paged list of composite ids by filter. Requires ROLE_NOMIS_NON_ASSOCIATIONS. */
  getNonAssociationsByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /** Filter results by non-associations that were created on or after the given date */
        fromDate?: string
        /** Filter results by non-associations that were created on or before the given date */
        toDate?: string
      }
    }
    responses: {
      /** Pageable list of composite ids are returned */
      200: {
        content: {
          'application/json': components['schemas']['PageNonAssociationIdResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_NON_ASSOCIATIONS not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieves a paged list of incentive composite ids by filter. Requires ROLE_NOMIS_INCENTIVES. */
  getIncentivesByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /** Filter results by incentives that were created on or after the given date */
        fromDate?: string
        /** Filter results by incentives that were created on or before the given date */
        toDate?: string
        /** if true only retrieve latest incentive for each prisoner */
        latestOnly?: boolean
      }
    }
    responses: {
      /** Pageable list of composite ids are returned */
      200: {
        content: {
          'application/json': components['schemas']['PageIncentiveIdResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieves a created incentive level for a prisoner. Requires ROLE_NOMIS_INCENTIVES. */
  getIncentive: {
    parameters: {
      path: {
        /** NOMIS booking Id */
        bookingId: string
        /** NOMIS Incentive sequence */
        incentiveSequence: string
      }
    }
    responses: {
      /** the incentive level details */
      200: {
        content: {
          'application/json': components['schemas']['IncentiveResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieves the current incentive level (by booking) for a prisoner. Requires ROLE_NOMIS_INCENTIVES. */
  getCurrentIncentive: {
    parameters: {
      path: {
        /** NOMIS booking Id */
        bookingId: string
      }
    }
    responses: {
      /** the incentive level details */
      200: {
        content: {
          'application/json': components['schemas']['IncentiveResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get an appointment given the unique event id. Requires role NOMIS_APPOINTMENTS */
  getAppointmentById: {
    parameters: {
      path: {
        /** Event Id */
        eventId: string
      }
    }
    responses: {
      /** Appointment information with created id */
      200: {
        content: {
          'application/json': components['schemas']['CreateAppointmentRequest']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_APPOINTMENTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Booking, location and timestamp combination does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieves a paged list of incentive composite ids by filter. Requires ROLE_NOMIS_APPOINTMENTS. */
  getAppointmentsByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /** Filter results by prison ids (returns all prisons if not specified) */
        prisonIds?: string[]
        /** Filter results by appointments that were created on or after the given date */
        fromDate?: string
        /** Filter results by appointments that were created on or before the given date */
        toDate?: string
      }
    }
    responses: {
      /** Pageable list of composite ids are returned */
      200: {
        content: {
          'application/json': components['schemas']['PageAppointmentIdResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get an appointment given the booking id, internal location, date and start time. Requires role NOMIS_APPOINTMENTS */
  getAppointment: {
    parameters: {
      path: {
        /** NOMIS booking Id */
        bookingId: string
        /** Appointment room internal location Id */
        locationId: string
        /** Appointment date and start time */
        dateTime: string
      }
    }
    responses: {
      /** Appointment information with created id */
      200: {
        content: {
          'application/json': components['schemas']['CreateAppointmentRequest']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_APPOINTMENTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Booking, location and timestamp combination does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Gets allocation details. Requires role NOMIS_ACTIVITIES */
  getAllocation: {
    parameters: {
      path: {
        /** Allocation id */
        allocationId: string
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['GetAllocationResponse']
        }
      }
      /** Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Searches for active course allocations. Requires role NOMIS_ACTIVITIES */
  findActiveAllocations: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /** Prison id */
        prisonId: string
        /** Exclude program codes */
        excludeProgramCode?: string
        /** Course Activity ID */
        courseActivityId?: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PageFindActiveAllocationIdsResponse']
        }
      }
      /** Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieves a paged list of adjustment ids by filter. Requires ROLE_NOMIS_SENTENCING. */
  getAdjustmentsByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /** Filter results by adjustments that were created on or after the given date */
        fromDate?: string
        /** Filter results by adjustments that were created on or before the given date */
        toDate?: string
      }
    }
    responses: {
      /** Pageable list of ids are returned */
      200: {
        content: {
          'application/json': components['schemas']['PageAdjustmentIdResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieves a hearing by the hearing Id. Requires ROLE_NOMIS_ADJUDICATIONS */
  getAdjudicationHearing: {
    parameters: {
      path: {
        /** NOMIS Hearing Id */
        hearingId: string
      }
    }
    responses: {
      /** Hearing Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['AdjudicationResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Hearing does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieves a hearing result by the nomis hearing id. DPS migrated and synchronised hearing results always have a result sequence of 1 Requires ROLE_NOMIS_ADJUDICATIONS */
  getAdjudicationHearingResult: {
    parameters: {
      path: {
        /** NOMIS Hearing Id */
        hearingId: string
      }
    }
    responses: {
      /** Hearing Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['AdjudicationResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Hearing result does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieves a paged list of adjudication charge ids by filter. Requires ROLE_NOMIS_ADJUDICATIONS. */
  getAdjudicationChargeIdsByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /** Filter results by adjudication charges that were created on or after the given date */
        fromDate?: string
        /** Filter results by adjudication charges that were created on or before the given date */
        toDate?: string
        /** Filter results by adjudication charges that were created in one of the given prisons */
        prisonIds?: string[]
      }
    }
    responses: {
      /** Pageable list of ids are returned */
      200: {
        content: {
          'application/json': components['schemas']['PageAdjudicationChargeIdResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_ADJUDICATIONS not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieves an adjudication by the adjudication number. Requires ROLE_NOMIS_ADJUDICATIONS */
  getAdjudication: {
    parameters: {
      path: {
        /** Adjudication number */
        adjudicationNumber: string
      }
    }
    responses: {
      /** Adjudication Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['AdjudicationResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Adjudication does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieves an adjudication by the adjudication number and charge sequence. Will only return the specified charge. Requires ROLE_NOMIS_ADJUDICATIONS */
  getAdjudicationByCharge: {
    parameters: {
      path: {
        /** Adjudication number */
        adjudicationNumber: string
        /** Charge sequence */
        chargeSequence: string
      }
    }
    responses: {
      /** Adjudication with charge information returned */
      200: {
        content: {
          'application/json': components['schemas']['AdjudicationChargeResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Adjudication or adjudication charge does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Searches for active course activities with allocated prisoners. Requires role NOMIS_ACTIVITIES */
  findActiveActivities: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /** Prison id */
        prisonId: string
        /** Exclude program codes */
        excludeProgramCode?: string
        /** Course Activity ID */
        courseActivityId?: number
      }
    }
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': components['schemas']['PageFindActiveActivityIdsResponse']
        }
      }
      /** Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Deletes an attendance from NOMIS. Requires role NOMIS_ACTIVITIES */
  deleteAttendance: {
    parameters: {
      path: {
        eventId: number
      }
    }
    responses: {
      /** Attendance is deleted */
      204: never
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Deletes an allocation from NOMIS and any children - pay rates, attendances. Requires role NOMIS_ACTIVITIES */
  deleteAllocation: {
    parameters: {
      path: {
        referenceId: number
      }
    }
    responses: {
      /** Allocation is deleted */
      204: never
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}

export interface external {}
