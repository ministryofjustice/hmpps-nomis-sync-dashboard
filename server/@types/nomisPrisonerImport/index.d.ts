/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/sentence-adjustments/{adjustmentId}': {
    /**
     * get specific sentence adjustment
     * @description Requires role NOMIS_SENTENCING. Retrieves a sentence adjustment by id
     */
    get: operations['getSentenceAdjustment']
    /**
     * Updates specific sentence adjustment. The related booking and sentence can not be changed
     * @description Requires role NOMIS_SENTENCING. Updates a sentence adjustment by id
     */
    put: operations['updateSentenceAdjustment']
    /**
     * deletes specific sentence adjustment
     * @description Requires role NOMIS_SENTENCING. Deletes a sentence adjustment by id
     */
    delete: operations['deleteSentenceAdjustment']
  }
  '/schedules/{courseScheduleId}/booking/{bookingId}/attendance': {
    /**
     * Creates or updates an attendance record
     * @description Creates or updates an attendance for the course schedule. Requires role NOMIS_ACTIVITIES
     */
    put: operations['upsertAttendance']
  }
  '/prisoners/{offenderNo}/visits/{visitId}': {
    /**
     * Updates an existing visit
     * @description Updates details of an existing visit such as the visitors and time slot
     */
    put: operations['updateVisit']
  }
  '/prisoners/{offenderNo}/visits/{visitId}/cancel': {
    /** Cancel a visit */
    put: operations['cancelVisit']
  }
  '/prisoners/{offenderNo}/sentencing/court-cases/{caseId}/court-appearances/{eventId}': {
    /**
     * Updates Court Appearance
     * @description Required role NOMIS_SENTENCING Updates a new Court Appearance for the offender,latest booking and given Court Case
     */
    put: operations['updateCourtAppearance']
  }
  '/prisoners/booking-id/{bookingId}/alerts/{alertSequence}': {
    /**
     * get an alert by bookingId and alert sequence
     * @description Retrieves an prisoner alert. Requires ROLE_NOMIS_ALERTS
     */
    get: operations['getAlert_1']
    /**
     * Updates an alert on a prisoner
     * @description Updates an alert on the specified prisoner's booking which should be the latest booking. Requires ROLE_NOMIS_ALERTS
     */
    put: operations['updateAlert']
    /**
     * Deletes an alert by bookingId and alert sequence
     * @description Deletes an prisoner alert. Requires ROLE_NOMIS_ALERTS
     */
    delete: operations['deleteAlert']
  }
  '/non-associations/offender/{offenderNo}/ns-offender/{nsOffenderNo}/sequence/{typeSequence}': {
    /**
     * Updates an existing non-association
     * @description Updates an existing non-association. Requires role NOMIS_NON_ASSOCIATIONS
     */
    put: operations['updateNonAssociation']
    /**
     * Deletes a non-association
     * @description Deletes the specified non-association detail record. if there was only one, the parent NA record is deleted too. Requires role NOMIS_NON_ASSOCIATIONS
     */
    delete: operations['deleteNonAssociation']
  }
  '/non-associations/offender/{offenderNo}/ns-offender/{nsOffenderNo}/sequence/{typeSequence}/close': {
    /**
     * Closes an existing non-association
     * @description Closes an existing non-association. Requires role NOMIS_NON_ASSOCIATIONS
     */
    put: operations['closeNonAssociation']
  }
  '/locations/{locationId}': {
    /**
     * Updates an existing location
     * @description Updates an existing location. Requires role NOMIS_LOCATIONS
     */
    put: operations['updateLocation']
  }
  '/locations/{locationId}/reactivate': {
    /**
     * Reactivates a deactivated location
     * @description Requires role NOMIS_LOCATIONS
     */
    put: operations['reactivateLocation']
  }
  '/locations/{locationId}/deactivate': {
    /**
     * Deactivates an existing location
     * @description Requires role NOMIS_LOCATIONS
     */
    put: operations['deactivateLocation']
  }
  '/locations/{locationId}/certification': {
    /**
     * Update location certification
     * @description Requires role NOMIS_LOCATIONS
     */
    put: operations['updateCertification']
  }
  '/locations/{locationId}/capacity': {
    /**
     * Update location capacity
     * @description Requires role NOMIS_LOCATIONS
     */
    put: operations['updateCapacity']
  }
  '/key-date-adjustments/{adjustmentId}': {
    /**
     * get specific key date adjustment
     * @description Requires role NOMIS_SENTENCING. Retrieves a key date adjustment by id
     */
    get: operations['getKeyDateAdjustment']
    /**
     * Updates specific key date adjustment. The related booking can not be changed
     * @description Requires role NOMIS_SENTENCING. Updates a sentence adjustment by id
     */
    put: operations['updateKeyDateAdjustment']
    /**
     * deletes specific key date adjustment
     * @description Requires role NOMIS_SENTENCING. Deletes a key date adjustment by id
     */
    delete: operations['deleteKeyDateAdjustment']
  }
  '/incentives/reference-codes/{code}': {
    /**
     * Gets the global incentive level by code
     * @description Gets a global incentive level by provided code and domain of IEP_LEVEL
     */
    get: operations['getGlobalIncentiveLevel']
    /**
     * Updates an existing global incentive level
     * @description Updates an existing global incentive level, updateable fields are description and active
     */
    put: operations['updateGlobalIncentiveLevel']
  }
  '/incentives/prison/{prison}/code/{code}': {
    /**
     * Gets the prison incentive level
     * @description Gets prison incentive level data by provided code and prison
     */
    get: operations['getPrisonIncentiveLevel']
    /**
     * Prison Incentive level data
     * @description Creates incentive level data associated with a Prison
     */
    put: operations['updatePrisonIncentiveLevelData']
  }
  '/appointments/{nomisEventId}': {
    /**
     * Updates an existing appointment
     * @description Updates an existing appointment. Requires role NOMIS_APPOINTMENTS
     */
    put: operations['updateAppointment']
    /**
     * Deletes an existing appointment
     * @description Deletes an existing appointment by actually deleting from the table. Intended for appointments created in error. Requires role NOMIS_APPOINTMENTS
     */
    delete: operations['deleteAppointment']
  }
  '/appointments/{nomisEventId}/uncancel': {
    /**
     * Undoes an appointment cancellation
     * @description Undoes an appointment cancellation. Requires role NOMIS_APPOINTMENTS
     */
    put: operations['uncancelAppointment']
  }
  '/appointments/{nomisEventId}/cancel': {
    /**
     * Cancels an existing appointment
     * @description Cancels an existing appointment. Requires role NOMIS_APPOINTMENTS
     */
    put: operations['cancelAppointment']
  }
  '/adjudications/adjudication-number/{adjudicationNumber}/repairs': {
    /**
     * Updates repairs (aka damages) for a given adjudication
     * @description List of repairs are refreshed so this operation may result in any combinations of inserts, updates or deletes. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    put: operations['updateRepairs']
  }
  '/adjudications/adjudication-number/{adjudicationNumber}/hearings/{hearingId}': {
    /**
     * Updates a hearing
     * @description Updates a hearing for a given adjudication and hearing Id. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    put: operations['updateHearing']
    /**
     * Deletes a hearing
     * @description Deletes a hearing for a given adjudication and hearing Id. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    delete: operations['deleteHearing']
  }
  '/adjudications/adjudication-number/{adjudicationNumber}/evidence': {
    /**
     * Updates evidence for a given adjudication
     * @description List of evidence items are refreshed so this operation may result in any combinations of inserts, updates or deletes. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    put: operations['updateEvidence']
  }
  '/adjudications/adjudication-number/{adjudicationNumber}/charge/{chargeSequence}/unquash': {
    /**
     * updates adjudication charge outcome and awards to the requested state before a quash
     * @description The latest hearing result is set to back to the supplied value along with all awards associated with this charge. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    put: operations['unquashHearingResultAndAwards']
  }
  '/adjudications/adjudication-number/{adjudicationNumber}/charge/{chargeSequence}/quash': {
    /**
     * updates adjudication charge outcome and awards to quashed
     * @description The latest hearing result is set to quashed along with all awards associated with this charge (that may be associated with other hearings). Requires ROLE_NOMIS_ADJUDICATIONS
     */
    put: operations['quashHearingResultAndAwards']
  }
  '/adjudications/adjudication-number/{adjudicationNumber}/charge/{chargeSequence}/awards': {
    /**
     * updates a batch of hearing result awards for a given adjudication
     * @description Creates a hearing result awards that have been added, updates those that have changed and deletes ones that are absent for the booking associated with the adjudication. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    put: operations['updateCreateAndDeleteHearingResultAwards']
    /**
     * creates a hearing result award for a given adjudication
     * @description Creates a hearing result award. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    post: operations['createHearingResultAward']
    /**
     * Deletes hearing result awards for a given adjudication and charge sequence
     * @description Deletes hearing result awards for a given adjudication and charge sequence. Returns list of deleted award keys. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    delete: operations['deleteHearingResultAwards']
  }
  '/activities/{courseActivityId}': {
    /**
     * Get activity details
     * @description Gets activity details including schedule rules and pay rates. Requires role NOMIS_ACTIVITIES
     */
    get: operations['getActivity']
    /**
     * Updates an activity
     * @description Updates an activity and associated pay rates. Requires role NOMIS_ACTIVITIES
     */
    put: operations['updateActivity']
    /**
     * Delete a NOMIS course activity
     * @description Deletes a course activity and its children - pay rates, schedules, allocations and attendances. Intended to be used for data fixes. Requires role NOMIS_ACTIVITIES
     */
    delete: operations['deleteActivity']
  }
  '/activities/{courseActivityId}/schedule': {
    /**
     * Updates a course schedule
     * @description Updates a course schedule. Requires role NOMIS_ACTIVITIES
     */
    put: operations['updateCourseSchedule']
  }
  '/activities/{courseActivityId}/end': {
    /**
     * End a course activity
     * @description Ends a course activity and all active attendances with end date today. Requires role NOMIS_ACTIVITIES
     */
    put: operations['endActivity']
  }
  '/activities/{courseActivityId}/allocation': {
    /**
     * Creates or Updates a prisoner's allocation to an activity
     * @description Creates or updates a prisoner's allocation to an activity. Requires role NOMIS_ACTIVITIES
     */
    put: operations['upsertAllocation']
  }
  '/activities/end': {
    /**
     * End multiple course activities
     * @description Ends course activities and all active allocations with end date today. Requires role NOMIS_ACTIVITIES
     */
    put: operations['endActivities']
  }
  '/service-prisons/{serviceCode}/prison/{prisonId}': {
    /**
     * Check if a service is turned on for a prison
     * @description Check if a prison is turned on for a service. Requires role NOMIS_ACTIVITIES
     */
    get: operations['checkServicePrison']
    /**
     * Turn on a service for a prison
     * @description Turn on a service for a prison. Requires role NOMIS_ACTIVITIES
     */
    post: operations['createServicePrison']
  }
  '/prisoners/{offenderNo}/visits': {
    /**
     * Creates a new visit
     * @description Creates a new visit and decrements the visit balance.
     */
    post: operations['createVisit']
  }
  '/prisoners/{offenderNo}/sentencing': {
    /**
     * Creates a new Sentence
     * @description Required role NOMIS_SENTENCING Creates a new Sentence for the offender and latest booking
     */
    post: operations['createSentence']
  }
  '/prisoners/{offenderNo}/sentencing/court-cases': {
    /**
     * get court cases for an offender
     * @description Requires role NOMIS_SENTENCING. Retrieves a court case by id
     */
    get: operations['getCourtCasesByOffender']
    /**
     * Creates a new Court Case
     * @description Required role NOMIS_SENTENCING Creates a new Court Case for the offender and latest booking
     */
    post: operations['createCourtCase']
  }
  '/prisoners/{offenderNo}/sentencing/court-cases/{caseId}/court-appearances': {
    /**
     * Creates a new Court Appearance
     * @description Required role NOMIS_SENTENCING Creates a new Court Appearance for the offender,latest booking and given Court Case
     */
    post: operations['createCourtAppearance']
  }
  '/prisoners/{offenderNo}/alerts': {
    /**
     * Creates an alert on a prisoner
     * @description Creates an alert on the prisoner's latest booking. Requires ROLE_NOMIS_ALERTS
     */
    post: operations['createAlert']
  }
  '/prisoners/{offenderNo}/adjudications': {
    /**
     * creates an adjudication on the latest booking of a prisoner
     * @description Creates an adjudication. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    post: operations['createAdjudication']
  }
  '/prisoners/bookings': {
    /**
     * Gets prisoner details for a list of bookings
     * @description Requires role SYNCHRONISATION_REPORTING.
     */
    post: operations['getPrisonerBookings']
  }
  '/prisoners/booking-id/{bookingId}/sentences/{sentenceSequence}/adjustments': {
    /**
     * Creates a new sentence adjustment
     * @description Required role NOMIS_SENTENCING Creates a new sentence adjustment (aka Debit/Credit). Key dates will not be recalculated as a side effect of this operation
     */
    post: operations['createSentenceAdjustment']
  }
  '/prisoners/booking-id/{bookingId}/incentives': {
    /**
     * Creates a new incentive
     * @description Creates a new incentive using next sequence no.
     */
    post: operations['createIncentive']
  }
  '/prisoners/booking-id/{bookingId}/incentives/reorder': {
    /**
     * Reorder a existing incentives to match time order
     * @description Reorder a series of IEPs so the sequence number matches the IEP date time. Latest time gets the higher sequence so the current IEP is the latest. This is required to correct DPS incentives that are created out of order
     */
    post: operations['reorderCurrentIncentives']
  }
  '/prisoners/booking-id/{bookingId}/adjustments': {
    /**
     * Creates a new key date adjustment
     * @description Required role NOMIS_SENTENCING Creates a new key date adjustment. Key dates will be recalculated as a side effect of this operation
     */
    post: operations['createKeyDateAdjustment']
  }
  '/non-associations': {
    /**
     * Creates a new non-association
     * @description Creates a new non-association. Requires role NOMIS_NON_ASSOCIATIONS
     */
    post: operations['createNonAssociation']
  }
  '/locations': {
    /**
     * Creates a new location
     * @description Creates a new location. Requires role ROLE_NOMIS_LOCATIONS
     */
    post: operations['createLocation']
  }
  '/incentives/reference-codes': {
    /**
     * Creates a new global incentive level
     * @description Creates a new global incentive level
     */
    post: operations['createGlobalIncentiveLevel']
  }
  '/incentives/reference-codes/reorder': {
    /**
     * reorders all global incentive levels
     * @description reorders all global incentive levels using provided list of Incentive codes, including inactive. 1-based index
     */
    post: operations['reorderGlobalIncentiveLevels']
  }
  '/incentives/prison/{prison}': {
    /**
     * Prison Incentive level data
     * @description Creates incentive level data associated with a Prison
     */
    post: operations['createPrisonIncentiveLevelData']
  }
  '/appointments': {
    /**
     * Creates a new appointment
     * @description Creates a new appointment. Requires role NOMIS_APPOINTMENTS
     */
    post: operations['createAppointment']
  }
  '/adjudications/adjudication-number/{adjudicationNumber}/hearings': {
    /**
     * creates a hearing for a given adjudication
     * @description Creates a hearing for a given adjudication. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    post: operations['createHearing']
  }
  '/adjudications/adjudication-number/{adjudicationNumber}/hearings/{hearingId}/charge/{chargeSequence}/result': {
    /**
     * creates or updates a hearing result for a given hearing and charge.
     * @description Creates a (or updates the existing) hearing result for a given hearing and charge. DPS only supports 1 result per hearing. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    post: operations['upsertHearingResult']
    /**
     * Deletes a hearing result
     * @description Deletes a hearing result for a given adjudication and hearing Id. Returns list of any deleted award Ids to allow removal of award mappings in the sync service. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    delete: operations['deleteHearingResult']
  }
  '/adjudications/adjudication-number/{adjudicationNumber}/charge/{chargeSequence}/result': {
    /**
     * creates or updates a result for a given charge. This requires a dummy hearing to be created
     * @description Creates or updates a result for a charge. DPS allows results to be created without hearings eg: Refer to Police. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    post: operations['createResultWithDummyHearing']
    /**
     * Deletes a result
     * @description Deletes a result for a given adjudication and charge sequence. The result will be associated with a dummy hearing used by DPS to record referrals. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    delete: operations['deleteResult']
  }
  '/activities': {
    /**
     * Creates a new activity
     * @description Creates a new activity and associated pay rates. Requires role NOMIS_ACTIVITIES
     */
    post: operations['createActivity']
  }
  '/visits/{visitId}': {
    /**
     * get visit
     * @description Retrieves a visit by id.
     */
    get: operations['getVisit']
  }
  '/visits/rooms/usage-count': {
    /**
     * get future visit room usage by filter
     * @description Retrieves a list of rooms with usage count for the (filtered) visits. Only future visits are included
     */
    get: operations['getVisitRoomCountsByFilter']
  }
  '/visits/ids': {
    /**
     * get visits by filter
     * @description Retrieves a paged list of visits by filter
     */
    get: operations['getVisitsByFilter']
  }
  '/service-prisons/{serviceCode}': {
    /**
     * Retrieve a list of prisons switched on for the service
     * @description Retrieves all prisons switched on for the service code, or an empty list if there are none. Requires role SYNCHRONISATION_REPORTING
     */
    get: operations['getServicePrisons']
  }
  '/questionnaires/{questionnaireId}': {
    /**
     * Get incident questionnaire details
     * @description Gets incident questionnaire details. Requires role NOMIS_INCIDENTS
     */
    get: operations['getQuestionnaire']
  }
  '/questionnaires/ids': {
    /**
     * get questionnaire IDs by filter
     * @description Retrieves a paged list of incident questionnaire ids by filter. Requires ROLE_NOMIS_INCIDENTS.
     */
    get: operations['getIdsByFilter']
  }
  '/prisons/{prisonId}/incentive-levels': {
    /**
     * Retrieve a list of active incentive levels for a prison
     * @description Retrieve a list of active incentive levels for a prison. Requires role NOMIS_ACTIVITIES
     */
    get: operations['getPrisonIncentiveLevels']
  }
  '/prisoners/{offenderNo}/sentencing/offender-charges/{offenderChargeId}': {
    /**
     * get an offender charge
     * @description Requires role NOMIS_SENTENCING. Retrieves offender charge details. Offender Charges are at the booking level.
     */
    get: operations['getOffenderCharge']
  }
  '/prisoners/{offenderNo}/sentencing/court-cases/{id}': {
    /**
     * get a court case
     * @description Requires role NOMIS_SENTENCING. Retrieves a court case by id
     */
    get: operations['getCourtCase']
  }
  '/prisoners/{offenderNo}/sentencing/court-appearances/{id}': {
    /**
     * get a court appearance
     * @description Requires role NOMIS_SENTENCING. Retrieves a court appearance by id
     */
    get: operations['getCourtAppearance']
  }
  '/prisoners/{offenderNo}/merges': {
    /**
     * Gets prisoner's list of merge details since a given date. Either the current offenderNo or the previous offenderNo can be used to search for merges.
     * @description Requires role SYNCHRONISATION_REPORTING.
     */
    get: operations['getPrisonerMerges']
  }
  '/prisoners/{offenderNo}/bookings/{bookingId}/previous': {
    /**
     * Gets a prisoner's previous booking relative to the supplied booking id
     * @description Requires role NOMIS_ALERTS.
     */
    get: operations['getPreviousBooking']
  }
  '/prisoners/{offenderNo}/alerts/to-migrate': {
    /**
     * Gets alert for latest booking plus unique list of alerts from previous bookings for a prisoner
     * @description Retrieves alerts for a prisoner across all bookings. The latest booking all alerts will be returned, from the previous bookings the list will contain at most one alert per alert code type ordered by alert date with latest alert taken. Requires ROLE_NOMIS_ALERTS
     */
    get: operations['getAlertsToMigrate']
  }
  '/prisoners/{offenderNo}/alerts/reconciliation': {
    /**
     * Gets active alerts for latest booking plus unique list of alerts from previous bookings for a prisoner
     * @description Retrieves active alerts for a prisoner across all bookings. The latest booking all active alerts will be returned, from the previous bookings the list will contain at most one alert per alert code that is active type ordered by alert date with latest alert taken. Requires ROLE_NOMIS_ALERTS
     */
    get: operations['getActiveAlertsForReconciliation']
  }
  '/prisoners/ids': {
    /**
     * Gets the identifiers for all prisoners. By default only active prisoners will be return unless active=false
     * @description Requires role SYNCHRONISATION_REPORTING.
     */
    get: operations['getPrisonerIdentifiers']
  }
  '/prisoners/booking-id/{bookingId}/sentencing/sentence-sequence/{sequence}': {
    /**
     * get sentences for an offender using the given booking id and sentence sequence
     * @description Requires role NOMIS_SENTENCING. Retrieves a court case by id
     */
    get: operations['getOffenderSentence']
  }
  '/prisoners/booking-id/{bookingId}/sentencing/court-cases': {
    /**
     * get court cases for an offender booking
     * @description Requires role NOMIS_SENTENCING. Retrieves a court case by id
     */
    get: operations['getCourtCasesByOffenderBooking']
  }
  '/prisoners/booking-id/{bookingId}/sentencing-adjustments': {
    /**
     * get active sentence and key date adjustments for a booking
     * @description Retrieves all the current active sentence and key date adjustments (by booking) for a prisoner. Requires NOMIS_SENTENCING.
     */
    get: operations['getActiveAdjustments']
  }
  '/prisoners/booking-id/{bookingId}/awards/{sanctionSequence}': {
    /**
     * get hearing result award by Id
     * @description Retrieves a hearing result by the Id (bookingId and sanctionSequence). Requires ROLE_NOMIS_ADJUDICATIONS
     */
    get: operations['getAdjudicationHearingResultAward']
  }
  '/prisoners/booking-id/{bookingId}/awards/ada/summary': {
    /**
     * Get ADA award summary result award by booking
     * @description Retrieves a summary of ADA awards along with associated adjudication for a given booking. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    get: operations['getAdjudicationADASummary']
  }
  '/prisoners/booking-id/{bookingId}/alerts': {
    /**
     * Gets alert for booking
     * @description Retrieves alerts for a specific booking. Requires ROLE_NOMIS_ALERTS
     */
    get: operations['getAlertsByBookingId']
  }
  '/prisoner/booking-id/{bookingId}/alerts/{alertSequence}': {
    /**
     * get an alert by bookingId and alert sequence
     * @description Retrieves an prisoner alert. Requires ROLE_NOMIS_ALERTS
     */
    get: operations['getAlert']
  }
  '/non-associations/offender/{offenderNo}/ns-offender/{nsOffenderNo}': {
    /**
     * Get an open non-association
     * @description Get the open non-association for the two offender numbers. Requires role NOMIS_NON_ASSOCIATIONS
     */
    get: operations['getNonAssociation']
  }
  '/non-associations/offender/{offenderNo}/ns-offender/{nsOffenderNo}/all': {
    /**
     * Get all non-associations for the two offender numbers
     * @description Get all non-associations for the two offender numbers, including expired. Requires role NOMIS_NON_ASSOCIATIONS
     */
    get: operations['getNonAssociationDetails']
  }
  '/non-associations/ids': {
    /**
     * get non-associations by filter
     * @description Retrieves a paged list of composite ids by filter. Requires ROLE_NOMIS_NON_ASSOCIATIONS.
     */
    get: operations['getNonAssociationsByFilter']
  }
  '/locations/{id}': {
    /**
     * Get a location
     * @description Get the location given the id. Requires role ROLE_NOMIS_LOCATIONS
     */
    get: operations['getLocation']
  }
  '/locations/key/{key}': {
    /**
     * Get a location
     * @description Get the location given the business key. Requires role ROLE_NOMIS_LOCATIONS
     */
    get: operations['getLocationByKey']
  }
  '/locations/ids': {
    /**
     * get locations by filter
     * @description Retrieves a paged list of composite ids by filter. Requires ROLE_NOMIS_LOCATIONS.
     */
    get: operations['getLocationsByFilter']
  }
  '/incidents/{incidentId}': {
    /**
     * Get incident details
     * @description Gets incident details. Requires role NOMIS_INCIDENTS
     */
    get: operations['getIncident']
  }
  '/incidents/ids': {
    /**
     * get incident IDs by filter
     * @description Retrieves a paged list of incident ids by filter. Requires ROLE_NOMIS_INCIDENTS.
     */
    get: operations['getIdsByFilter_1']
  }
  '/incentives/ids': {
    /**
     * get incentives (a.k.a IEP) by filter
     * @description Retrieves a paged list of incentive composite ids by filter. Requires ROLE_NOMIS_INCENTIVES.
     */
    get: operations['getIncentivesByFilter']
  }
  '/incentives/booking-id/{bookingId}/incentive-sequence/{incentiveSequence}': {
    /**
     * get a prisoner's incentive level (a.k.a IEP) by id (bookingId and incentiveId)
     * @description Retrieves a created incentive level for a prisoner. Requires ROLE_NOMIS_INCENTIVES.
     */
    get: operations['getIncentive']
  }
  '/incentives/booking-id/{bookingId}/current': {
    /**
     * get a prisoner's current incentive level (a.k.a IEP) for a booking
     * @description Retrieves the current incentive level (by booking) for a prisoner. Requires ROLE_NOMIS_INCENTIVES.
     */
    get: operations['getCurrentIncentive']
  }
  '/documents/{id}': {
    /**
     * Retrieve a document
     * @description Retrieve a document by its id. Requires role NOMIS_DOCUMENTS
     */
    get: operations['getDocument']
  }
  '/documents/booking/{bookingId}': {
    /**
     * Retrieve a list of document ids
     * @description Retrieve a list of document ids searching by booking id and template name. Requires role NOMIS_DOCUMENTS
     */
    get: operations['getDocumentIds']
  }
  '/csip/{id}': {
    /**
     * Get CSIP details
     * @description Gets csip details. Requires role NOMIS_CSIP
     */
    get: operations['getCSIP']
  }
  '/csip/ids': {
    /**
     * get csip IDs by filter
     * @description Retrieves a paged list of csip ids by filter. Requires ROLE_NOMIS_CSIP.
     */
    get: operations['getIdsByFilter_2']
  }
  '/csip/count': {
    /**
     * Get csip count
     * @description Gets a count of all csips. Requires role NOMIS_CSIP
     */
    get: operations['getCSIPCount']
  }
  '/attendances/reconciliation/{prisonId}': {
    /**
     * Get data for an attendance sync reconciliation
     * @description Gets the number of active attendances for each booking in the prison
     */
    get: operations['getAttendanceReconciliationSummary']
  }
  '/appointments/{eventId}': {
    /**
     * Get appointment by event id
     * @description Get an appointment given the unique event id. Requires role NOMIS_APPOINTMENTS
     */
    get: operations['getAppointmentById']
  }
  '/appointments/ids': {
    /**
     * get appointments by filter
     * @description Retrieves a paged list of appointment ids by filter. Requires ROLE_NOMIS_APPOINTMENTS.
     */
    get: operations['getAppointmentsByFilter']
  }
  '/appointments/counts': {
    /**
     * Get appointment counts by prison, event sub type and future / past. Note that the 'future' is everything from tomorrow onwards.
     * @description Retrieves counts of appointments for the migration preview. Requires ROLE_NOMIS_APPOINTMENTS.
     */
    get: operations['getAppointmentCounts']
  }
  '/appointments/booking/{bookingId}/location/{locationId}/start/{dateTime}': {
    /**
     * Get an appointment
     * @description Get an appointment given the booking id, internal location, date and start time. Requires role NOMIS_APPOINTMENTS
     */
    get: operations['getAppointment']
  }
  '/allocations/{allocationId}': {
    /**
     * Get allocation details
     * @description Gets allocation details. Requires role NOMIS_ACTIVITIES
     */
    get: operations['getAllocation']
  }
  '/allocations/suspended': {
    /**
     * Find suspended allocations
     * @description Searches for suspended prisoners on active course allocations. Requires role NOMIS_ACTIVITIES
     */
    get: operations['findSuspendedAllocations']
  }
  '/allocations/reconciliation/{prisonId}': {
    /**
     * Get data for an allocation sync reconciliation
     * @description Gets the number of active allocations for each booking in the prison
     */
    get: operations['getAllocationReconciliationSummary']
  }
  '/allocations/missing-pay-bands': {
    /**
     * Find allocations with missing pay bands
     * @description Searches for prisoners allocated to a course activity without a pay band assigned. Requires role NOMIS_ACTIVITIES
     */
    get: operations['findAllocationsWithMissingPayBands']
  }
  '/allocations/ids': {
    /**
     * Find paged active allocations
     * @description Searches for active course allocations. Requires role NOMIS_ACTIVITIES
     */
    get: operations['findActiveAllocations']
  }
  '/alerts/ids': {
    /**
     * Get alert IDs by filter
     * @description Retrieves a paged list of alert ids by filter. Requires ROLE_NOMIS_ALERTS.
     */
    get: operations['getAlertIdsByFilter']
  }
  '/adjustments/ids': {
    /**
     * get adjustment IDs (key date and Sentence adjustments) by filter
     * @description Retrieves a paged list of adjustment ids by filter. Requires ROLE_NOMIS_SENTENCING.
     */
    get: operations['getAdjustmentsByFilter']
  }
  '/adjudications/hearings/{hearingId}': {
    /**
     * get hearing by hearing Id
     * @description Retrieves a hearing by the hearing Id. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    get: operations['getAdjudicationHearing']
  }
  '/adjudications/hearings/{hearingId}/charge/{chargeSequence}/result': {
    /**
     * get hearing result by hearing id
     * @description Retrieves a hearing result by the nomis hearing id. DPS migrated and synchronised hearing results always have a result sequence of 1 Requires ROLE_NOMIS_ADJUDICATIONS
     */
    get: operations['getAdjudicationHearingResult']
  }
  '/adjudications/charges/ids': {
    /**
     * get adjudication charge IDs by filter
     * @description Retrieves a paged list of adjudication charge ids by filter. Requires ROLE_NOMIS_ADJUDICATIONS.
     */
    get: operations['getAdjudicationChargeIdsByFilter']
  }
  '/adjudications/adjudication-number/{adjudicationNumber}': {
    /**
     * get adjudication by adjudication number
     * @description Retrieves an adjudication by the adjudication number. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    get: operations['getAdjudication']
  }
  '/adjudications/adjudication-number/{adjudicationNumber}/charge-sequence/{chargeSequence}': {
    /**
     * get adjudication by adjudication number and charge sequence
     * @description Retrieves an adjudication by the adjudication number and charge sequence. Will only return the specified charge. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    get: operations['getAdjudicationByCharge']
  }
  '/activities/rates-with-unknown-incentives': {
    /**
     * Find activities with pay rates with unknown incentive level
     * @description Searches for course activities that have an active pay rate with an unknown incentive level. Requires role NOMIS_ACTIVITIES
     */
    get: operations['findRatesWithUnknownIncentiveLevel']
  }
  '/activities/ids': {
    /**
     * Find paged active activities
     * @description Searches for active course activities with allocated prisoners. Requires role NOMIS_ACTIVITIES
     */
    get: operations['findActiveActivities']
  }
  '/incident/adjudication-number/{adjudicationNumber}': {
    /**
     * **** Used to recover from a duplicate incident creation only ***** Deletes an incident by adjudication number.
     * @description Deletes an incident by adjudication number. Supports the removal of a duplicate incident without a DPS mapping. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    delete: operations['deleteIncident']
  }
  '/attendances/{eventId}': {
    /**
     * Delete a NOMIS attendance (from OFFENDER_COURSE_ATTENDANCES table)
     * @description Deletes an attendance from NOMIS. Requires role NOMIS_ACTIVITIES
     */
    delete: operations['deleteAttendance']
  }
  '/allocations/{referenceId}': {
    /**
     * Delete a NOMIS allocation (from OFFENDER_PROGRAM_PROFILES table)
     * @description Deletes an allocation from NOMIS and any children - pay rates, attendances. Requires role NOMIS_ACTIVITIES
     */
    delete: operations['deleteAllocation']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    ErrorResponse: {
      /** Format: int32 */
      status: number
      /** Format: int32 */
      errorCode?: number
      userMessage?: string
      developerMessage?: string
      moreInfo?: string
    }
    /** @description Sentence adjustment update request */
    UpdateSentenceAdjustmentRequest: {
      /**
       * @description NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS
       * @example RX
       * @enum {string}
       */
      adjustmentTypeCode: 'RSR' | 'UR' | 'S240A' | 'RST' | 'RX'
      /**
       * Format: date
       * @description Date adjustment is applied
       */
      adjustmentDate?: string
      /**
       * Format: date
       * @description Start of the period which contributed to the adjustment
       */
      adjustmentFromDate?: string
      /**
       * Format: int64
       * @description Number of days for the adjustment
       */
      adjustmentDays: number
      /** @description Comment */
      comment?: string
      /**
       * @description Flag to indicate if the adjustment is being applied
       * @default true
       */
      active?: boolean
      /**
       * Format: int64
       * @description Sentence sequence
       */
      sentenceSequence: number
    }
    /** @description Course activity create/update request */
    UpsertAttendanceRequest: {
      /**
       * Format: date
       * @description The date of the course schedule
       * @example 2023-04-03
       */
      scheduleDate: string
      /**
       * Format: partial-time
       * @description The time of the course schedule
       * @example 10:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The time the course schedule ends
       * @example 11:00
       */
      endTime: string
      /**
       * @description The status of the attendance
       * @example SCH
       */
      eventStatusCode: string
      /**
       * @description The outcome code for a completed attendance
       * @example ATT
       */
      eventOutcomeCode?: string
      /**
       * @description Comments relating to the attendance
       * @example Disruptive
       */
      comments?: string
      /**
       * @description Whether the absence is excused
       * @default false
       * @example true
       */
      unexcusedAbsence?: boolean
      /**
       * @description Whether the absence is authorised
       * @default false
       * @example true
       */
      authorisedAbsence?: boolean
      /**
       * @description Whether the attendance is to be paid
       * @default false
       * @example true
       */
      paid?: boolean
      /**
       * @description Any bonus pay for the attendance
       * @example 1.5
       */
      bonusPay?: number
    }
    /** @description Attendance create/update response */
    UpsertAttendanceResponse: {
      /**
       * Format: int64
       * @description The attendance event id
       */
      eventId: number
      /**
       * Format: int64
       * @description The course schedule id for the attendance
       */
      courseScheduleId: number
      /** @description Whether or the attendance was created */
      created: boolean
      /** @description Prison code */
      prisonId: string
    }
    /** @description Visit update request */
    UpdateVisitRequest: {
      /**
       * @description Visit start date and time
       * @example 2021-07-05T10:35:17
       */
      startDateTime: string
      /**
       * @description Visit end time
       * @example 14:30
       */
      endTime: string
      /** @description Visitors */
      visitorPersonIds: number[]
      /** @description Name of the real world room where visit will take place */
      room: string
      /**
       * @description Whether visit is restricted to a closed session
       * @enum {string}
       */
      openClosedStatus: 'OPEN' | 'CLOSED'
    }
    /** @description Visit cancellation */
    CancelVisitRequest: {
      /**
       * @description The cancellation reason
       * @enum {string}
       */
      outcome: 'VISCANC' | 'OFFCANC' | 'ADMIN' | 'NSHOW'
    }
    /** @description Court Event */
    CourtAppearanceRequest: {
      /** @example 2021-07-05T10:35:17 */
      eventDateTime: string
      courtEventType: string
      courtId: string
      outcomeReasonCode?: string
      /** @example 2021-07-05T10:35:17 */
      nextEventDateTime?: string
      courtEventChargesToUpdate: components['schemas']['ExistingOffenderChargeRequest'][]
      courtEventChargesToCreate: components['schemas']['OffenderChargeRequest'][]
      nextCourtId?: string
    }
    /** @description Court Event */
    ExistingOffenderChargeRequest: {
      /** Format: int64 */
      offenderChargeId: number
      offenceCode: string
      /** Format: int32 */
      offencesCount?: number
      /** Format: date */
      offenceDate?: string
      /** Format: date */
      offenceEndDate?: string
      resultCode1?: string
      mostSeriousFlag: boolean
    }
    /** @description Court Event */
    OffenderChargeRequest: {
      offenceCode: string
      /** Format: int32 */
      offencesCount?: number
      /** Format: date */
      offenceDate?: string
      /** Format: date */
      offenceEndDate?: string
      resultCode1?: string
      mostSeriousFlag: boolean
    }
    /** @description Create adjustment response */
    CreateCourtEventChargesResponse: {
      /** Format: int64 */
      offenderChargeId: number
    }
    /** @description Create adjustment response */
    UpdateCourtAppearanceResponse: {
      createdCourtEventChargesIds: components['schemas']['CreateCourtEventChargesResponse'][]
      deletedOffenderChargesIds: components['schemas']['CreateCourtEventChargesResponse'][]
      /** Format: int64 */
      nextCourtAppearanceId?: number
    }
    /** @description The data held in NOMIS about an alert associated with a prisoner */
    AlertResponse: {
      /**
       * Format: int64
       * @description The prisoner's bookingId related to this alert
       */
      bookingId: number
      /**
       * Format: int64
       * @description The prisoner's bookingId sequence related to this alert. Used to show if this is on latest bookings
       */
      bookingSequence: number
      /**
       * Format: int64
       * @description The sequence primary key within this booking
       */
      alertSequence: number
      alertCode: components['schemas']['CodeDescription']
      type: components['schemas']['CodeDescription']
      /**
       * Format: date
       * @description Date alert started
       */
      date: string
      /**
       * Format: date
       * @description Date alert expired
       */
      expiryDate?: string
      /** @description true if alert is active and has not expired */
      isActive: boolean
      /** @description true if alert has been verified by another member of staff */
      isVerified: boolean
      /**
       * @description Free format text of person or department that authorised the alert
       * @example security
       */
      authorisedBy?: string
      /** @description Free format comment */
      comment?: string
      audit: components['schemas']['NomisAudit']
    }
    CodeDescription: {
      code: string
      description: string
    }
    /** @description The data held in NOMIS the person or system that created this record */
    NomisAudit: {
      /**
       * @description Date time record was created
       * @example 2021-07-05T10:35:17
       */
      createDatetime: string
      /** @description Username of person that created the record (might also be a system) */
      createUsername: string
      /** @description Real name of person that created the record (might by null for system users) */
      createDisplayName?: string
      /** @description Username of person that last modified the record (might also be a system) */
      modifyUserId?: string
      /** @description Real name of person that modified the record (might by null for system users) */
      modifyDisplayName?: string
      /**
       * @description Date time record was last modified
       * @example 2021-07-05T10:35:17
       */
      modifyDatetime?: string
      /**
       * @description Audit Date time
       * @example 2021-07-05T10:35:17
       */
      auditTimestamp?: string
      /** @description Audit username */
      auditUserId?: string
      /** @description NOMIS or DPS module that created the record */
      auditModuleName?: string
      /** @description Client userid */
      auditClientUserId?: string
      /** @description IP Address where request originated from */
      auditClientIpAddress?: string
      /** @description Machine name where request originated from */
      auditClientWorkstationName?: string
      /** @description Additional information that is audited */
      auditAdditionalInfo?: string
    }
    /** @description A request to update an alert in NOMIS */
    UpdateAlertRequest: {
      /**
       * Format: date
       * @description Date alert started
       */
      date: string
      /**
       * Format: date
       * @description Date alert expired
       */
      expiryDate?: string
      /** @description true if alert is active and has not expired */
      isActive: boolean
      /** @description Free format comment */
      comment?: string
      /** @description Username of person that update the record (might also be a system) */
      updateUsername: string
      /**
       * @description Free format text of person or department that authorised the alert
       * @example security
       */
      authorisedBy?: string
    }
    /** @description Offender NonAssociation update request */
    UpdateNonAssociationRequest: {
      /**
       * @description Reason code of the first prisoner, domain NON_ASSO_RSN
       * @example VIC
       */
      reason: string
      /**
       * @description Reason code of the other prisoner, domain NON_ASSO_RSN
       * @example PER
       */
      recipReason: string
      /**
       * @description Type code, domain NON_ASSO_TYP
       * @example WING
       */
      type: string
      /**
       * @description Free text name of staff member
       * @example Joe Bloggs
       */
      authorisedBy?: string
      /**
       * Format: date
       * @description Effective date
       * @example 2022-08-12
       */
      effectiveDate: string
      /**
       * @description Comment
       * @example Some comment
       */
      comment?: string
      /**
       * Format: date
       * @description Expiry date
       * @example 2024-08-12
       */
      expiryDate?: string
    }
    /** @description Location profile or attribute */
    ProfileRequest: {
      /**
       * @description Reference Domain for the attribute
       * @enum {string}
       */
      profileType: 'HOU_SANI_FIT' | 'HOU_UNIT_ATT' | 'HOU_USED_FOR' | 'SUP_LVL_TYPE' | 'NON_ASSO_TYP'
      /** @description Reference Code within the domain for the attribute */
      profileCode: string
    }
    /** @description Location update request */
    UpdateLocationRequest: {
      /**
       * @description Whether a CELL, VISIT room, Kitchen etc (Ref type ILOC_TYPE)
       * @enum {string}
       */
      locationType:
        | 'ADJU'
        | 'ADMI'
        | 'APP'
        | 'AREA'
        | 'ASSO'
        | 'BOOT'
        | 'BOX'
        | 'CELL'
        | 'CLAS'
        | 'EXER'
        | 'EXTE'
        | 'FAIT'
        | 'GROU'
        | 'HCEL'
        | 'HOLD'
        | 'IGRO'
        | 'INSI'
        | 'INTE'
        | 'LAND'
        | 'LOCA'
        | 'MEDI'
        | 'MOVE'
        | 'OFFI'
        | 'OUTS'
        | 'POSI'
        | 'RESI'
        | 'ROOM'
        | 'RTU'
        | 'SHEL'
        | 'SPOR'
        | 'SPUR'
        | 'STOR'
        | 'TABL'
        | 'TRAI'
        | 'TRRM'
        | 'VIDE'
        | 'VISIT'
        | 'WING'
        | 'WORK'
      /**
       * @description Full code hierarchy
       * @example MDI-C-3-015
       */
      description: string
      /**
       * @description Description of location
       * @example Some description
       */
      userDescription?: string
      /**
       * @description Usually a number for a cell, a letter for a wing or landing. Used to calculate description
       * @example 005
       */
      locationCode: string
      /**
       * Format: int64
       * @description Parent location if any, e.g. landing for a cell
       * @example 1234567
       */
      parentLocationId?: number
      /**
       * @description Housing Unit type, Reference code (HOU_UN_TYPE)
       * @enum {string}
       */
      unitType?: 'HC' | 'HOLC' | 'NA' | 'OU' | 'REC' | 'SEG' | 'SPLC'
      /**
       * Format: int32
       * @description Defines the order within parent location
       */
      listSequence?: number
      /**
       * @description Comment
       * @example Some comment
       */
      comment?: string
      /** @description Profiles */
      profiles?: components['schemas']['ProfileRequest'][]
      /** @description Usages */
      usages?: components['schemas']['UsageRequest'][]
    }
    /** @description Location usage */
    UsageRequest: {
      /**
       * @description Types of location that the usage applies to
       * @enum {string}
       */
      internalLocationUsageType: 'APP' | 'MOVEMENT' | 'OCCUR' | 'OIC' | 'OTHER' | 'OTH' | 'PROG' | 'PROP' | 'VISIT'
      /** Format: int32 */
      capacity?: number
      /** Format: int32 */
      sequence?: number
    }
    /** @description Location deactivate request */
    DeactivateRequest: {
      /**
       * Format: date
       * @description The deactivation date, defaults to today
       * @example 2024-12-31
       */
      deactivateDate?: string
      /**
       * @description The reason code for deactivation, reference data 'LIV_UN_RSN'
       * @enum {string}
       */
      reasonCode?: 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L'
      /**
       * Format: date
       * @description The expected reactivation date if any
       * @example 2024-12-31
       */
      reactivateDate?: string
    }
    /** @description Location update certification request */
    UpdateCertificationRequest: {
      /**
       * Format: int32
       * @description The CNA certified capacity
       */
      cnaCapacity: number
      /** @description Whether the location is certified */
      certified: boolean
    }
    /** @description Location update capacity request */
    UpdateCapacityRequest: {
      /**
       * Format: int32
       * @description The maximum physical capacity
       */
      capacity?: number
      /**
       * Format: int32
       * @description The maximum operational capacity
       */
      operationalCapacity?: number
    }
    /** @description Key date adjustment update request */
    UpdateKeyDateAdjustmentRequest: {
      /**
       * @description NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS
       * @example ADA
       * @enum {string}
       */
      adjustmentTypeCode: 'LAL' | 'UAL' | 'RADA' | 'ADA' | 'SREM'
      /**
       * Format: date
       * @description Date adjustment is applied
       */
      adjustmentDate?: string
      /**
       * Format: date
       * @description Start of the period which contributed to the adjustment
       */
      adjustmentFromDate: string
      /**
       * Format: int64
       * @description Number of days for the adjustment
       */
      adjustmentDays: number
      /** @description Comment */
      comment?: string
      /**
       * @description Flag to indicate if the adjustment is being applied
       * @default true
       */
      active?: boolean
    }
    /** @description IEP creation request */
    CreateIncentiveRequest: {
      /**
       * @description IEP Level
       * @example Standard
       */
      iepLevel: string
      /**
       * @description Review comments
       * @example A review took place
       */
      comments?: string
      /**
       * @description Date and time when last review took place
       * @example 2021-07-05T10:35:17
       */
      iepDateTime: string
      /**
       * @description Prison ID
       * @example MDI
       */
      prisonId: string
      /**
       * @description Username of the reviewer
       * @example AJONES
       */
      userId: string
    }
    ReferenceCode: {
      code: string
      domain: string
      description: string
      active: boolean
      /** Format: int32 */
      sequence?: number
      parentCode?: string
      /** Format: date */
      expiredDate?: string
      systemDataFlag: boolean
    }
    /** @description Prison Incentive level data create request */
    CreatePrisonIncentiveRequest: {
      /**
       * @description Incentive Level code
       * @example STD
       */
      levelCode: string
      /**
       * @description active status of the Global Incentive Level
       * @example true
       */
      active: boolean
      /**
       * @description default on admission
       * @example true
       */
      defaultOnAdmission: boolean
      /**
       * Format: int32
       * @description The number of weekday visits for a convicted prisoner per fortnight
       * @example 5500
       */
      visitOrderAllowance?: number
      /**
       * Format: int32
       * @description The number of privileged/weekend visits for a convicted prisoner per 4 weeks
       * @example 5500
       */
      privilegedVisitOrderAllowance?: number
      /**
       * Format: int32
       * @description The amount transferred weekly from the private cash account to the spends account for a remand prisoner to use
       * @example 5500
       */
      remandTransferLimitInPence?: number
      /**
       * Format: int32
       * @description The maximum amount allowed in the spends account for a remand prisoner
       * @example 5500
       */
      remandSpendLimitInPence?: number
      /**
       * Format: int32
       * @description The amount transferred weekly from the private cash account to the spends account for a convicted prisoner to use
       * @example 5500
       */
      convictedTransferLimitInPence?: number
      /**
       * Format: int32
       * @description The maximum amount allowed in the spends account for a convicted prisoner
       * @example 5500
       */
      convictedSpendLimitInPence?: number
    }
    /** @description Incentive information */
    PrisonIncentiveLevelDataResponse: {
      prisonId: string
      iepLevelCode: string
      /** Format: int32 */
      visitOrderAllowance?: number
      /** Format: int32 */
      privilegedVisitOrderAllowance?: number
      defaultOnAdmission: boolean
      /** Format: int32 */
      remandTransferLimitInPence?: number
      /** Format: int32 */
      remandSpendLimitInPence?: number
      /** Format: int32 */
      convictedTransferLimitInPence?: number
      /** Format: int32 */
      convictedSpendLimitInPence?: number
      active: boolean
      /** Format: date */
      expiryDate?: string
      visitAllowanceActive?: boolean
      /** Format: date */
      visitAllowanceExpiryDate?: string
    }
    /** @description Offender individual schedule update request */
    UpdateAppointmentRequest: {
      /**
       * Format: date
       * @description Appointment date
       * @example 2022-08-12
       */
      eventDate: string
      /**
       * Format: partial-time
       * @description Appointment start time
       * @example 09:45
       */
      startTime: string
      /**
       * Format: partial-time
       * @description Activity end time
       * @example 15:20
       */
      endTime: string
      /**
       * Format: int64
       * @description Room where the appointment is to occur (in cell if null)
       * @example 112233
       */
      internalLocationId?: number
      /**
       * @description Appointment event sub-type
       * @example MEOT
       */
      eventSubType: string
      /**
       * @description Comment
       * @example Some comment
       */
      comment?: string
    }
    /** @description The repairs required due to the damage */
    Repair: {
      type: components['schemas']['CodeDescription']
      comment?: string
      cost?: number
      /** @description Username of person who created the record in NOMIS */
      createdByUsername: string
    }
    UpdateRepairsResponse: {
      /** @description The repairs required due to the damage */
      repairs: components['schemas']['Repair'][]
    }
    /** @description Current list of repairs required due to damage */
    RepairToUpdateOrAdd: {
      /**
       * @description NOMIS repair type code
       * @enum {string}
       */
      typeCode: 'CLEA' | 'DECO' | 'ELEC' | 'FABR' | 'LOCK' | 'PLUM'
      /** @description Description of repair required by damage */
      comment?: string
    }
    /** @description Repairs required due to damage. Any items not in this list will be removed from the Adjudication in NOMIS */
    UpdateRepairsRequest: {
      /** @description Current list of repairs required due to damage */
      repairs: components['schemas']['RepairToUpdateOrAdd'][]
    }
    /** @description Hearing update fields */
    UpdateHearingRequest: {
      /**
       * @description Type of hearing
       * @example GOV
       */
      hearingType: string
      /**
       * Format: date
       * @description Hearing date
       */
      hearingDate: string
      /**
       * Format: partial-time
       * @description Hearing time
       */
      hearingTime: string
      /**
       * Format: int64
       * @description location id for the hearing
       * @example 123456
       */
      internalLocationId: number
    }
    Evidence: {
      type: components['schemas']['CodeDescription']
      /** Format: date */
      date: string
      detail: string
      /** @description Username of person who created the record in NOMIS */
      createdByUsername: string
    }
    UpdateEvidenceResponse: {
      /** @description The evidence associated with the adjudication incident */
      evidence: components['schemas']['Evidence'][]
    }
    /** @description Current list of evidence items */
    EvidenceToUpdateOrAdd: {
      /**
       * @description Type of evidence
       * @example PHOTO
       * @enum {string}
       */
      typeCode: 'BEHAV' | 'DRUGTEST' | 'EVI_BAG' | 'OTHER' | 'PHOTO' | 'VICTIM' | 'WEAP' | 'WITNESS'
      /**
       * @description Description of evidence
       * @example Image of damages
       */
      detail: string
    }
    /** @description Evidence associated with adjudication incident. Any items not in this list will be removed from the Adjudication in NOMIS */
    UpdateEvidenceRequest: {
      /** @description Current list of evidence items */
      evidence: components['schemas']['EvidenceToUpdateOrAdd'][]
    }
    /** @description Provides the generated Hearing Result Award composite ID after creation */
    HearingResultAwardResponse: {
      /** Format: int64 */
      bookingId: number
      /** Format: int32 */
      sanctionSequence: number
    }
    /** @description A list of Hearing result awards created (aka punishment) */
    UpdateHearingResultAwardResponses: {
      /** @description an ordered list of awards created, the order matching the request order for awardRequestsToCreate */
      awardsCreated: components['schemas']['HearingResultAwardResponse'][]
      /** @description a list of awards that were deleted due to this update */
      awardsDeleted: components['schemas']['HearingResultAwardResponse'][]
    }
    /** @description adjudication that contains the matching award that this award is consecutive to */
    AdjudicationChargeId: {
      /**
       * Format: int64
       * @description adjudication number
       */
      adjudicationNumber: number
      /**
       * Format: int32
       * @description charge sequence within the adjudication
       */
      chargeSequence: number
    }
    /** @description Hearing result award (aka punishment) to be created */
    ExistingHearingResultAwardRequest: {
      award: components['schemas']['HearingResultAwardRequest']
      /**
       * Format: int32
       * @description sanction sequence for the booking associated with the adjudication
       */
      sanctionSequence: number
    }
    /** @description Hearing result award (aka punishment) to be created */
    HearingResultAwardRequest: {
      /**
       * @description The type of award
       * @example CAUTION
       * @enum {string}
       */
      sanctionType:
        | 'ADA'
        | 'CAUTION'
        | 'CC'
        | 'EXTRA_WORK'
        | 'EXTW'
        | 'FORFEIT'
        | 'OTHER'
        | 'REMACT'
        | 'REMWIN'
        | 'STOP_EARN'
        | 'STOP_PCT'
      /**
       * @description The status of the award
       * @example IMMEDIATE
       * @enum {string}
       */
      sanctionStatus:
        | 'AS_AWARDED'
        | 'AWARD_RED'
        | 'IMMEDIATE'
        | 'PROSPECTIVE'
        | 'QUASHED'
        | 'REDAPP'
        | 'SUSPENDED'
        | 'SUSPEN_EXT'
        | 'SUSPEN_RED'
        | 'SUSP_PROSP'
      /**
       * @description Award comment
       * @example GUILTY
       */
      commentText?: string
      /**
       * Format: date
       * @description Award effective date
       */
      effectiveDate: string
      /**
       * @description optional compensation amount
       * @example 0.5
       */
      compensationAmount?: number
      /**
       * Format: int32
       * @description the duration  of the award, in days
       */
      sanctionDays?: number
      consecutiveCharge?: components['schemas']['AdjudicationChargeId']
    }
    UnquashHearingResultAwardRequest: {
      /**
       * @description Finding code
       * @example PROVED
       */
      findingCode: string
      awards: components['schemas']['UpdateHearingResultAwardRequest']
    }
    /** @description A list of Hearing result awards (aka punishment) to be created and updated */
    UpdateHearingResultAwardRequest: {
      /** @description a list of award requests to create */
      awardsToCreate: components['schemas']['HearingResultAwardRequest'][]
      /** @description a list of award requests to update */
      awardsToUpdate: components['schemas']['ExistingHearingResultAwardRequest'][]
    }
    /** @description Course schedule request */
    CourseScheduleRequest: {
      /**
       * Format: int64
       * @description The id of the course schedule if known
       * @example 13245
       */
      id?: number
      /**
       * Format: date
       * @description The date of the course schedule
       * @example 2023-04-03
       */
      date: string
      /**
       * Format: partial-time
       * @description The time of the course schedule
       * @example 10:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The time the course schedule ends
       * @example 11:00
       */
      endTime: string
      /**
       * @description Whether the course schedule has been cancelled
       * @example true
       */
      cancelled: boolean
    }
    /** @description Course activity creation request pay rates */
    PayRateRequest: {
      /**
       * @description The incentive level
       * @example BAS
       */
      incentiveLevel: string
      /**
       * @description The pay band (1 TO 10)
       * @example 4
       */
      payBand: string
      /**
       * @description The half day rate
       * @example 0.5
       */
      rate: number
    }
    /** @description Course activity creation request schedule rules */
    ScheduleRuleRequest: {
      /**
       * Format: partial-time
       * @description Schedule start time in 24 hour clock
       * @example 08:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description Schedule end time in 24 hour clock
       * @example 11:00
       */
      endTime: string
      /**
       * @description Scheduled on Monday
       * @example true
       */
      monday: boolean
      /**
       * @description Scheduled on Tuesday
       * @example true
       */
      tuesday: boolean
      /**
       * @description Scheduled on Wednesday
       * @example true
       */
      wednesday: boolean
      /**
       * @description Scheduled on Thursday
       * @example true
       */
      thursday: boolean
      /**
       * @description Scheduled on Friday
       * @example true
       */
      friday: boolean
      /**
       * @description Scheduled on Saturday
       * @example false
       */
      saturday: boolean
      /**
       * @description Scheduled on Sunday
       * @example false
       */
      sunday: boolean
    }
    /** @description Course activity update request */
    UpdateActivityRequest: {
      /**
       * Format: date
       * @description Activity start date
       * @example 2022-08-12
       */
      startDate: string
      /**
       * Format: date
       * @description Activity end date
       * @example 2022-08-12
       */
      endDate?: string
      /**
       * Format: int64
       * @description Room where the activity is to occur (from activity schedule)
       */
      internalLocationId?: number
      /**
       * Format: int32
       * @description Capacity of activity (from activity schedule)
       */
      capacity: number
      /** @description Pay rates */
      payRates: components['schemas']['PayRateRequest'][]
      /** @description Description from concatenated activity and activity schedule */
      description: string
      /** @description Minimum Incentive Level */
      minimumIncentiveLevelCode?: string
      /**
       * @description Half or Full day (H or F)
       * @example H
       * @enum {string}
       */
      payPerSession: 'F' | 'H'
      /** @description Schedule rules */
      scheduleRules: components['schemas']['ScheduleRuleRequest'][]
      /** @description Exclude bank holidays? */
      excludeBankHolidays: boolean
      /** @description Outside work? */
      outsideWork: boolean
      /** @description Program Service code (from activity category) */
      programCode: string
      /** @description Schedules */
      schedules: components['schemas']['CourseScheduleRequest'][]
    }
    /** @description Activity creation response */
    CreateActivityResponse: {
      /**
       * Format: int64
       * @description The created course activity id
       */
      courseActivityId: number
      /** @description The created course schedules */
      courseSchedules: components['schemas']['CreateScheduledInstanceResponse'][]
    }
    /** @description The created course schedules */
    CreateScheduledInstanceResponse: {
      /**
       * Format: int64
       * @description The created scheduled instance id
       */
      courseScheduleId: number
      /**
       * Format: date
       * @description The instance date
       */
      date: string
      /**
       * Format: partial-time
       * @description The instance start time
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The instance end time
       */
      endTime: string
    }
    /** @description Course schedule update update response */
    UpdateCourseScheduleResponse: {
      /**
       * Format: int64
       * @description The id of the course schedule
       * @example 123456
       */
      courseScheduleId: number
    }
    /** @description A session to exclude from the allocation during which period attendances will not be generated */
    AllocationExclusion: {
      /**
       * @description The day of the exclusion
       * @example MON
       * @enum {string}
       */
      day: 'MON' | 'TUE' | 'WED' | 'THU' | 'FRI' | 'SAT' | 'SUN'
      /**
       * @description The session the exclusion applies to (morning, afternoon or evening). Or null for the whole day.
       * @example AM
       * @enum {string}
       */
      slot?: 'AM' | 'PM' | 'ED'
    }
    /** @description Course activity create or update allocation request */
    UpsertAllocationRequest: {
      /**
       * Format: int64
       * @description Booking id of the prisoner
       * @example 1234567
       */
      bookingId: number
      /**
       * @description The prisoner's pay band
       * @example 2
       */
      payBandCode?: string
      /**
       * Format: date
       * @description Activity start date
       * @example 2022-08-12
       */
      startDate: string
      /**
       * Format: date
       * @description Activity end date
       * @example 2022-08-12
       */
      endDate?: string
      /**
       * @description Activity end reason (from domain PS_END_RSN)
       * @example REL
       */
      endReason?: string
      /** @description Activity end comment */
      endComment?: string
      /** @description Offender is suspended from Activity? */
      suspended?: boolean
      /** @description Activity suspended comment */
      suspendedComment?: string
      /**
       * @description Offender program status from domain OFF_PRG_STS
       * @example ALLOC
       */
      programStatusCode: string
      /** @description Sessions excluded from the allocation during which period attendances will not be generated */
      exclusions?: components['schemas']['AllocationExclusion'][]
    }
    /** @description OffenderProgramProfile create/update response */
    UpsertAllocationResponse: {
      /**
       * Format: int64
       * @description The created OffenderProgramProfile id
       * @example 12345678
       */
      offenderProgramReferenceId: number
      /** @description Whether or not the allocation was created */
      created: boolean
      /** @description Prison code */
      prisonId: string
    }
    /** @description End activities request */
    EndActivitiesRequest: {
      /**
       * @description Course activity ids
       * @example [
       *   1,
       *   2
       * ]
       */
      courseActivityIds: number[]
    }
    /** @description Visit creation request */
    CreateVisitRequest: {
      /**
       * @description Visit start date and time
       * @example 2021-07-05T10:35:17
       */
      startDateTime: string
      /**
       * @description Visit end time
       * @example 14:30
       */
      endTime: string
      /** @description Prison where the visit is to occur */
      prisonId: string
      /** @description Visitors */
      visitorPersonIds: number[]
      /**
       * @description Visit type, whether social or official
       * @enum {string}
       */
      visitType: 'SCON' | 'OFFI'
      /**
       * Format: date
       * @description Issue date
       */
      issueDate: string
      /** @description Comment to be added to visit */
      visitComment: string
      /** @description Comment to be added to visit order (if one is created) */
      visitOrderComment: string
      /** @description Name of the real world room where visit will take place */
      room: string
      /**
       * @description Whether visit is restricted to a closed session
       * @enum {string}
       */
      openClosedStatus: 'OPEN' | 'CLOSED'
    }
    /** @description Visit creation response */
    CreateVisitResponse: {
      /**
       * Format: int64
       * @description The created Nomis visit id
       */
      visitId: number
    }
    /** @description Sentence request */
    CreateSentenceRequest: {
      /** Format: date */
      startDate: string
      /** Format: date */
      endDate?: string
      status: string
      sentenceCategory: string
      sentenceCalcType: string
      sentenceLevel: string
      fine?: number
      sentenceTerm: components['schemas']['SentenceTermRequest']
      /** Format: int64 */
      caseId?: number
      offenderChargeIds: number[]
    }
    /** @description Sentence term request */
    SentenceTermRequest: {
      /** Format: date */
      startDate: string
      /** Format: date */
      endDate?: string
      /** Format: int32 */
      years?: number
      /** Format: int32 */
      months?: number
      /** Format: int32 */
      weeks?: number
      /** Format: int32 */
      days?: number
      /** Format: int32 */
      hours?: number
      sentenceTermType: string
      lifeSentenceFlag: boolean
    }
    /** @description Create sentence response */
    CreateSentenceResponse: {
      /** Format: int64 */
      sentenceSeq: number
      /** Format: int64 */
      termSeq: number
    }
    /** @description Court case create request */
    CreateCourtCaseRequest: {
      /** Format: date */
      startDate: string
      legalCaseType: string
      courtId: string
      status: string
      courtAppearance: components['schemas']['CourtAppearanceRequest']
    }
    /** @description Create adjustment response */
    CreateCourtAppearanceResponse: {
      /** Format: int64 */
      id: number
      courtEventChargesIds: components['schemas']['CreateCourtEventChargesResponse'][]
      /** Format: int64 */
      nextCourtAppearanceId?: number
    }
    /** @description Create court case response */
    CreateCourtCaseResponse: {
      /** Format: int64 */
      id: number
      courtAppearanceIds: components['schemas']['CreateCourtAppearanceResponse'][]
    }
    /** @description A response after an alert created in NOMIS */
    CreateAlertResponse: {
      /**
       * Format: int64
       * @description The prisoner's bookingId related to this alert
       */
      bookingId: number
      /**
       * Format: int64
       * @description The sequence primary key within this booking
       */
      alertSequence: number
      alertCode: components['schemas']['CodeDescription']
      type: components['schemas']['CodeDescription']
    }
    /** @description A request to create an alert in NOMIS */
    CreateAlertRequest: {
      /** @description The alert code */
      alertCode: string
      /**
       * Format: date
       * @description Date alert started
       */
      date: string
      /**
       * Format: date
       * @description Date alert expired
       */
      expiryDate?: string
      /** @description true if alert is active and has not expired */
      isActive: boolean
      /** @description Free format comment */
      comment?: string
      /**
       * @description Free format text of person or department that authorised the alert
       * @example security
       */
      authorisedBy?: string
      /** @description Username of person that created the record (might also be a system) */
      createUsername: string
    }
    AdjudicationCharge: {
      offence: components['schemas']['AdjudicationOffence']
      evidence?: string
      reportDetail?: string
      offenceId?: string
      /** Format: int32 */
      chargeSequence: number
    }
    /** @description Associated incident details */
    AdjudicationIncident: {
      /**
       * Format: int64
       * @description The adjudication incident Id, part of the composite key with adjudicationSequence
       */
      adjudicationIncidentId: number
      reportingStaff: components['schemas']['Staff']
      /**
       * Format: date
       * @description Date of the associated incident
       */
      incidentDate: string
      /**
       * Format: partial-time
       * @description Date and time of the associated incident
       */
      incidentTime: string
      /**
       * Format: date
       * @description Date when the associated incident was reported
       */
      reportedDate: string
      /**
       * Format: partial-time
       * @description Date and time when the associated incident was reported
       */
      reportedTime: string
      /** @description Username of person who created the record in NOMIS */
      createdByUsername: string
      /**
       * @description Date time when the record was created in NOMIS
       * @example 2021-07-05T10:35:17
       */
      createdDateTime: string
      internalLocation: components['schemas']['InternalLocation']
      incidentType: components['schemas']['CodeDescription']
      /** @description Incident details */
      details?: string
      prison: components['schemas']['CodeDescription']
      /** @description Prisoners that witnessed the incident. Rarely used in NOMIS */
      prisonerWitnesses: components['schemas']['Prisoner'][]
      /** @description Prisoners that were victims in the incident. Not often used in NOMIS */
      prisonerVictims: components['schemas']['Prisoner'][]
      /** @description Other suspects involved in the incident that may or may not have been placed on report */
      otherPrisonersInvolved: components['schemas']['Prisoner'][]
      /** @description The officer who reported the incident who may differ from the reporting officer. Often used in NOMIS */
      reportingOfficers: components['schemas']['Staff'][]
      /** @description Staff that witnessed the incident. Used in NOMIS in a small percentage of cases */
      staffWitnesses: components['schemas']['Staff'][]
      /** @description Staff that was a victim in the incident. Rarely used in NOMIS */
      staffVictims: components['schemas']['Staff'][]
      /** @description Other staff that was involved in the incident either using force or some other link. Used in NOMIS in a small percentage of cases */
      otherStaffInvolved: components['schemas']['Staff'][]
      /** @description The repairs required due to the damage */
      repairs: components['schemas']['Repair'][]
    }
    AdjudicationOffence: {
      code: string
      description: string
      type?: components['schemas']['CodeDescription']
      category?: components['schemas']['CodeDescription']
    }
    /** @description Adjudication Information */
    AdjudicationResponse: {
      /**
       * Format: int32
       * @description The adjudication/party sequence, part of the composite key with adjudicationIncidentId
       */
      adjudicationSequence: number
      /** @description The offender number, aka nomsId, prisonerId */
      offenderNo: string
      /**
       * Format: int64
       * @description The id of the booking associated with the adjudication
       */
      bookingId: number
      /**
       * Format: int64
       * @description The adjudication number (business key)
       */
      adjudicationNumber: number
      gender: components['schemas']['CodeDescription']
      currentPrison?: components['schemas']['CodeDescription']
      /**
       * Format: date
       * @description Date Prisoner was added to the adjudication ????
       */
      partyAddedDate: string
      /** @description Adjudication comments */
      comment?: string
      incident: components['schemas']['AdjudicationIncident']
      /** @description Charges associated with this adjudication */
      charges: components['schemas']['AdjudicationCharge'][]
      /** @description Investigator that gathers evidence. Used in NOMIS in a small percentage of cases */
      investigations: components['schemas']['Investigation'][]
      /** @description hearings associated with this adjudication */
      hearings: components['schemas']['Hearing'][]
    }
    /** @description hearings associated with this adjudication */
    Hearing: {
      /** Format: int64 */
      hearingId: number
      type?: components['schemas']['CodeDescription']
      /**
       * Format: date
       * @description Hearing scheduled date as set by DPS but not used by NOMIS or set in NOMIS
       */
      scheduleDate?: string
      /**
       * Format: partial-time
       * @description Hearing scheduled time as set by DPS but not used by NOMIS or set in NOMIS
       */
      scheduleTime?: string
      /**
       * Format: date
       * @description Hearing date
       */
      hearingDate?: string
      /**
       * Format: partial-time
       * @description Hearing time
       */
      hearingTime?: string
      comment?: string
      representativeText?: string
      hearingStaff?: components['schemas']['Staff']
      internalLocation?: components['schemas']['InternalLocation']
      eventStatus?: components['schemas']['CodeDescription']
      hearingResults: components['schemas']['HearingResult'][]
      /** Format: int64 */
      eventId?: number
      /**
       * @description Date time when the record was created the record in NOMIS
       * @example 2021-07-05T10:35:17
       */
      createdDateTime: string
      /** @description Username of person who created the record in NOMIS */
      createdByUsername: string
      /** @description List of hearing notifications */
      notifications: components['schemas']['HearingNotification'][]
    }
    /** @description List of hearing notifications */
    HearingNotification: {
      /**
       * Format: date
       * @description Hearing notification date
       */
      deliveryDate: string
      /**
       * Format: partial-time
       * @description Hearing notification time
       */
      deliveryTime: string
      /** @description Notification comment */
      comment?: string
      notifiedStaff: components['schemas']['Staff']
    }
    HearingResult: {
      pleaFindingType?: components['schemas']['CodeDescription']
      findingType?: components['schemas']['CodeDescription']
      charge: components['schemas']['AdjudicationCharge']
      offence: components['schemas']['AdjudicationOffence']
      resultAwards: components['schemas']['HearingResultAward'][]
      /**
       * @description Date time when the record was created the record in NOMIS
       * @example 2021-07-05T10:35:17
       */
      createdDateTime: string
      /** @description Username of person who created the record in NOMIS */
      createdByUsername: string
    }
    HearingResultAward: {
      /**
       * Format: int32
       * @description Sequence of this sanction for this prisoner's booking
       */
      sequence: number
      sanctionType?: components['schemas']['CodeDescription']
      sanctionStatus?: components['schemas']['CodeDescription']
      comment?: string
      /** Format: date */
      effectiveDate: string
      /** Format: date */
      statusDate?: string
      /** Format: int32 */
      sanctionDays?: number
      /** Format: int32 */
      sanctionMonths?: number
      compensationAmount?: number
      consecutiveAward?: components['schemas']['HearingResultAward']
      /** Format: int32 */
      chargeSequence: number
      /** Format: int64 */
      adjudicationNumber: number
      /** @description Username of person who created the record in NOMIS */
      createdByUsername: string
      /**
       * @description Date time when the record was created the record in NOMIS
       * @example 2021-07-05T10:35:17
       */
      createdDateTime: string
    }
    InternalLocation: {
      /**
       * Format: int64
       * @description NOMIS location id
       */
      locationId: number
      /** @description NOMIS location code */
      code: string
      /** @description NOMIS location description */
      description: string
    }
    /** @description Investigator that gathers evidence. Used in NOMIS in a small percentage of cases */
    Investigation: {
      investigator: components['schemas']['Staff']
      comment?: string
      /** Format: date */
      dateAssigned: string
      evidence: components['schemas']['Evidence'][]
    }
    /** @description Other suspects involved in the incident that may or may not have been placed on report */
    Prisoner: {
      /** @description The offender number, aka nomsId, prisonerId */
      offenderNo: string
      /** @description First name of prisoner */
      firstName?: string
      /** @description Last name of prisoner */
      lastName: string
      /** @description Username of person who created the record in NOMIS where this prisoner is used */
      createdByUsername: string
      /**
       * Format: date
       * @description date added in NOMIS to the adjudication incident
       */
      dateAddedToIncident: string
      /** @description comment about why they were added to the adjudication incident */
      comment?: string
    }
    /** @description Staff notified */
    Staff: {
      /** @description Username of first account related to staff */
      username: string
      /**
       * Format: int64
       * @description NOMIS staff id
       */
      staffId: number
      /** @description First name of staff member */
      firstName: string
      /** @description Last name of staff member */
      lastName: string
      /** @description Username of person who created the record in NOMIS where this staff is used */
      createdByUsername?: string
      /**
       * Format: date
       * @description date added in NOMIS to the adjudication incident
       */
      dateAddedToIncident?: string
      /** @description comment about why they were added to the adjudication incident */
      comment?: string
    }
    /** @description Charges associated with this adjudication */
    ChargeToCreate: {
      /**
       * @description Offence code they are charged with
       * @example 51:1N
       */
      offenceCode: string
    }
    /** @description Core Adjudication to be created */
    CreateAdjudicationRequest: {
      incident: components['schemas']['IncidentToCreate']
      /** @description Charges associated with this adjudication */
      charges: components['schemas']['ChargeToCreate'][]
      /** @description The evidence records as part of the incident */
      evidence: components['schemas']['EvidenceToCreate'][]
    }
    /** @description The evidence records as part of the incident */
    EvidenceToCreate: {
      /**
       * @description Type of evidence
       * @example PHOTO
       * @enum {string}
       */
      typeCode: 'BEHAV' | 'DRUGTEST' | 'EVI_BAG' | 'OTHER' | 'PHOTO' | 'VICTIM' | 'WEAP' | 'WITNESS'
      /**
       * @description Description of evidence
       * @example Image of damages
       */
      detail: string
    }
    /** @description Associated incident details */
    IncidentToCreate: {
      /**
       * @description Reporting staff member username
       * @example JANE.BROOKES
       */
      reportingStaffUsername: string
      /**
       * Format: date
       * @description Date of the associated incident
       */
      incidentDate: string
      /**
       * Format: partial-time
       * @description Date and time of the associated incident
       * @example 12:00:00
       */
      incidentTime: string
      /**
       * Format: date
       * @description Date when the associated incident was reported
       */
      reportedDate: string
      /**
       * Format: partial-time
       * @description Date and time when the associated incident was reported
       * @example 12:00:00
       */
      reportedTime: string
      /**
       * Format: int64
       * @description location id where incident took place
       * @example 123456
       */
      internalLocationId: number
      /**
       * @description Incident details
       * @example The details of the incident are as follows
       */
      details: string
      /**
       * @description Prison code where the incident took place
       * @example MDI
       */
      prisonId: string
      /**
       * @description Prisoners numbers that witnessed the incident
       * @example [
       *   "A1234AA",
       *   "A1234AB"
       * ]
       */
      prisonerVictimsOffenderNumbers: string[]
      /**
       * @description Staff usernames that witnessed the incident
       * @example [
       *   "A.BARNES",
       *   "M.ABDULLAH"
       * ]
       */
      staffWitnessesUsernames: string[]
      /**
       * @description Staff usernames that were victims in the incident
       * @example [
       *   "A.BARNES",
       *   "M.ABDULLAH"
       * ]
       */
      staffVictimsUsernames: string[]
      /** @description The repairs required due to the damage */
      repairs: components['schemas']['RepairToCreate'][]
    }
    /** @description The repairs required due to the damage */
    RepairToCreate: {
      /**
       * @description Type of repairs
       * @example PLUM
       * @enum {string}
       */
      typeCode: 'CLEA' | 'DECO' | 'ELEC' | 'FABR' | 'LOCK' | 'PLUM'
      /**
       * @description Optional description of repairs
       * @example Damage to the plumbing
       */
      comment?: string
      /**
       * @description Optional cost of repairs
       * @example 62.12
       */
      cost?: number
    }
    /** @description Details of a prisoner booking */
    PrisonerDetails: {
      /**
       * @description The NOMIS reference
       * @example A1234AA
       */
      offenderNo: string
      /**
       * Format: int64
       * @description The NOMIS booking ID
       * @example 1234567
       */
      bookingId: number
      /**
       * @description The prisoner's current location
       * @example BXI, OUT
       */
      location: string
    }
    /** @description Sentence adjustment create request */
    CreateSentenceAdjustmentRequest: {
      /**
       * @description NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS
       * @example RX
       * @enum {string}
       */
      adjustmentTypeCode: 'RSR' | 'UR' | 'S240A' | 'RST' | 'RX'
      /**
       * Format: date
       * @description Date adjustment is applied
       */
      adjustmentDate?: string
      /**
       * Format: date
       * @description Start of the period which contributed to the adjustment
       */
      adjustmentFromDate?: string
      /**
       * Format: int64
       * @description Number of days for the adjustment
       */
      adjustmentDays: number
      /** @description Comment */
      comment?: string
      /**
       * @description Flag to indicate if the adjustment is being applied
       * @default true
       */
      active?: boolean
    }
    /** @description Create adjustment response */
    CreateAdjustmentResponse: {
      /** Format: int64 */
      id: number
    }
    /** @description Incentive creation response */
    CreateIncentiveResponse: {
      /**
       * Format: int64
       * @description The created Nomis booking and sequence
       */
      bookingId: number
      /** Format: int64 */
      sequence: number
    }
    /** @description Key date adjustment create request */
    CreateKeyDateAdjustmentRequest: {
      /**
       * @description NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS
       * @example ADA
       * @enum {string}
       */
      adjustmentTypeCode: 'LAL' | 'UAL' | 'RADA' | 'ADA' | 'SREM'
      /**
       * Format: date
       * @description Date adjustment is applied
       */
      adjustmentDate?: string
      /**
       * Format: date
       * @description Start of the period which contributed to the adjustment
       */
      adjustmentFromDate: string
      /**
       * Format: int64
       * @description Number of days for the adjustment
       */
      adjustmentDays: number
      /** @description Comment */
      comment?: string
      /**
       * @description Flag to indicate if the adjustment is being applied
       * @default true
       */
      active?: boolean
    }
    /** @description Offender individual schedule creation request */
    CreateNonAssociationRequest: {
      /**
       * @description Noms id of the prisoner
       * @example A1234DF
       */
      offenderNo: string
      /**
       * @description Noms id of the other prisoner
       * @example A1234EG
       */
      nsOffenderNo: string
      /**
       * @description Reason code of the first prisoner, domain NON_ASSO_RSN
       * @example VIC
       */
      reason: string
      /**
       * @description Reason code of the other prisoner, domain NON_ASSO_RSN
       * @example PER
       */
      recipReason: string
      /**
       * @description Type code, domain NON_ASSO_TYP
       * @example WING
       */
      type: string
      /**
       * @description Free text name of staff member
       * @example Joe Bloggs
       */
      authorisedBy?: string
      /**
       * Format: date
       * @description Effective date
       * @example 2022-08-12
       */
      effectiveDate: string
      /**
       * @description Comment
       * @example Some comment
       */
      comment?: string
    }
    /** @description Non-association creation response */
    CreateNonAssociationResponse: {
      /**
       * Format: int32
       * @description The created offender_na_details type sequence number
       */
      typeSequence: number
    }
    /** @description Location creation request */
    CreateLocationRequest: {
      /**
       * @description Whether certified for use
       * @default false
       * @example true
       */
      certified?: boolean
      /**
       * @description Whether a CELL, VISIT room, Kitchen etc (Ref type ILOC_TYPE)
       * @enum {string}
       */
      locationType:
        | 'ADJU'
        | 'ADMI'
        | 'APP'
        | 'AREA'
        | 'ASSO'
        | 'BOOT'
        | 'BOX'
        | 'CELL'
        | 'CLAS'
        | 'EXER'
        | 'EXTE'
        | 'FAIT'
        | 'GROU'
        | 'HCEL'
        | 'HOLD'
        | 'IGRO'
        | 'INSI'
        | 'INTE'
        | 'LAND'
        | 'LOCA'
        | 'MEDI'
        | 'MOVE'
        | 'OFFI'
        | 'OUTS'
        | 'POSI'
        | 'RESI'
        | 'ROOM'
        | 'RTU'
        | 'SHEL'
        | 'SPOR'
        | 'SPUR'
        | 'STOR'
        | 'TABL'
        | 'TRAI'
        | 'TRRM'
        | 'VIDE'
        | 'VISIT'
        | 'WING'
        | 'WORK'
      /**
       * @description Prison code of the location
       * @example LEI
       */
      prisonId: string
      /**
       * Format: int64
       * @description The containing location id
       * @example 1234567
       */
      parentLocationId?: number
      /**
       * Format: int32
       * @description Max capacity subject to resources
       * @example 43
       */
      operationalCapacity?: number
      /**
       * Format: int32
       * @description Certified Normal Accommodation capacity
       * @example 44
       */
      cnaCapacity?: number
      /**
       * @description Description of location
       * @example Some description
       */
      userDescription?: string
      /**
       * @description Usually a number for a cell, a letter for a wing or landing. Used to calculate description
       * @example 005
       */
      locationCode: string
      /**
       * @description Full code hierarchy
       * @example MDI-C-3-015
       */
      description: string
      /**
       * @description Housing Unit type, Reference code (HOU_UN_TYPE)
       * @enum {string}
       */
      unitType?: 'HC' | 'HOLC' | 'NA' | 'OU' | 'REC' | 'SEG' | 'SPLC'
      /**
       * Format: int32
       * @description Physical maximum capacity
       * @example 45
       */
      capacity?: number
      /**
       * Format: int32
       * @description Defines the order within parent location
       */
      listSequence?: number
      /**
       * @description Comment
       * @example Some comment
       */
      comment?: string
      /** @description Profiles */
      profiles?: components['schemas']['ProfileRequest'][]
      /** @description Usages */
      usages?: components['schemas']['UsageRequest'][]
    }
    /** @description Location creation response */
    LocationIdResponse: {
      /**
       * Format: int64
       * @description The created agency_internal_locations location id
       */
      locationId: number
    }
    ReorderRequest: {
      codeList: string[]
    }
    /** @description Offender individual schedule creation request */
    CreateAppointmentRequest: {
      /**
       * Format: int64
       * @description Booking id of the prisoner
       * @example 1234567
       */
      bookingId: number
      /**
       * Format: date
       * @description Appointment date
       * @example 2022-08-12
       */
      eventDate: string
      /**
       * Format: partial-time
       * @description Appointment start time
       * @example 09:45
       */
      startTime: string
      /**
       * Format: partial-time
       * @description Activity end time
       * @example 15:20
       */
      endTime: string
      /**
       * Format: int64
       * @description Room where the appointment is to occur (in cell if null)
       * @example 112233
       */
      internalLocationId?: number
      /**
       * @description Appointment event sub-type
       * @example MEOT
       */
      eventSubType: string
      /**
       * @description Comment
       * @example Some comment
       */
      comment?: string
    }
    /** @description Offender individual schedule creation response */
    CreateAppointmentResponse: {
      /**
       * Format: int64
       * @description The created offender_ind_schedules id
       */
      eventId: number
    }
    /** @description Provides the generated hearing ID after creation */
    CreateHearingResponse: {
      /**
       * Format: int64
       * @description The Id for the created Hearing
       */
      hearingId: number
    }
    /** @description Hearing to be created */
    CreateHearingRequest: {
      /**
       * @description Type of hearing
       * @example GOV
       */
      hearingType: string
      /**
       * Format: date
       * @description Hearing date
       */
      hearingDate: string
      /**
       * Format: partial-time
       * @description Hearing time
       */
      hearingTime: string
      /** @description agency id of hearing */
      agencyId: string
      /**
       * Format: int64
       * @description location id for the hearing
       * @example 123456
       */
      internalLocationId: number
    }
    /** @description Provides the generated hearing result composite ID after creation */
    CreateHearingResultResponse: {
      /** Format: int64 */
      hearingId: number
      /** Format: int32 */
      resultSequence: number
    }
    /** @description Hearing result to be created */
    CreateHearingResultRequest: {
      /**
       * @description adjudicator username for the hearing record
       * @example ASMITH_GEN
       */
      adjudicatorUsername?: string
      /**
       * @description The offender's plea code on this charge
       * @example NOT_GUILTY
       */
      pleaFindingCode: string
      /**
       * @description Finding code
       * @example GUILTY
       */
      findingCode: string
    }
    /** @description A list of Hearing result awards created (aka punishment) */
    CreateHearingResultAwardResponses: {
      /** @description an ordered list of award response, the order matching the request order */
      awardsCreated: components['schemas']['HearingResultAwardResponse'][]
    }
    /** @description A list of Hearing result awards (aka punishment) to be created */
    CreateHearingResultAwardRequest: {
      /** @description a list of award requests */
      awards: components['schemas']['HearingResultAwardRequest'][]
    }
    /** @description Course activity creation request */
    CreateActivityRequest: {
      /** @description Code generated from the activity and schedule ids and mapped */
      code: string
      /**
       * Format: date
       * @description Activity start date
       * @example 2022-08-12
       */
      startDate: string
      /**
       * Format: date
       * @description Activity end date
       * @example 2022-08-12
       */
      endDate?: string
      /** @description Prison where the activity is to occur */
      prisonId: string
      /**
       * Format: int64
       * @description Room where the activity is to occur (from activity schedule)
       */
      internalLocationId?: number
      /**
       * Format: int32
       * @description Capacity of activity (from activity schedule)
       */
      capacity: number
      /** @description Pay rates */
      payRates: components['schemas']['PayRateRequest'][]
      /** @description Description from concatenated activity and activity schedule */
      description: string
      /** @description Minimum Incentive Level */
      minimumIncentiveLevelCode?: string
      /** @description Program Service code (from activity category) */
      programCode: string
      /**
       * @description Half or Full day (H or F)
       * @example H
       * @enum {string}
       */
      payPerSession: 'F' | 'H'
      /** @description Schedules */
      schedules: components['schemas']['CourseScheduleRequest'][]
      /** @description Schedule rules */
      scheduleRules: components['schemas']['ScheduleRuleRequest'][]
      /** @description Exclude bank holidays? */
      excludeBankHolidays: boolean
      /** @description Outside work? */
      outsideWork: boolean
    }
    /** @description the lead visitor */
    LeadVisitor: {
      /**
       * Format: int64
       * @description visitor NOMIS person Id
       */
      personId: number
      /** @description full name of visitor */
      fullName: string
      /** @description Ordered list of telephone numbers for contact with latest first */
      telephones: string[]
    }
    /** @description Visit information */
    VisitResponse: {
      /**
       * Format: int64
       * @description The visit id
       */
      visitId: number
      /** @description The offender number, aka nomsId, prisonerId */
      offenderNo: string
      /**
       * @description Visit start date and time
       * @example 2021-07-05T10:35:17
       */
      startDateTime: string
      /**
       * @description Visit end date and time
       * @example 2021-07-05T10:35:17
       */
      endDateTime: string
      /** @description Prison where the visit is to occur */
      prisonId: string
      /** @description Visitors */
      visitors: components['schemas']['Visitor'][]
      leadVisitor?: components['schemas']['LeadVisitor']
      visitType: components['schemas']['CodeDescription']
      visitStatus: components['schemas']['CodeDescription']
      visitOutcome: components['schemas']['CodeDescription']
      agencyInternalLocation: components['schemas']['CodeDescription']
      /** @description Visit comments */
      commentText?: string
      /** @description Visitor concerns text */
      visitorConcernText?: string
      /**
       * @description date and time of creation
       * @example 2021-07-05T10:35:17
       */
      whenCreated: string
      /**
       * @description date and time of last update
       * @example 2021-07-05T10:35:17
       */
      whenUpdated?: string
      /** @description User id for visit creation */
      createUserId: string
      /** @description User id for last visit update */
      modifyUserId?: string
    }
    /** @description Visitors */
    Visitor: {
      /**
       * Format: int64
       * @description visitor NOMIS person Id
       */
      personId: number
      /** @description Indicates lead visitor for the visit */
      leadVisitor: boolean
    }
    Pageable: {
      /** Format: int32 */
      page?: number
      /** Format: int32 */
      size?: number
      sort?: string[]
    }
    /** @description Visit id */
    VisitRoomCountResponse: {
      /** @description The internal location description */
      agencyInternalLocationDescription: string
      /**
       * Format: int64
       * @description The room usage count
       */
      count: number
      /** @description The prison id */
      prisonId: string
    }
    PageVisitIdResponse: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['VisitIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject'][]
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    PageableObject: {
      /** Format: int64 */
      offset?: number
      sort?: components['schemas']['SortObject'][]
      /** Format: int32 */
      pageSize?: number
      /** Format: int32 */
      pageNumber?: number
      paged?: boolean
      unpaged?: boolean
    }
    SortObject: {
      direction?: string
      nullHandling?: string
      ascending?: boolean
      property?: string
      ignoreCase?: boolean
    }
    /** @description Visit id */
    VisitIdResponse: {
      /**
       * Format: int64
       * @description The visit id
       */
      visitId: number
    }
    /** @description A prison */
    PrisonDetails: {
      /**
       * @description The prison code
       * @example BXI
       */
      prisonId: string
      /**
       * @description The prison name
       * @example Brixton
       */
      name: string
    }
    /** @description Sentence adjustment */
    SentenceAdjustmentResponse: {
      /**
       * Format: int64
       * @description The sentence adjustment id
       */
      id: number
      /**
       * Format: int64
       * @description The booking id
       */
      bookingId: number
      /** @description Indicates whether for this booking the prisoner has been released */
      hasBeenReleased: boolean
      /** @description Current prison or OUT */
      prisonId: string
      /** @description The offender number, aka nomsId, prisonerId */
      offenderNo: string
      /**
       * Format: int64
       * @description The sequence of the sentence within this booking
       */
      sentenceSequence: number
      adjustmentType: components['schemas']['SentencingAdjustmentType']
      /**
       * Format: date
       * @description Date adjustment is applied
       */
      adjustmentDate?: string
      /**
       * Format: date
       * @description Start of the period which contributed to the adjustment
       */
      adjustmentFromDate?: string
      /**
       * Format: date
       * @description End of the period which contributed to the adjustment
       */
      adjustmentToDate?: string
      /**
       * Format: int64
       * @description Number of days for the adjustment
       */
      adjustmentDays: number
      /** @description Comment */
      comment?: string
      /** @description Flag to indicate if the adjustment is being applied */
      active: boolean
      /** @description Flag to indicate the adjustment is hidden from end users. This is true when it was created as part of a key date adjustment */
      hiddenFromUsers: boolean
    }
    /** @description Adjustment type */
    SentencingAdjustmentType: {
      /**
       * @description code
       * @example RX
       */
      code: string
      /**
       * @description description
       * @example Remand
       */
      description: string
    }
    /** @description List of Answers to this question */
    AnswerResponse: {
      /**
       * Format: int64
       * @description The answer id
       */
      id: number
      /** @description The answer text */
      answer: string
      /**
       * Format: int32
       * @description The answer id used to set the listSequence values
       * @example 1
       */
      answerSequence: number
      /**
       * Format: int32
       * @description The order of the answers
       * @example 1
       */
      listSequence: number
      /**
       * @description If the answer is active
       * @example true
       */
      active: boolean
      /**
       * Format: date
       * @description The date the answer is no longer used
       */
      expiryDate?: string
      nextQuestion?: components['schemas']['NextQuestionResponse']
      /**
       * @description If the answer should include a date
       * @example true
       */
      dateRequired: boolean
      /**
       * @description If the answer should include a comment
       * @example true
       */
      commentRequired: boolean
    }
    /** @description Question to be asked following this answer */
    NextQuestionResponse: {
      /**
       * Format: int64
       * @description The question id
       */
      id: number
      /** @description The question text */
      question: string
    }
    /** @description List of Questions (and associated Answers) for this Questionnaire */
    QuestionResponse: {
      /**
       * Format: int64
       * @description The question id
       */
      id: number
      /** @description The question text */
      question: string
      /** @description List of Answers to this question */
      answers: components['schemas']['AnswerResponse'][]
      /**
       * @description If the question is active
       * @example true
       */
      active: boolean
      /**
       * Format: date
       * @description The date the question is no longer used
       */
      expiryDate?: string
      /**
       * @description If the question has multiple answers
       * @example true
       */
      multipleAnswers: boolean
      /**
       * Format: int32
       * @description The question id used to set the listSequence values
       * @example 1
       */
      questionSequence: number
      /**
       * Format: int32
       * @description The order of the questions
       * @example 1
       */
      listSequence: number
    }
    /** @description Questionnaire */
    QuestionnaireResponse: {
      /**
       * Format: int64
       * @description The unique identifier of the questionnaire
       */
      id: number
      /**
       * @description A description of the questionnaire
       * @example Escape from Establishment
       */
      description?: string
      /**
       * @description Code to identify this questionnaire
       * @example ESCAPE_EST
       */
      code: string
      /**
       * @description If the questionnaire is active
       * @example true
       */
      active: boolean
      /**
       * Format: int32
       * @description Sequence value of the questionnaires
       * @example 1
       */
      listSequence: number
      /** @description List of Questions (and associated Answers) for this Questionnaire */
      questions: components['schemas']['QuestionResponse'][]
      /** @description List of Roles allowed for an offender's participation in an incident */
      offenderRoles: string[]
      /**
       * Format: date
       * @description The date the questionnaire is no longer used
       */
      expiryDate?: string
      /**
       * @description Questionnaire created date
       * @example 2021-07-05T10:35:17
       */
      createdDate: string
      /** @description Questionnaire created by */
      createdBy: string
      /**
       * @description Questionnaire modified date
       * @example 2021-07-05T10:35:17
       */
      modifiedDate?: string
      /** @description Questionnaire modified by */
      modifiedBy?: string
    }
    PageQuestionnaireIdResponse: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['QuestionnaireIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject'][]
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Questionnaire id */
    QuestionnaireIdResponse: {
      /**
       * Format: int64
       * @description The questionnaire id
       */
      questionnaireId: number
    }
    /** @description An incentive levels */
    IncentiveLevel: {
      /**
       * @description The incentive level code
       * @example STD
       */
      code: string
      /**
       * @description The incentive level description
       * @example Standard
       */
      description: string
    }
    /** @description Offence */
    OffenceResponse: {
      offenceCode: string
      statuteCode: string
      description: string
    }
    /** @description Offender Charge */
    OffenderChargeResponse: {
      /** Format: int64 */
      id: number
      offence: components['schemas']['OffenceResponse']
      /** Format: int32 */
      offencesCount?: number
      /** Format: date */
      offenceDate?: string
      /** Format: date */
      offenceEndDate?: string
      plea?: components['schemas']['CodeDescription']
      propertyValue?: number
      totalPropertyValue?: number
      cjitCode1?: string
      cjitCode2?: string
      cjitCode3?: string
      chargeStatus?: components['schemas']['CodeDescription']
      resultCode1?: components['schemas']['CodeDescription']
      resultCode2?: components['schemas']['CodeDescription']
      resultCode1Indicator?: string
      resultCode2Indicator?: string
      mostSeriousFlag: boolean
      /** Format: int32 */
      lidsOffenceNumber?: number
    }
    /** @description Court Case */
    CourtCaseResponse: {
      /** Format: int64 */
      id: number
      offenderNo: string
      /** Format: int64 */
      bookingId: number
      caseInfoNumber?: string
      /** Format: int32 */
      caseSequence: number
      caseStatus: components['schemas']['CodeDescription']
      legalCaseType: components['schemas']['CodeDescription']
      /** Format: date */
      beginDate?: string
      courtId: string
      /** Format: int64 */
      combinedCaseId?: number
      /** Format: int64 */
      statusUpdateStaffId?: number
      /** Format: date */
      statusUpdateDate?: string
      statusUpdateComment?: string
      statusUpdateReason?: string
      /** Format: int32 */
      lidsCaseId?: number
      /** Format: int32 */
      lidsCombinedCaseId?: number
      /** Format: int32 */
      lidsCaseNumber: number
      /** @example 2021-07-05T10:35:17 */
      createdDateTime: string
      createdByUsername: string
      courtEvents: components['schemas']['CourtEventResponse'][]
      offenderCharges: components['schemas']['OffenderChargeResponse'][]
    }
    /** @description Court Event Charge */
    CourtEventChargeResponse: {
      /** Format: int64 */
      eventId: number
      offenderCharge: components['schemas']['OffenderChargeResponse']
      /** Format: int32 */
      offencesCount?: number
      /** Format: date */
      offenceDate?: string
      /** Format: date */
      offenceEndDate?: string
      plea?: components['schemas']['CodeDescription']
      propertyValue?: number
      totalPropertyValue?: number
      cjitCode1?: string
      cjitCode2?: string
      cjitCode3?: string
      resultCode1?: components['schemas']['CodeDescription']
      resultCode2?: components['schemas']['CodeDescription']
      resultCode1Indicator?: string
      resultCode2Indicator?: string
      mostSeriousFlag: boolean
    }
    /** @description Court Event */
    CourtEventResponse: {
      /** Format: int64 */
      id: number
      /** Format: int64 */
      caseId?: number
      offenderNo: string
      /** @example 2021-07-05T10:35:17 */
      eventDateTime: string
      courtEventType: components['schemas']['CodeDescription']
      eventStatus: components['schemas']['CodeDescription']
      directionCode?: components['schemas']['CodeDescription']
      judgeName?: string
      courtId: string
      outcomeReasonCode?: components['schemas']['CodeDescription']
      commentText?: string
      orderRequestedFlag?: boolean
      holdFlag?: boolean
      nextEventRequestFlag?: boolean
      /** @example 2021-07-05T10:35:17 */
      nextEventDateTime?: string
      /** @example 2021-07-05T10:35:17 */
      createdDateTime: string
      createdByUsername: string
      courtEventCharges: components['schemas']['CourtEventChargeResponse'][]
      courtOrders: components['schemas']['CourtOrderResponse'][]
    }
    /** @description Court Order */
    CourtOrderResponse: {
      /** Format: int64 */
      id: number
      /** Format: date */
      courtDate: string
      issuingCourt: string
      courtInfoId?: string
      orderType: string
      orderStatus: string
      /** Format: date */
      dueDate?: string
      /** Format: date */
      requestDate?: string
      seriousnessLevel?: components['schemas']['CodeDescription']
      commentText?: string
      nonReportFlag?: boolean
      sentencePurposes: components['schemas']['SentencePurposeResponse'][]
    }
    /** @description Sentence Purpose */
    SentencePurposeResponse: {
      /** Format: int64 */
      orderId: number
      orderPartyCode: string
      purposeCode: string
    }
    /** @description Details of a prisoner merge */
    MergeDetail: {
      /**
       * @description The NOMIS reference of the record that was merged to and was then removed
       * @example A1234AA
       */
      deletedOffenderNo: string
      /**
       * Format: int64
       * @description The booking that was merged to and which then became active
       * @example 12345678
       */
      activeBookingId: number
      /**
       * @description The NOMIS reference of the record that was merged from and was retained
       * @example A1234AA
       */
      retainedOffenderNo: string
      /**
       * Format: int64
       * @description The booking that was merged from and was retained as inactive
       * @example 12345678
       */
      previousBookingId: number
      /**
       * @description When the merge happened
       * @example 2021-07-05T10:35:17
       */
      requestDateTime: string
    }
    /** @description ID of previous booking */
    PreviousBookingId: {
      /**
       * Format: int64
       * @description The NOMIS booking ID
       * @example 1234567
       */
      bookingId: number
      /**
       * Format: int64
       * @description The NOMIS booking sequence
       * @example 3
       */
      bookingSequence: number
    }
    /** @description The list of unique alerts held against a prisoner */
    PrisonerAlertsResponse: {
      latestBookingAlerts: components['schemas']['AlertResponse'][]
      previousBookingsAlerts: components['schemas']['AlertResponse'][]
    }
    PagePrisonerId: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['PrisonerId'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject'][]
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Prisoner identifier */
    PrisonerId: {
      /**
       * Format: int64
       * @description Latest booking id
       * @example 12345
       */
      bookingId: number
      /**
       * @description The NOMIS reference AKA prisoner number
       * @example A1234AA
       */
      offenderNo: string
      /**
       * @description The prisoner's current status
       * @example ACTIVE IN
       */
      status: string
    }
    /** @description Offender Sentence */
    SentenceResponse: {
      /** Format: int64 */
      bookingId: number
      /** Format: int64 */
      sentenceSeq: number
      status: string
      calculationType: string
      category: components['schemas']['CodeDescription']
      /** Format: date */
      startDate: string
      courtOrder?: components['schemas']['CourtOrderResponse']
      /** Format: int32 */
      consecSequence?: number
      /** Format: date */
      endDate?: string
      commentText?: string
      /** Format: int32 */
      absenceCount?: number
      /** Format: int64 */
      caseId?: number
      /** Format: date */
      etdCalculatedDate?: string
      /** Format: date */
      mtdCalculatedDate?: string
      /** Format: date */
      ltdCalculatedDate?: string
      /** Format: date */
      ardCalculatedDate?: string
      /** Format: date */
      crdCalculatedDate?: string
      /** Format: date */
      pedCalculatedDate?: string
      /** Format: date */
      npdCalculatedDate?: string
      /** Format: date */
      ledCalculatedDate?: string
      /** Format: date */
      sedCalculatedDate?: string
      /** Format: date */
      prrdCalculatedDate?: string
      /** Format: date */
      tariffCalculatedDate?: string
      /** Format: date */
      dprrdCalculatedDate?: string
      /** Format: date */
      tusedCalculatedDate?: string
      /** Format: int32 */
      aggSentenceSequence?: number
      /** Format: int32 */
      aggAdjustDays?: number
      sentenceLevel?: string
      /** Format: int32 */
      extendedDays?: number
      /** Format: int32 */
      counts?: number
      statusUpdateReason?: string
      statusUpdateComment?: string
      /** Format: date */
      statusUpdateDate?: string
      /** Format: int64 */
      statusUpdateStaffId?: number
      fineAmount?: number
      /** Format: date */
      dischargeDate?: string
      /** Format: int64 */
      nomSentDetailRef?: number
      /** Format: int64 */
      nomConsToSentDetailRef?: number
      /** Format: int64 */
      nomConsFromSentDetailRef?: number
      /** Format: int64 */
      nomConsWithSentDetailRef?: number
      /** Format: int32 */
      lineSequence?: number
      hdcExclusionFlag?: boolean
      hdcExclusionReason?: string
      cjaAct?: string
      /** Format: date */
      sled2Calc?: string
      /** Format: date */
      startDate2Calc?: string
      /** @example 2021-07-05T10:35:17 */
      createdDateTime: string
      createdByUsername: string
      sentenceTerms: components['schemas']['SentenceTermResponse'][]
      offenderCharges: components['schemas']['OffenderChargeResponse'][]
    }
    /** @description Sentence Term */
    SentenceTermResponse: {
      /** Format: int64 */
      termSequence: number
      sentenceTermType?: components['schemas']['CodeDescription']
      /** Format: int32 */
      years?: number
      /** Format: int32 */
      months?: number
      /** Format: int32 */
      weeks?: number
      /** Format: int32 */
      days?: number
      /** Format: int32 */
      hours?: number
      /** Format: date */
      startDate: string
      /** Format: date */
      endDate?: string
      lifeSentenceFlag?: boolean
    }
    /** @description Key date adjustment */
    KeyDateAdjustmentResponse: {
      /**
       * Format: int64
       * @description The key date adjustment id
       */
      id: number
      /**
       * Format: int64
       * @description The booking id
       */
      bookingId: number
      /** @description Indicates whether for this booking the prisoner has been released */
      hasBeenReleased: boolean
      /** @description Current prison or OUT */
      prisonId: string
      /** @description The offender number, aka nomsId, prisonerId */
      offenderNo: string
      adjustmentType: components['schemas']['SentencingAdjustmentType']
      /**
       * Format: date
       * @description Date adjustment is applied
       */
      adjustmentDate?: string
      /**
       * Format: date
       * @description Start of the period which contributed to the adjustment
       */
      adjustmentFromDate?: string
      /**
       * Format: date
       * @description End of the period which contributed to the adjustment
       */
      adjustmentToDate?: string
      /**
       * Format: int64
       * @description Number of days for the adjustment
       */
      adjustmentDays: number
      /** @description Comment */
      comment?: string
      /** @description Flag to indicate if the adjustment is being applied */
      active: boolean
    }
    /** @description Sentencing adjustment */
    SentencingAdjustmentsResponse: {
      keyDateAdjustments: components['schemas']['KeyDateAdjustmentResponse'][]
      sentenceAdjustments: components['schemas']['SentenceAdjustmentResponse'][]
    }
    /** @description ADA summary */
    ADASummary: {
      /**
       * Format: int64
       * @description Parent adjudication number that lead to this award
       */
      adjudicationNumber: number
      /**
       * Format: int32
       * @description Key to this sanction
       */
      sanctionSequence: number
      /**
       * Format: int32
       * @description Number of days awards
       */
      days: number
      /**
       * Format: date
       * @description Date of award
       */
      effectiveDate: string
      sanctionStatus: components['schemas']['CodeDescription']
    }
    /** @description Summary of adjudication for a booking */
    AdjudicationADAAwardSummaryResponse: {
      /**
       * Format: int64
       * @description Booking id for the summary
       */
      bookingId: number
      /** @description Prisoner number related to booking */
      offenderNo: string
      /** @description List of ADAs awarded during this booking period */
      adaSummaries: components['schemas']['ADASummary'][]
    }
    /** @description The list of alerts held against a booking */
    BookingAlertsResponse: {
      alerts: components['schemas']['AlertResponse'][]
    }
    /** @description Appointment information */
    NonAssociationResponse: {
      /**
       * @description Noms id of the prisoner
       * @example A1234DF
       */
      offenderNo: string
      /**
       * @description Noms id of the other prisoner
       * @example A1234EG
       */
      nsOffenderNo: string
      /**
       * Format: int32
       * @description Sequence number
       * @example 1
       */
      typeSequence: number
      /**
       * @description Reason code of the first prisoner, domain NON_ASSO_RSN
       * @example VIC
       */
      reason: string
      /**
       * @description Reason code of the other prisoner, domain NON_ASSO_RSN
       * @example PER
       */
      recipReason: string
      /**
       * @description Type code, domain NON_ASSO_TYP
       * @example WING
       */
      type: string
      /**
       * @description Free text name of staff member
       * @example Joe Bloggs
       */
      authorisedBy?: string
      /**
       * @description Last updated by
       * @example JSMITH_GEN
       */
      updatedBy: string
      /**
       * Format: date
       * @description Effective date
       * @example 2022-08-12
       */
      effectiveDate: string
      /**
       * Format: date
       * @description Expiry date, open if null
       * @example 2022-08-12
       */
      expiryDate?: string
      /**
       * @description Comment
       * @example Some comment
       */
      comment?: string
    }
    /** @description Non association id */
    NonAssociationIdResponse: {
      /** @description The 1st offender */
      offenderNo1: string
      /** @description The 2nd offender */
      offenderNo2: string
    }
    PageNonAssociationIdResponse: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['NonAssociationIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject'][]
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description History */
    AmendmentResponse: {
      /**
       * @description Amended timestamp
       * @example 2021-07-05T10:35:17
       */
      amendDateTime: string
      /**
       * @description Which value was changed
       * @example Sequence
       */
      columnName?: string
      /** @description Original value */
      oldValue?: string
      /** @description New value */
      newValue?: string
      /**
       * @description Username of the person who made the change
       * @example NQP44X
       */
      amendedBy: string
    }
    /** @description Location request returned data */
    LocationResponse: {
      /**
       * Format: int64
       * @description The location id
       * @example 1234567
       */
      locationId: number
      /**
       * @description Whether certified for use
       * @default false
       * @example true
       */
      certified?: boolean
      /**
       * @description Whether a CELL, VISIT room, Kitchen etc (Ref type ILOC_TYPE)
       * @example LAND
       */
      locationType: string
      /**
       * @description Prison code of the location
       * @example LEI
       */
      prisonId: string
      /**
       * Format: int64
       * @description The containing location id
       * @example 1234567
       */
      parentLocationId?: number
      /**
       * @description The containing location id's key (Nomis description field)
       * @example WWI-B-2
       */
      parentKey?: string
      /**
       * Format: int32
       * @description Max capacity subject to resources
       * @example 43
       */
      operationalCapacity?: number
      /**
       * Format: int32
       * @description Certified Normal Accommodation capacity
       * @example 44
       */
      cnaCapacity?: number
      /**
       * @description Description of location
       * @example Some description
       */
      userDescription?: string
      /**
       * @description Constructed full code of location
       * @example WWI-B-2-004
       */
      description: string
      /** @description Usually a number for a cell, a letter for a wing or landing. Used to calculate description */
      locationCode: string
      /**
       * Format: int32
       * @description Physical maximum capacity
       * @example 45
       */
      capacity?: number
      /**
       * Format: int32
       * @description Defines the order within parent location
       */
      listSequence?: number
      /**
       * @description Comment
       * @example Some comment
       */
      comment?: string
      /**
       * @description Housing unit type
       * @example NA
       * @enum {string}
       */
      unitType?: 'HC' | 'HOLC' | 'NA' | 'OU' | 'REC' | 'SEG' | 'SPLC'
      /**
       * @description Whether the location is active or has been deactivated
       * @example true
       */
      active: boolean
      /**
       * Format: date
       * @description The deactivation date, defaults to today
       * @example 2024-12-31
       */
      deactivateDate?: string
      /**
       * @description The reason code for deactivation, reference data 'LIV_UN_RSN'
       * @enum {string}
       */
      reasonCode?: 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L'
      /**
       * Format: date
       * @description The expected reactivation date if any
       * @example 2024-12-31
       */
      reactivateDate?: string
      /** @description Profiles */
      profiles?: components['schemas']['ProfileRequest'][]
      /** @description Usages */
      usages?: components['schemas']['UsageRequest'][]
      /** @description History */
      amendments?: components['schemas']['AmendmentResponse'][]
      /**
       * @description Record created date
       * @example 2021-07-05T10:35:17
       */
      createDatetime: string
      /** @description Record created by */
      createUsername: string
      /** @description Record modified by */
      modifyUsername?: string
    }
    PageLocationIdResponse: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['LocationIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject'][]
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Historical questionnaire details for the incident */
    History: {
      /**
       * Format: int64
       * @description The history questionnaire id for the incident
       */
      questionnaireId: number
      /** @description The questionnaire type */
      type: string
      /** @description The questionnaire description */
      description?: string
      /** @description Questions asked for the questionnaire */
      questions: components['schemas']['HistoryQuestion'][]
      /**
       * Format: date
       * @description When the questionnaire was changed
       */
      incidentChangeDate: string
      incidentChangeStaff: components['schemas']['Staff']
    }
    /** @description Questions asked for the questionnaire */
    HistoryQuestion: {
      /**
       * Format: int64
       * @description The sequence number of the response question for this incident
       */
      questionId: number
      /**
       * Format: int32
       * @description The sequence number of the question for this incident
       */
      sequence: number
      /** @description The Question being asked */
      question: string
      /** @description Historical list of Responses to this question */
      answers: components['schemas']['HistoryResponse'][]
    }
    /** @description Historical list of Responses to this question */
    HistoryResponse: {
      /**
       * Format: int64
       * @description The id of the questionnaire question answer
       */
      questionResponseId?: number
      /**
       * Format: int32
       * @description The sequence number of the response for this incident
       */
      responseSequence: number
      /** @description The answer text */
      answer?: string
      /** @description Comment added to the response by recording staff */
      comment?: string
      recordingStaff: components['schemas']['Staff']
    }
    /** @description Incident Details */
    IncidentResponse: {
      /**
       * Format: int64
       * @description The incident id
       */
      incidentId: number
      /**
       * Format: int64
       * @description The id of the questionnaire associated with this incident
       */
      questionnaireId: number
      /** @description A summary of the incident */
      title?: string
      /** @description The incident details */
      description?: string
      prison: components['schemas']['CodeDescription']
      status: components['schemas']['IncidentStatus']
      /** @description The incident questionnaire type */
      type: string
      /** @description If the response is locked ie if the response is completed */
      lockedResponse: boolean
      /**
       * @description The date and time of the incident
       * @example 2021-07-05T10:35:17
       */
      incidentDateTime: string
      reportingStaff: components['schemas']['Staff']
      /**
       * @description The date and time the incident was reported
       * @example 2021-07-05T10:35:17
       */
      reportedDateTime: string
      /** @description Staff involved in the incident */
      staffParties: components['schemas']['StaffParty'][]
      /** @description Offenders involved in the incident */
      offenderParties: components['schemas']['OffenderParty'][]
      /** @description Requirements for completing the incident report */
      requirements: components['schemas']['Requirement'][]
      /** @description Questions asked for the incident */
      questions: components['schemas']['Question'][]
      /** @description Historical questionnaire details for the incident */
      history: components['schemas']['History'][]
    }
    /** @description Status details */
    IncidentStatus: {
      code: string
      description: string
      /** Format: int32 */
      listSequence?: number
      standardUser: boolean
      enhancedUser: boolean
    }
    /** @description Offender involved in the incident */
    Offender: {
      /** @description NOMIS id */
      offenderNo: string
      /** @description First name of staff member */
      firstName?: string
      /** @description Last name of staff member */
      lastName: string
    }
    /** @description Offenders involved in the incident */
    OffenderParty: {
      offender: components['schemas']['Offender']
      role: components['schemas']['CodeDescription']
      outcome?: components['schemas']['CodeDescription']
      /** @description General information about the incident */
      comment?: string
    }
    /** @description Questions asked for the incident */
    Question: {
      /**
       * Format: int64
       * @description The questionnaire question id
       */
      questionId: number
      /**
       * Format: int32
       * @description The sequence number of the question for this incident
       */
      sequence: number
      /** @description The Question being asked */
      question: string
      /** @description List of Responses to this question */
      answers: components['schemas']['Response'][]
    }
    /** @description Requirements for completing the incident report */
    Requirement: {
      /** @description The update required to the incident report */
      comment?: string
      /**
       * Format: date
       * @description Date the requirement was recorded
       */
      date: string
      staff: components['schemas']['Staff']
      /** @description The reporting location of the staff */
      prisonId: string
    }
    /** @description List of Responses to this question */
    Response: {
      /**
       * Format: int64
       * @description The id of the questionnaire question answer
       */
      questionResponseId?: number
      /**
       * Format: int32
       * @description The sequence number of the response for this incident
       */
      sequence: number
      /** @description The answer text */
      answer?: string
      /** @description Comment added to the response by recording staff */
      comment?: string
      recordingStaff: components['schemas']['Staff']
    }
    /** @description Staff involved in the incident */
    StaffParty: {
      staff: components['schemas']['Staff']
      role: components['schemas']['CodeDescription']
      /** @description General information about the incident */
      comment?: string
    }
    /** @description Incident id */
    IncidentIdResponse: {
      /**
       * Format: int64
       * @description The incident id
       */
      incidentId: number
    }
    PageIncidentIdResponse: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['IncidentIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject'][]
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Incentive id */
    IncentiveIdResponse: {
      /**
       * Format: int64
       * @description The booking id
       */
      bookingId: number
      /**
       * Format: int64
       * @description The sequence of the incentive within this booking
       */
      sequence: number
    }
    PageIncentiveIdResponse: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['IncentiveIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject'][]
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Incentive information */
    IncentiveResponse: {
      /** @description The offender number, aka nomsId, prisonerId */
      offenderNo: string
      /**
       * Format: int64
       * @description The booking id
       */
      bookingId: number
      /**
       * Format: int64
       * @description The sequence of the incentive within this booking
       */
      incentiveSequence: number
      /** @description Comment for Incentive level */
      commentText?: string
      /**
       * @description Date and time of Incentive level creation
       * @example 2021-07-05T10:35:17
       */
      iepDateTime: string
      /** @description Prison where the Incentive level was created */
      prisonId: string
      iepLevel: components['schemas']['CodeDescription']
      /** @description User id of user creating prisoner incentive level */
      userId?: string
      /** @description Is this IEP the current IEP for the booking? */
      currentIep: boolean
      /**
       * @description The NOMIS module that created this IEP
       * @enum {string}
       */
      auditModule: 'OCUWARNG' | 'PRISON_API' | 'OIDADMIS' | 'MERGE' | 'OIDOIEPS' | 'OIDITRAN' | 'OSIOSEAR'
      /**
       * @description date and time of creation
       * @example 2021-07-05T10:35:17
       */
      whenCreated: string
      /**
       * @description date and time of last update
       * @example 2021-07-05T10:35:17
       */
      whenUpdated?: string
    }
    /** @description Document id */
    DocumentIdResponse: {
      /**
       * Format: int64
       * @description The document id
       */
      documentId: number
    }
    /** @description Action list */
    Actions: {
      openCSIPAlert: boolean
      nonAssociationsUpdated: boolean
      observationBook: boolean
      unitOrCellMove: boolean
      csraOrRsraReview: boolean
      serviceReferral: boolean
      simReferral: boolean
    }
    /** @description Summary details */
    Attendee: {
      /**
       * Format: int64
       * @description Review Attendee/Contributor Id
       */
      id: number
      /** @description Name of attendee/contributor */
      name?: string
      'Role of attendee/contributor'?: string
      'If attended (otherwise contributor)': boolean
      Contribution?: string
    }
    /** @description CSIP Details */
    CSIPResponse: {
      /**
       * Format: int64
       * @description The csip id
       */
      id: number
      offender: components['schemas']['Offender']
      /**
       * Format: int64
       * @description The booking id associated with the CSIP
       */
      bookingId: number
      /** @description The original location when the CSIP was created */
      originalAgencyId?: string
      /** @description Log number */
      logNumber?: string
      /**
       * @description Date/Time incident occurred
       * @example 2021-07-05T10:35:17
       */
      incidentDateTime?: string
      type: components['schemas']['CodeDescription']
      location: components['schemas']['CodeDescription']
      areaOfWork: components['schemas']['CodeDescription']
      /** @description The person reporting the incident - free text */
      reportedBy?: string
      /**
       * Format: date
       * @description Date reported
       */
      reportedDate: string
      /** @description proActive Referral */
      proActiveReferral: boolean
      /** @description If a staff member was assaulted */
      staffAssaulted: boolean
      /** @description If assaulted, the staff member name */
      staffAssaultedName?: string
      reportDetails: components['schemas']['ReportDetails']
      saferCustodyScreening: components['schemas']['SaferCustodyScreening']
      investigation: components['schemas']['InvestigationDetails']
      decision: components['schemas']['Decision']
      /** @description Case Manager involved */
      caseManager?: string
      /** @description Reason for plan */
      planReason?: string
      /**
       * Format: date
       * @description Date of first review
       */
      firstCaseReviewDate?: string
      /** @description CSIP Plans */
      plans: components['schemas']['Plan'][]
      /** @description CSIP Reviews */
      reviews: components['schemas']['Review'][]
      /** @description Associated CSIP document Ids */
      documents: components['schemas']['DocumentIdResponse'][]
    }
    /** @description DecisionAndActions */
    Decision: {
      /** @description Conclusion & Reason for decision */
      conclusion?: string
      decisionOutcome?: components['schemas']['CodeDescription']
      signedOffRole?: components['schemas']['CodeDescription']
      /** @description Recorded By */
      recordedBy?: string
      /**
       * Format: date
       * @description Recorded Date
       */
      recordedDate?: string
      /** @description What to do next */
      nextSteps?: string
      /** @description Other information to take into consideration */
      otherDetails?: string
      actions: components['schemas']['Actions']
    }
    /** @description Contributory factors */
    FactorResponse: {
      /**
       * Format: int64
       * @description Factor type id
       */
      id: number
      type: components['schemas']['CodeDescription']
      /** @description Factor comment */
      comment?: string
    }
    /** @description Interview */
    InterviewDetails: {
      /** @description Person being interviewed */
      interviewee: string
      /**
       * Format: date
       * @description date of interview
       */
      date: string
      role: components['schemas']['CodeDescription']
      /** @description Additional data regarding the interview */
      comments?: string
    }
    /** @description Investigation details of the incident */
    InvestigationDetails: {
      /** @description Staff involved in the incident */
      staffInvolved?: string
      /** @description Whether any evidence was secured */
      evidenceSecured?: string
      /** @description Why the incident occurred */
      reasonOccurred?: string
      /** @description Normal behaviour of the offender */
      usualBehaviour?: string
      /** @description Offender's trigger */
      trigger?: string
      /** @description Protective factors */
      protectiveFactors?: string
      /** @description Interview */
      interviews?: components['schemas']['InterviewDetails'][]
    }
    /** @description CSIP Plans */
    Plan: {
      /**
       * Format: int64
       * @description Plan Id
       */
      id: number
      /** @description Details of the need */
      identifiedNeed: string
      /** @description Intervention plan */
      intervention: string
      /** @description Information regarding progression of plan */
      progression?: string
      /** @description The person reporting - free text */
      referredBy?: string
      /**
       * Format: date
       * @description When created
       */
      createdDate: string
      /**
       * Format: date
       * @description Target date of plan
       */
      targetDate: string
      /**
       * Format: date
       * @description Plan closed date
       */
      closedDate?: string
    }
    /** @description Additional information for the CSIP Report */
    ReportDetails: {
      /**
       * Format: date
       * @description Date the offender is released
       */
      releaseDate?: string
      involvement?: components['schemas']['CodeDescription']
      /** @description Concern description */
      concern?: string
      /** @description Contributory factors */
      factors: components['schemas']['FactorResponse'][]
      /** @description known reasons for the involvement */
      knownReasons?: string
      /** @description Additional information */
      otherInformation?: string
      /** @description If the safer custody team were informed */
      saferCustodyTeamInformed: boolean
      /** @description If the referral has been completed */
      referralComplete: boolean
      /** @description Who completed the referral */
      referralCompletedBy?: string
      /**
       * Format: date
       * @description Date the referral was completed
       */
      referralCompletedDate?: string
    }
    /** @description CSIP Reviews */
    Review: {
      /**
       * Format: int64
       * @description Review Id
       */
      id: number
      /**
       * Format: int32
       * @description Sequence number
       */
      reviewSequence: number
      /** @description Summary details */
      attendees: components['schemas']['Attendee'][]
      /** @description Summary details */
      remainOnCSIP: boolean
      /** @description Summary details */
      csipUpdated: boolean
      /** @description Summary details */
      caseNote: boolean
      /** @description Summary details */
      closeCSIP: boolean
      /** @description Summary details */
      peopleInformed: boolean
      /** @description Summary details */
      summary?: string
      /**
       * Format: date
       * @description Next Review date
       */
      nextReviewDate?: string
      /**
       * Format: date
       * @description Review closed date
       */
      closeDate?: string
    }
    /** @description Safer custody screening */
    SaferCustodyScreening: {
      outcome?: components['schemas']['CodeDescription']
      /** @description Who recorded the data */
      recordedBy?: string
      /**
       * Format: date
       * @description When the the SCS occurred
       */
      recordedDate?: string
      /** @description Why the decision was made */
      reasonForDecision?: string
    }
    /** @description CSIP id */
    CSIPIdResponse: {
      /**
       * Format: int64
       * @description The csip id
       */
      id: number
    }
    PageCSIPIdResponse: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['CSIPIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject'][]
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Attendance reconciliation check response */
    AttendanceReconciliationResponse: {
      /**
       * @description The prison we checked the attendance for
       * @example BXI
       */
      prisonId: string
      /**
       * Format: date
       * @description Date of the attendance check
       * @example 2021-01-01
       */
      date: string
      /**
       * @description All active bookings and their attendance count
       * @example [ { bookingId: 1234567, count: 2 } ]
       */
      bookings: components['schemas']['BookingCount'][]
    }
    /**
     * @description A count for an offender booking
     * @example [ { bookingId: 1234567, count: 2 } ]
     */
    BookingCount: {
      /**
       * Format: int64
       * @description The offender booking id
       * @example 1234567
       */
      bookingId: number
      /**
       * Format: int64
       * @description The count for the offender booking
       * @example 2
       */
      count: number
    }
    /** @description Appointment information */
    AppointmentResponse: {
      /**
       * Format: int64
       * @description The booking id
       */
      bookingId: number
      /** @description The offender number, aka nomsId, prisonerId */
      offenderNo: string
      /** @description Prison where the appointment occurs */
      prisonId: string
      /**
       * Format: int64
       * @description NOMIS room id
       */
      internalLocation: number
      /**
       * @description Start date and time
       * @example 2021-07-05T10:35:17
       */
      startDateTime: string
      /**
       * @description End date and time
       * @example 2021-07-05T10:35:17
       */
      endDateTime: string
      /** @description Comment */
      comment?: string
      /** @description Event subtype */
      subtype: string
      /** @description Status */
      status: string
      /**
       * @description Record created date
       * @example 2021-07-05T10:35:17
       */
      createdDate: string
      /** @description Record created by */
      createdBy: string
      /**
       * @description Record modified date
       * @example 2021-07-05T10:35:17
       */
      modifiedDate?: string
      /** @description Record modified by */
      modifiedBy?: string
    }
    /** @description Event id */
    AppointmentIdResponse: {
      /**
       * Format: int64
       * @description The event id
       */
      eventId: number
    }
    PageAppointmentIdResponse: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['AppointmentIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject'][]
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Appointment counts */
    AppointmentCountsResponse: {
      /** @description The prison id */
      prisonId: string
      /** @description The event sub type */
      eventSubType: string
      /** @description Future appointments? */
      future: boolean
      /**
       * Format: int64
       * @description The count
       */
      count: number
    }
    /** @description Allocation to an activity */
    GetAllocationResponse: {
      /**
       * @description Prison ID
       * @example BXI
       */
      prisonId: string
      /**
       * Format: int64
       * @description Nomis Course Activity ID
       * @example 1234
       */
      courseActivityId: number
      /**
       * @description Nomis ID
       * @example A1234BC
       */
      nomisId: string
      /**
       * Format: int64
       * @description ID of the active booking
       * @example 12345
       */
      bookingId: number
      /**
       * Format: date
       * @description Date allocated to the course
       * @example 2023-03-12
       */
      startDate: string
      /**
       * Format: date
       * @description Date deallocated from the course
       * @example 2023-05-26
       */
      endDate?: string
      /**
       * @description Deallocation comment
       * @example Removed due to schedule clash
       */
      endComment?: string
      /**
       * @description Nomis reason code for ending (reference code domain PS_END_RSN)
       * @example WDRAWN
       */
      endReasonCode?: string
      /**
       * @description Whether the prisoner is currently suspended from the course
       * @example false
       */
      suspended: boolean
      /**
       * @description Pay band
       * @example 1
       */
      payBand?: string
      /**
       * @description Cell description (can be null if OUT or being transferred)
       * @example RSI-A-1-001
       */
      livingUnitDescription?: string
      /** @description Sessions excluded from the allocation during which period attendances will not be generated */
      exclusions: components['schemas']['AllocationExclusion'][]
      /** @description Rules for creating schedules - days and times */
      scheduleRules: components['schemas']['ScheduleRulesResponse'][]
    }
    /** @description Activity Schedule Rules */
    ScheduleRulesResponse: {
      /**
       * Format: partial-time
       * @description Course start time
       * @example 09:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description Course end time
       * @example 11:00
       */
      endTime: string
      /**
       * @description Runs on Mondays
       * @example true
       */
      monday: boolean
      /**
       * @description Runs on Tuesdays
       * @example true
       */
      tuesday: boolean
      /**
       * @description Runs on Wednesdays
       * @example true
       */
      wednesday: boolean
      /**
       * @description Runs on Thursdays
       * @example true
       */
      thursday: boolean
      /**
       * @description Runs on Fridays
       * @example true
       */
      friday: boolean
      /**
       * @description Runs on Saturdays
       * @example true
       */
      saturday: boolean
      /**
       * @description Runs on Sundays
       * @example true
       */
      sunday: boolean
    }
    /** @description Find suspended prisoners from active allocations */
    FindSuspendedAllocationsResponse: {
      /**
       * @description NOMIS offender number
       * @example A1234BC
       */
      offenderNo: string
      /**
       * Format: int64
       * @description Course Activity ID
       * @example 1234567
       */
      courseActivityId: number
      /**
       * @description Course description
       * @example Kitchens AM
       */
      courseActivityDescription: string
    }
    /** @description Allocation reconciliation check response */
    AllocationReconciliationResponse: {
      /**
       * @description The prison we checked the allocations for
       * @example BXI
       */
      prisonId: string
      /**
       * @description All active bookings and their allocation count
       * @example [ { bookingId: 1234567, count: 2 } ]
       */
      bookings: components['schemas']['BookingCount'][]
    }
    /** @description Find active allocations with missing pay bands */
    FindAllocationsMissingPayBandsResponse: {
      /**
       * @description NOMIS offender number
       * @example A1234BC
       */
      offenderNo: string
      /**
       * @description NOMIS incentive level
       * @example STD
       */
      incentiveLevel: string
      /**
       * Format: int64
       * @description Course Activity ID
       * @example 1234567
       */
      courseActivityId: number
      /**
       * @description Course description
       * @example Kitchens AM
       */
      courseActivityDescription: string
    }
    /** @description Find active allocation ids response */
    FindActiveAllocationIdsResponse: {
      /**
       * Format: int64
       * @description Allocation id
       * @example 1
       */
      allocationId: number
    }
    PageFindActiveAllocationIdsResponse: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['FindActiveAllocationIdsResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject'][]
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Alert id */
    AlertIdResponse: {
      /**
       * Format: int64
       * @description The booking id
       */
      bookingId: number
      /**
       * Format: int64
       * @description The alert sequence
       */
      alertSequence: number
      /** @description The prisoner number */
      offenderNo: string
    }
    PageAlertIdResponse: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['AlertIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject'][]
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Adjustment id */
    AdjustmentIdResponse: {
      /**
       * Format: int64
       * @description The adjustment id
       */
      adjustmentId: number
      /** @description SENTENCE or KEY_DATE */
      adjustmentCategory: string
    }
    PageAdjustmentIdResponse: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['AdjustmentIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject'][]
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description adjudication id */
    AdjudicationChargeIdResponse: {
      /**
       * Format: int64
       * @description The adjudication number
       */
      adjudicationNumber: number
      /**
       * Format: int32
       * @description The adjudication charge sequence
       */
      chargeSequence: number
      /** @description The prisoner number */
      offenderNo: string
    }
    PageAdjudicationChargeIdResponse: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['AdjudicationChargeIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject'][]
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description The requested adjudication charge and associated adjudication details. Note: the adjudication may have other charges associated with it */
    AdjudicationChargeResponse: {
      /**
       * Format: int32
       * @description The adjudication/party sequence, part of the composite key with adjudicationIncidentId
       */
      adjudicationSequence: number
      /** @description The offender number, aka nomsId, prisonerId */
      offenderNo: string
      /**
       * Format: int64
       * @description The id of the booking associated with the adjudication
       */
      bookingId: number
      /**
       * Format: int64
       * @description The adjudication number (business key)
       */
      adjudicationNumber: number
      gender: components['schemas']['CodeDescription']
      currentPrison?: components['schemas']['CodeDescription']
      /**
       * Format: date
       * @description Date Prisoner was added to the adjudication ????
       */
      partyAddedDate: string
      /** @description Adjudication comments */
      comment?: string
      incident: components['schemas']['AdjudicationIncident']
      charge: components['schemas']['AdjudicationCharge']
      /** @description Investigator that gathers evidence. Used in NOMIS in a small percentage of cases */
      investigations: components['schemas']['Investigation'][]
      /** @description hearings associated with this adjudication */
      hearings: components['schemas']['Hearing'][]
      /** @description indicates if this charge was part of a larger multi-charge adjudication in NOMIS */
      hasMultipleCharges: boolean
    }
    /** @description Activity details */
    GetActivityResponse: {
      /**
       * Format: int64
       * @description Activity id
       * @example 1
       */
      courseActivityId: number
      /**
       * @description Program service code
       * @example INDUCTION
       */
      programCode: string
      /**
       * @description Prison code
       * @example RSI
       */
      prisonId: string
      /**
       * Format: date
       * @description Date course started
       * @example 2020-04-11
       */
      startDate: string
      /**
       * Format: date
       * @description Date course ended
       * @example 2023-11-15
       */
      endDate?: string
      /**
       * Format: int64
       * @description Course internal location
       * @example 1234
       */
      internalLocationId?: number
      /**
       * @description Course internal location code
       * @example KITCH
       */
      internalLocationCode?: string
      /**
       * @description Course internal location description
       * @example RSI-WORK_IND-KITCH
       */
      internalLocationDescription?: string
      /**
       * Format: int32
       * @description Course capacity
       * @example 10
       */
      capacity: number
      /**
       * @description Course description
       * @example Kitchen work
       */
      description: string
      /**
       * @description The minimum incentive level allowed on the course
       * @example BAS
       */
      minimumIncentiveLevel?: string
      /**
       * @description Whether the course runs on bank holidays
       * @example false
       */
      excludeBankHolidays: boolean
      /**
       * @description Half or Full day (H or F)
       * @example H
       */
      payPerSession: string
      /** @description Rules for creating schedules - days and times */
      scheduleRules: components['schemas']['ScheduleRulesResponse'][]
      /** @description Pay rates available */
      payRates: components['schemas']['PayRatesResponse'][]
      /**
       * @description Outside work flag
       * @example false
       */
      outsideWork: boolean
    }
    /** @description Activity Pay Rates */
    PayRatesResponse: {
      /**
       * @description Incentive level code
       * @example BAS
       */
      incentiveLevelCode: string
      /**
       * @description Pay band
       * @example 1
       */
      payBand: string
      /**
       * @description rate
       * @example 3.2
       */
      rate: number
    }
    /** @description Find activities with a pay rate with unknown incentive level */
    FindPayRateWithUnknownIncentiveResponse: {
      /**
       * @description Course description
       * @example Kitchens AM
       */
      courseActivityDescription: string
      /**
       * Format: int64
       * @description Course Activity ID
       * @example 1234567
       */
      courseActivityId: number
      /**
       * @description Pay band code
       * @example 5
       */
      payBandCode: string
      /**
       * @description Incentive level
       * @example STD
       */
      incentiveLevelCode: string
    }
    /** @description Find active activity ids response */
    FindActiveActivityIdsResponse: {
      /**
       * Format: int64
       * @description Activity id
       * @example 1
       */
      courseActivityId: number
    }
    PageFindActiveActivityIdsResponse: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['FindActiveActivityIdsResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject'][]
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description A list of Hearing result awards deleted (aka punishment) as a side effect of deleting a hearing result */
    DeleteHearingResultResponse: {
      /** @description a list of awards that were deleted */
      awardsDeleted: components['schemas']['HearingResultAwardResponse'][]
    }
    /** @description A list of Hearing result awards deleted (aka punishment) */
    DeleteHearingResultAwardResponses: {
      /** @description a list of awards that were deleted */
      awardsDeleted: components['schemas']['HearingResultAwardResponse'][]
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /**
   * get specific sentence adjustment
   * @description Requires role NOMIS_SENTENCING. Retrieves a sentence adjustment by id
   */
  getSentenceAdjustment: {
    parameters: {
      path: {
        /**
         * @description Sentence adjustment id
         * @example 12345
         */
        adjustmentId: string
      }
    }
    responses: {
      /** @description the sentence adjustment details */
      200: {
        content: {
          'application/json': components['schemas']['SentenceAdjustmentResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Adjustment not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Updates specific sentence adjustment. The related booking and sentence can not be changed
   * @description Requires role NOMIS_SENTENCING. Updates a sentence adjustment by id
   */
  updateSentenceAdjustment: {
    parameters: {
      path: {
        /**
         * @description Sentence adjustment id
         * @example 12345
         */
        adjustmentId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSentenceAdjustmentRequest']
      }
    }
    responses: {
      /** @description the sentence adjustment has been updated */
      200: {
        content: never
      }
      /** @description Supplied data is invalid, for instance missing required fields or invalid values. See schema for details */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * deletes specific sentence adjustment
   * @description Requires role NOMIS_SENTENCING. Deletes a sentence adjustment by id
   */
  deleteSentenceAdjustment: {
    parameters: {
      path: {
        /**
         * @description Sentence adjustment id
         * @example 12345
         */
        adjustmentId: string
      }
    }
    responses: {
      /** @description the sentence adjustment has been deleted */
      204: {
        content: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Creates or updates an attendance record
   * @description Creates or updates an attendance for the course schedule. Requires role NOMIS_ACTIVITIES
   */
  upsertAttendance: {
    parameters: {
      path: {
        /** @description Course schedule id */
        courseScheduleId: string
        /** @description Booking id */
        bookingId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpsertAttendanceRequest']
      }
    }
    responses: {
      /** @description Attendance updated */
      200: {
        content: {
          'application/json': components['schemas']['UpsertAttendanceResponse']
        }
      }
      /** @description Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Updates an existing visit
   * @description Updates details of an existing visit such as the visitors and time slot
   */
  updateVisit: {
    parameters: {
      path: {
        /**
         * @description Offender Noms Id
         * @example A1234ZZ
         */
        offenderNo: string
        /**
         * @description Nomis visit Id
         * @example 123456
         */
        visitId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateVisitRequest']
      }
    }
    responses: {
      /** @description Visit information updated */
      200: {
        content: never
      }
      /** @description Person ids do not exist */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description offenderNo or visits id does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Cancel a visit */
  cancelVisit: {
    parameters: {
      path: {
        /**
         * @description Offender Noms Id
         * @example A1234ZZ
         */
        offenderNo: string
        /** @description Nomis Visit Id */
        visitId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CancelVisitRequest']
      }
    }
    responses: {
      /** @description Visit cancelled */
      200: {
        content: never
      }
      /** @description Invalid cancellation reason */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description VSIP visit id not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Updates Court Appearance
   * @description Required role NOMIS_SENTENCING Updates a new Court Appearance for the offender,latest booking and given Court Case
   */
  updateCourtAppearance: {
    parameters: {
      path: {
        /**
         * @description Offender no
         * @example AB1234A
         */
        offenderNo: string
        /**
         * @description Case Id
         * @example 34565
         */
        caseId: string
        /**
         * @description Case appearance Id
         * @example 34565
         */
        eventId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CourtAppearanceRequest']
      }
    }
    responses: {
      /** @description Court Appearance updated */
      200: {
        content: {
          'application/json': components['schemas']['UpdateCourtAppearanceResponse']
        }
      }
      /** @description Supplied data is invalid, for instance missing required fields or invalid values. See schema for details */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Court appearance does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * get an alert by bookingId and alert sequence
   * @description Retrieves an prisoner alert. Requires ROLE_NOMIS_ALERTS
   */
  getAlert_1: {
    parameters: {
      path: {
        /**
         * @description Booking Id
         * @example 12345
         */
        bookingId: string
        /**
         * @description Alert sequence
         * @example 3
         */
        alertSequence: string
      }
    }
    responses: {
      /** @description Alert Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['AlertResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Alert does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Updates an alert on a prisoner
   * @description Updates an alert on the specified prisoner's booking which should be the latest booking. Requires ROLE_NOMIS_ALERTS
   */
  updateAlert: {
    parameters: {
      path: {
        /**
         * @description Booking id
         * @example 1234567
         */
        bookingId: string
        /**
         * @description Alert sequence
         * @example 3
         */
        alertSequence: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAlertRequest']
      }
    }
    responses: {
      /** @description Alert Updated */
      200: {
        content: {
          'application/json': components['schemas']['AlertResponse']
        }
      }
      /** @description One or more fields in the request contains invalid data */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Alert does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Deletes an alert by bookingId and alert sequence
   * @description Deletes an prisoner alert. Requires ROLE_NOMIS_ALERTS
   */
  deleteAlert: {
    parameters: {
      path: {
        /**
         * @description Booking Id
         * @example 12345
         */
        bookingId: string
        /**
         * @description Alert sequence
         * @example 3
         */
        alertSequence: string
      }
    }
    responses: {
      /** @description Alert Deleted */
      204: {
        content: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Updates an existing non-association
   * @description Updates an existing non-association. Requires role NOMIS_NON_ASSOCIATIONS
   */
  updateNonAssociation: {
    parameters: {
      path: {
        /**
         * @description Offender
         * @example A3456GH
         */
        offenderNo: string
        /**
         * @description Non-association offender
         * @example A4578ED
         */
        nsOffenderNo: string
        /**
         * @description Sequence number. Amend this specific detail record
         * @example 1
         */
        typeSequence: number
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateNonAssociationRequest']
      }
    }
    responses: {
      /** @description Successfully amended non-association */
      200: {
        content: never
      }
      /** @description Invalid data such as reason or type do not exist etc. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_NON_ASSOCIATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Non-association does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Deletes a non-association
   * @description Deletes the specified non-association detail record. if there was only one, the parent NA record is deleted too. Requires role NOMIS_NON_ASSOCIATIONS
   */
  deleteNonAssociation: {
    parameters: {
      path: {
        /**
         * @description Offender
         * @example A3456GH
         */
        offenderNo: string
        /**
         * @description Non-association offender
         * @example A4578ED
         */
        nsOffenderNo: string
        /**
         * @description Sequence number. Close this specific detail record
         * @example 2
         */
        typeSequence: number
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_NON_ASSOCIATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Non-association does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Closes an existing non-association
   * @description Closes an existing non-association. Requires role NOMIS_NON_ASSOCIATIONS
   */
  closeNonAssociation: {
    parameters: {
      path: {
        /**
         * @description Offender
         * @example A3456GH
         */
        offenderNo: string
        /**
         * @description Non-association offender
         * @example A4578ED
         */
        nsOffenderNo: string
        /**
         * @description Sequence number. Close this specific detail record
         * @example 2
         */
        typeSequence: number
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: never
      }
      /** @description Non-association is already closed */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_NON_ASSOCIATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Non-association does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Updates an existing location
   * @description Updates an existing location. Requires role NOMIS_LOCATIONS
   */
  updateLocation: {
    parameters: {
      path: {
        /**
         * @description NOMIS location Id
         * @example 1234567
         */
        locationId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateLocationRequest']
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: never
      }
      /** @description Invalid data such as location or subtype do not exist etc. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, correct role not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location id does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Reactivates a deactivated location
   * @description Requires role NOMIS_LOCATIONS
   */
  reactivateLocation: {
    parameters: {
      path: {
        /**
         * @description NOMIS location Id
         * @example 1234567
         */
        locationId: string
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: never
      }
      /** @description Location was already active */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, correct role not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location id does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Deactivates an existing location
   * @description Requires role NOMIS_LOCATIONS
   */
  deactivateLocation: {
    parameters: {
      path: {
        /**
         * @description NOMIS location Id
         * @example 1234567
         */
        locationId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DeactivateRequest']
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: never
      }
      /** @description Reason code does not exist, or already deactivated */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, correct role not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location id does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Update location certification
   * @description Requires role NOMIS_LOCATIONS
   */
  updateCertification: {
    parameters: {
      path: {
        /**
         * @description NOMIS location Id
         * @example 1234567
         */
        locationId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCertificationRequest']
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, correct role not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location id does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Update location capacity
   * @description Requires role NOMIS_LOCATIONS
   */
  updateCapacity: {
    parameters: {
      path: {
        /**
         * @description NOMIS location Id
         * @example 1234567
         */
        locationId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCapacityRequest']
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, correct role not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location id does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * get specific key date adjustment
   * @description Requires role NOMIS_SENTENCING. Retrieves a key date adjustment by id
   */
  getKeyDateAdjustment: {
    parameters: {
      path: {
        /**
         * @description Key date adjustment id
         * @example 12345
         */
        adjustmentId: string
      }
    }
    responses: {
      /** @description the key date adjustment details */
      200: {
        content: {
          'application/json': components['schemas']['KeyDateAdjustmentResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Adjustment not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Updates specific key date adjustment. The related booking can not be changed
   * @description Requires role NOMIS_SENTENCING. Updates a sentence adjustment by id
   */
  updateKeyDateAdjustment: {
    parameters: {
      path: {
        /**
         * @description Key date adjustment id
         * @example 12345
         */
        adjustmentId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateKeyDateAdjustmentRequest']
      }
    }
    responses: {
      /** @description the key date adjustment has been updated */
      200: {
        content: never
      }
      /** @description Supplied data is invalid, for instance missing required fields or invalid values. See schema for details */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Adjustment not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * deletes specific key date adjustment
   * @description Requires role NOMIS_SENTENCING. Deletes a key date adjustment by id
   */
  deleteKeyDateAdjustment: {
    parameters: {
      path: {
        /**
         * @description Key date adjustment id
         * @example 12345
         */
        adjustmentId: string
      }
    }
    responses: {
      /** @description the key date adjustment has been deleted */
      204: {
        content: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Gets the global incentive level by code
   * @description Gets a global incentive level by provided code and domain of IEP_LEVEL
   */
  getGlobalIncentiveLevel: {
    parameters: {
      path: {
        /**
         * @description Incentive reference code
         * @example STD
         */
        code: string
      }
    }
    responses: {
      /** @description return the Global Incentive level */
      200: {
        content: {
          'application/json': components['schemas']['ReferenceCode']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Global Incentive Level does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Updates an existing global incentive level
   * @description Updates an existing global incentive level, updateable fields are description and active
   */
  updateGlobalIncentiveLevel: {
    parameters: {
      path: {
        /**
         * @description Incentive reference code
         * @example STD
         */
        code: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateIncentiveRequest']
      }
    }
    responses: {
      /** @description Updated Global Incentive level */
      200: {
        content: {
          'application/json': components['schemas']['ReferenceCode']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Global incentive level not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Gets the prison incentive level
   * @description Gets prison incentive level data by provided code and prison
   */
  getPrisonIncentiveLevel: {
    parameters: {
      path: {
        /**
         * @description Prison id
         * @example MDI
         */
        prison: string
        /**
         * @description Incentive level code
         * @example STD
         */
        code: string
      }
    }
    responses: {
      /** @description return the Prison Incentive level */
      200: {
        content: {
          'application/json': components['schemas']['PrisonIncentiveLevelDataResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prison Incentive Level does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Prison Incentive level data
   * @description Creates incentive level data associated with a Prison
   */
  updatePrisonIncentiveLevelData: {
    parameters: {
      path: {
        /**
         * @description Prison Id
         * @example MDI
         */
        prison: string
        /**
         * @description Incentive level code
         * @example STD
         */
        code: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePrisonIncentiveRequest']
      }
    }
    responses: {
      /** @description Prison Incentive level data updated */
      200: {
        content: {
          'application/json': components['schemas']['PrisonIncentiveLevelDataResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Updates an existing appointment
   * @description Updates an existing appointment. Requires role NOMIS_APPOINTMENTS
   */
  updateAppointment: {
    parameters: {
      path: {
        /**
         * @description NOMIS event Id
         * @example 1234567
         */
        nomisEventId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAppointmentRequest']
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: never
      }
      /** @description Invalid data such as location or subtype do not exist etc. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_APPOINTMENTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Event id does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Deletes an existing appointment
   * @description Deletes an existing appointment by actually deleting from the table. Intended for appointments created in error. Requires role NOMIS_APPOINTMENTS
   */
  deleteAppointment: {
    parameters: {
      path: {
        /**
         * @description NOMIS event Id
         * @example 1234567
         */
        nomisEventId: string
      }
    }
    responses: {
      /** @description Success */
      204: {
        content: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_APPOINTMENTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Event id does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Undoes an appointment cancellation
   * @description Undoes an appointment cancellation. Requires role NOMIS_APPOINTMENTS
   */
  uncancelAppointment: {
    parameters: {
      path: {
        /**
         * @description NOMIS event Id
         * @example 1234567
         */
        nomisEventId: string
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_APPOINTMENTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Event id does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Cancels an existing appointment
   * @description Cancels an existing appointment. Requires role NOMIS_APPOINTMENTS
   */
  cancelAppointment: {
    parameters: {
      path: {
        /**
         * @description NOMIS event Id
         * @example 1234567
         */
        nomisEventId: string
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_APPOINTMENTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Event id does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Updates repairs (aka damages) for a given adjudication
   * @description List of repairs are refreshed so this operation may result in any combinations of inserts, updates or deletes. Requires ROLE_NOMIS_ADJUDICATIONS
   */
  updateRepairs: {
    parameters: {
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateRepairsRequest']
      }
    }
    responses: {
      /** @description Repairs updated */
      200: {
        content: {
          'application/json': components['schemas']['UpdateRepairsResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Adjudication does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Updates a hearing
   * @description Updates a hearing for a given adjudication and hearing Id. Requires ROLE_NOMIS_ADJUDICATIONS
   */
  updateHearing: {
    parameters: {
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: string
        /**
         * @description Hearing Id
         * @example 12345
         */
        hearingId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateHearingRequest']
      }
    }
    responses: {
      /** @description Updated Hearing Returned */
      200: {
        content: {
          'application/json': components['schemas']['UpdateHearingRequest']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Hearing does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Deletes a hearing
   * @description Deletes a hearing for a given adjudication and hearing Id. Requires ROLE_NOMIS_ADJUDICATIONS
   */
  deleteHearing: {
    parameters: {
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: string
        /**
         * @description Hearing Id
         * @example 12345
         */
        hearingId: string
      }
    }
    responses: {
      /** @description Hearing deleted */
      200: {
        content: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Adjudication does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Updates evidence for a given adjudication
   * @description List of evidence items are refreshed so this operation may result in any combinations of inserts, updates or deletes. Requires ROLE_NOMIS_ADJUDICATIONS
   */
  updateEvidence: {
    parameters: {
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateEvidenceRequest']
      }
    }
    responses: {
      /** @description Evidence updated */
      200: {
        content: {
          'application/json': components['schemas']['UpdateEvidenceResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Adjudication does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * updates adjudication charge outcome and awards to the requested state before a quash
   * @description The latest hearing result is set to back to the supplied value along with all awards associated with this charge. Requires ROLE_NOMIS_ADJUDICATIONS
   */
  unquashHearingResultAndAwards: {
    parameters: {
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: string
        /**
         * @description Nomis charge sequence
         * @example 1
         */
        chargeSequence: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UnquashHearingResultAwardRequest']
      }
    }
    responses: {
      /** @description Hearing result award IDs created and awards deleted. These list should be empty unless there was a previous synchronisation issue that meant the NOMIS awards are not in the correct state */
      200: {
        content: {
          'application/json': components['schemas']['UpdateHearingResultAwardResponses']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Charge does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * updates adjudication charge outcome and awards to quashed
   * @description The latest hearing result is set to quashed along with all awards associated with this charge (that may be associated with other hearings). Requires ROLE_NOMIS_ADJUDICATIONS
   */
  quashHearingResultAndAwards: {
    parameters: {
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: string
        /**
         * @description Nomis charge sequence
         * @example 1
         */
        chargeSequence: string
      }
    }
    responses: {
      /** @description Hearing result and awards quashed */
      200: {
        content: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Charge does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * updates a batch of hearing result awards for a given adjudication
   * @description Creates a hearing result awards that have been added, updates those that have changed and deletes ones that are absent for the booking associated with the adjudication. Requires ROLE_NOMIS_ADJUDICATIONS
   */
  updateCreateAndDeleteHearingResultAwards: {
    parameters: {
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: string
        /**
         * @description Nomis charge sequence
         * @example 1
         */
        chargeSequence: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateHearingResultAwardRequest']
      }
    }
    responses: {
      /** @description Hearing result award IDs created and awards deleted */
      200: {
        content: {
          'application/json': components['schemas']['UpdateHearingResultAwardResponses']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Charge does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * creates a hearing result award for a given adjudication
   * @description Creates a hearing result award. Requires ROLE_NOMIS_ADJUDICATIONS
   */
  createHearingResultAward: {
    parameters: {
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: string
        /**
         * @description Nomis charge sequence
         * @example 1
         */
        chargeSequence: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateHearingResultAwardRequest']
      }
    }
    responses: {
      /** @description Hearing result award IDs created */
      201: {
        content: {
          'application/json': components['schemas']['CreateHearingResultAwardResponses']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Charge does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Deletes hearing result awards for a given adjudication and charge sequence
   * @description Deletes hearing result awards for a given adjudication and charge sequence. Returns list of deleted award keys. Requires ROLE_NOMIS_ADJUDICATIONS
   */
  deleteHearingResultAwards: {
    parameters: {
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: string
        /**
         * @description Nomis charge sequence
         * @example 1
         */
        chargeSequence: string
      }
    }
    responses: {
      /** @description Hearing result awards deleted */
      200: {
        content: {
          'application/json': components['schemas']['DeleteHearingResultAwardResponses']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Charge does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get activity details
   * @description Gets activity details including schedule rules and pay rates. Requires role NOMIS_ACTIVITIES
   */
  getActivity: {
    parameters: {
      path: {
        /** @description Course activity id */
        courseActivityId: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['GetActivityResponse']
        }
      }
      /** @description Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Updates an activity
   * @description Updates an activity and associated pay rates. Requires role NOMIS_ACTIVITIES
   */
  updateActivity: {
    parameters: {
      path: {
        /** @description Course activity id */
        courseActivityId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateActivityRequest']
      }
    }
    responses: {
      /** @description Activity information */
      200: {
        content: {
          'application/json': components['schemas']['CreateActivityResponse']
        }
      }
      /** @description Prison, location, program service or iep value do not exist */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Activity Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Delete a NOMIS course activity
   * @description Deletes a course activity and its children - pay rates, schedules, allocations and attendances. Intended to be used for data fixes. Requires role NOMIS_ACTIVITIES
   */
  deleteActivity: {
    parameters: {
      path: {
        courseActivityId: number
      }
    }
    responses: {
      /** @description Activity is deleted */
      204: {
        content: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Updates a course schedule
   * @description Updates a course schedule. Requires role NOMIS_ACTIVITIES
   */
  updateCourseSchedule: {
    parameters: {
      path: {
        /** @description Course activity id */
        courseActivityId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CourseScheduleRequest']
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': components['schemas']['UpdateCourseScheduleResponse']
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The course schedule does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * End a course activity
   * @description Ends a course activity and all active attendances with end date today. Requires role NOMIS_ACTIVITIES
   */
  endActivity: {
    parameters: {
      query?: {
        /** @description End comment */
        endComment?: string
      }
      path: {
        /** @description Course activity id */
        courseActivityId: string
      }
    }
    responses: {
      /** @description Activity ended */
      200: {
        content: never
      }
      /** @description Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Creates or Updates a prisoner's allocation to an activity
   * @description Creates or updates a prisoner's allocation to an activity. Requires role NOMIS_ACTIVITIES
   */
  upsertAllocation: {
    parameters: {
      path: {
        /** @description Course activity id */
        courseActivityId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpsertAllocationRequest']
      }
    }
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': components['schemas']['UpsertAllocationResponse']
        }
      }
      /** @description There was an error with the request, see the response for details */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * End multiple course activities
   * @description Ends course activities and all active allocations with end date today. Requires role NOMIS_ACTIVITIES
   */
  endActivities: {
    requestBody: {
      content: {
        'application/json': components['schemas']['EndActivitiesRequest']
      }
    }
    responses: {
      /** @description Activities ended */
      200: {
        content: never
      }
      /** @description Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Check if a service is turned on for a prison
   * @description Check if a prison is turned on for a service. Requires role NOMIS_ACTIVITIES
   */
  checkServicePrison: {
    parameters: {
      path: {
        /**
         * @description The code of the service from the EXTERNAL_SERVICES table
         * @example ACTIVITY
         */
        serviceCode: string
        /**
         * @description The id of the prison
         * @example MDI
         */
        prisonId: string
      }
    }
    responses: {
      /** @description OK */
      204: {
        content: never
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role SYNCHRONISATION_REPORTING */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not Found, the service is not turned on for the prison */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Turn on a service for a prison
   * @description Turn on a service for a prison. Requires role NOMIS_ACTIVITIES
   */
  createServicePrison: {
    parameters: {
      path: {
        /**
         * @description The code of the service from the EXTERNAL_SERVICES table
         * @example ACTIVITY
         */
        serviceCode: string
        /**
         * @description The id of the prison
         * @example MDI
         */
        prisonId: string
      }
    }
    responses: {
      /** @description Created */
      201: {
        content: never
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role SYNCHRONISATION_REPORTING */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not Found, the service or prison do not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Creates a new visit
   * @description Creates a new visit and decrements the visit balance.
   */
  createVisit: {
    parameters: {
      path: {
        /**
         * @description Offender Noms Id
         * @example A1234ZZ
         */
        offenderNo: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateVisitRequest']
      }
    }
    responses: {
      /** @description Visit information with created id */
      201: {
        content: {
          'application/json': components['schemas']['CreateVisitResponse']
        }
      }
      /** @description Prison or person ids do not exist */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description offenderNo does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Creates a new Sentence
   * @description Required role NOMIS_SENTENCING Creates a new Sentence for the offender and latest booking
   */
  createSentence: {
    parameters: {
      path: {
        /**
         * @description Offender number
         * @example AB1234K
         */
        offenderNo: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateSentenceRequest']
      }
    }
    responses: {
      /** @description Created Sentence */
      201: {
        content: {
          'application/json': components['schemas']['CreateSentenceResponse']
        }
      }
      /** @description Supplied data is invalid, for instance missing required fields or invalid values. See schema for details */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Offender does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * get court cases for an offender
   * @description Requires role NOMIS_SENTENCING. Retrieves a court case by id
   */
  getCourtCasesByOffender: {
    parameters: {
      path: {
        /**
         * @description Offender No
         * @example AA12345
         */
        offenderNo: string
      }
    }
    responses: {
      /** @description the list of court cases */
      200: {
        content: {
          'application/json': components['schemas']['CourtCaseResponse'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Offender not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Creates a new Court Case
   * @description Required role NOMIS_SENTENCING Creates a new Court Case for the offender and latest booking
   */
  createCourtCase: {
    parameters: {
      path: {
        /**
         * @description Offender No
         * @example AK1234B
         */
        offenderNo: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCourtCaseRequest']
      }
    }
    responses: {
      /** @description Created Court case */
      201: {
        content: {
          'application/json': components['schemas']['CreateCourtCaseResponse']
        }
      }
      /** @description Supplied data is invalid, for instance missing required fields or invalid values. See schema for details */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Offender does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Creates a new Court Appearance
   * @description Required role NOMIS_SENTENCING Creates a new Court Appearance for the offender,latest booking and given Court Case
   */
  createCourtAppearance: {
    parameters: {
      path: {
        /**
         * @description Offender no
         * @example AB1234A
         */
        offenderNo: string
        /**
         * @description Case Id
         * @example 34565
         */
        caseId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CourtAppearanceRequest']
      }
    }
    responses: {
      /** @description Created Court Appearance */
      201: {
        content: {
          'application/json': components['schemas']['CreateCourtAppearanceResponse']
        }
      }
      /** @description Supplied data is invalid, for instance missing required fields or invalid values. See schema for details */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Court case does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Creates an alert on a prisoner
   * @description Creates an alert on the prisoner's latest booking. Requires ROLE_NOMIS_ALERTS
   */
  createAlert: {
    parameters: {
      path: {
        /**
         * @description Offender no (aka prisoner number)
         * @example A1234AK
         */
        offenderNo: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAlertRequest']
      }
    }
    responses: {
      /** @description Alert Created */
      201: {
        content: {
          'application/json': components['schemas']['CreateAlertResponse']
        }
      }
      /** @description One or more fields in the request contains invalid data */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prisoner does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Active alert of this type already exists */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * creates an adjudication on the latest booking of a prisoner
   * @description Creates an adjudication. Requires ROLE_NOMIS_ADJUDICATIONS
   */
  createAdjudication: {
    parameters: {
      path: {
        /**
         * @description Offender Noms Id
         * @example A1234ZZ
         */
        offenderNo: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAdjudicationRequest']
      }
    }
    responses: {
      /** @description Adjudication Created Returned */
      201: {
        content: {
          'application/json': components['schemas']['AdjudicationResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prisoner does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Adjudication already exists */
      409: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Gets prisoner details for a list of bookings
   * @description Requires role SYNCHRONISATION_REPORTING.
   */
  getPrisonerBookings: {
    requestBody: {
      content: {
        'application/json': string
      }
    }
    responses: {
      /** @description list of prisoner details */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerDetails'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role SYNCHRONISATION_REPORTING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Creates a new sentence adjustment
   * @description Required role NOMIS_SENTENCING Creates a new sentence adjustment (aka Debit/Credit). Key dates will not be recalculated as a side effect of this operation
   */
  createSentenceAdjustment: {
    parameters: {
      path: {
        /**
         * @description Booking Id
         * @example 12345
         */
        bookingId: string
        /**
         * @description Sentence sequence number
         * @example 1
         */
        sentenceSequence: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateSentenceAdjustmentRequest']
      }
    }
    responses: {
      /** @description Created Sentence adjustment id */
      201: {
        content: {
          'application/json': components['schemas']['CreateAdjustmentResponse']
        }
      }
      /** @description Supplied data is invalid, for instance missing required fields or invalid values. See schema for details */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Booking or sentence sequence do not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Creates a new incentive
   * @description Creates a new incentive using next sequence no.
   */
  createIncentive: {
    parameters: {
      path: {
        /**
         * @description Offender Booking Id
         * @example 1234567
         */
        bookingId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateIncentiveRequest']
      }
    }
    responses: {
      /** @description Incentive information with created sequence */
      201: {
        content: {
          'application/json': components['schemas']['CreateIncentiveResponse']
        }
      }
      /** @description Prison or iep value do not exist */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description booking does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Reorder a existing incentives to match time order
   * @description Reorder a series of IEPs so the sequence number matches the IEP date time. Latest time gets the higher sequence so the current IEP is the latest. This is required to correct DPS incentives that are created out of order
   */
  reorderCurrentIncentives: {
    parameters: {
      path: {
        /**
         * @description Offender Booking Id
         * @example 1234567
         */
        bookingId: string
      }
    }
    responses: {
      /** @description Incentives successfully reordered */
      200: {
        content: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access this endpoint forbidden, incorrect role. Must have NOMIS_INCENTIVES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description booking does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Creates a new key date adjustment
   * @description Required role NOMIS_SENTENCING Creates a new key date adjustment. Key dates will be recalculated as a side effect of this operation
   */
  createKeyDateAdjustment: {
    parameters: {
      path: {
        /**
         * @description Booking Id
         * @example 12345
         */
        bookingId: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateKeyDateAdjustmentRequest']
      }
    }
    responses: {
      /** @description Created key date adjustment */
      201: {
        content: {
          'application/json': components['schemas']['CreateAdjustmentResponse']
        }
      }
      /** @description Supplied data is invalid, for instance missing required fields or invalid values. See schema for details */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Booking does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Creates a new non-association
   * @description Creates a new non-association. Requires role NOMIS_NON_ASSOCIATIONS
   */
  createNonAssociation: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateNonAssociationRequest']
      }
    }
    responses: {
      /** @description Successfully created non-association */
      201: {
        content: {
          'application/json': components['schemas']['CreateNonAssociationResponse']
        }
      }
      /** @description Invalid data such as booking or location do not exist etc. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_NON_ASSOCIATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Creates a new location
   * @description Creates a new location. Requires role ROLE_NOMIS_LOCATIONS
   */
  createLocation: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateLocationRequest']
      }
    }
    responses: {
      /** @description Successfully created location with created id */
      201: {
        content: {
          'application/json': components['schemas']['LocationIdResponse']
        }
      }
      /** @description Invalid data such as prison or parent do not exist etc. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, correct role not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Creates a new global incentive level
   * @description Creates a new global incentive level
   */
  createGlobalIncentiveLevel: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateIncentiveRequest']
      }
    }
    responses: {
      /** @description Global Incentive level */
      201: {
        content: {
          'application/json': components['schemas']['ReferenceCode']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * reorders all global incentive levels
   * @description reorders all global incentive levels using provided list of Incentive codes, including inactive. 1-based index
   */
  reorderGlobalIncentiveLevels: {
    requestBody: {
      content: {
        'application/json': components['schemas']['ReorderRequest']
      }
    }
    responses: {
      /** @description Reorder successful */
      200: {
        content: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Prison Incentive level data
   * @description Creates incentive level data associated with a Prison
   */
  createPrisonIncentiveLevelData: {
    parameters: {
      path: {
        /**
         * @description Prison Id
         * @example MDI
         */
        prison: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePrisonIncentiveRequest']
      }
    }
    responses: {
      /** @description Prison Incentive level data created */
      201: {
        content: {
          'application/json': components['schemas']['PrisonIncentiveLevelDataResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Creates a new appointment
   * @description Creates a new appointment. Requires role NOMIS_APPOINTMENTS
   */
  createAppointment: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAppointmentRequest']
      }
    }
    responses: {
      /** @description Appointment information with created id */
      201: {
        content: {
          'application/json': components['schemas']['CreateAppointmentResponse']
        }
      }
      /** @description Invalid data such as booking or location do not exist etc. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_APPOINTMENTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * creates a hearing for a given adjudication
   * @description Creates a hearing for a given adjudication. Requires ROLE_NOMIS_ADJUDICATIONS
   */
  createHearing: {
    parameters: {
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateHearingRequest']
      }
    }
    responses: {
      /** @description Hearing Created Returned */
      201: {
        content: {
          'application/json': components['schemas']['CreateHearingResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Adjudication does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * creates or updates a hearing result for a given hearing and charge.
   * @description Creates a (or updates the existing) hearing result for a given hearing and charge. DPS only supports 1 result per hearing. Requires ROLE_NOMIS_ADJUDICATIONS
   */
  upsertHearingResult: {
    parameters: {
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: string
        /**
         * @description Nomis Hearing Id
         * @example 123
         */
        hearingId: string
        /**
         * @description Nomis charge sequence
         * @example 1
         */
        chargeSequence: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateHearingResultRequest']
      }
    }
    responses: {
      /** @description Hearing result created */
      201: {
        content: {
          'application/json': components['schemas']['CreateHearingResultResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Hearing does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Deletes a hearing result
   * @description Deletes a hearing result for a given adjudication and hearing Id. Returns list of any deleted award Ids to allow removal of award mappings in the sync service. Requires ROLE_NOMIS_ADJUDICATIONS
   */
  deleteHearingResult: {
    parameters: {
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: string
        /**
         * @description Hearing Id
         * @example 12345
         */
        hearingId: string
        /**
         * @description Nomis charge sequence
         * @example 1
         */
        chargeSequence: string
      }
    }
    responses: {
      /** @description Hearing result deleted */
      200: {
        content: {
          'application/json': components['schemas']['DeleteHearingResultResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Adjudication does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * creates or updates a result for a given charge. This requires a dummy hearing to be created
   * @description Creates or updates a result for a charge. DPS allows results to be created without hearings eg: Refer to Police. Requires ROLE_NOMIS_ADJUDICATIONS
   */
  createResultWithDummyHearing: {
    parameters: {
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: string
        /**
         * @description Nomis charge sequence
         * @example 1
         */
        chargeSequence: string
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateHearingResultRequest']
      }
    }
    responses: {
      /** @description Result created */
      201: {
        content: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Adjudication does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Deletes a result
   * @description Deletes a result for a given adjudication and charge sequence. The result will be associated with a dummy hearing used by DPS to record referrals. Requires ROLE_NOMIS_ADJUDICATIONS
   */
  deleteResult: {
    parameters: {
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: string
        /**
         * @description Nomis charge sequence
         * @example 1
         */
        chargeSequence: string
      }
    }
    responses: {
      /** @description result deleted */
      200: {
        content: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Adjudication does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Creates a new activity
   * @description Creates a new activity and associated pay rates. Requires role NOMIS_ACTIVITIES
   */
  createActivity: {
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateActivityRequest']
      }
    }
    responses: {
      /** @description Activity information with created id */
      201: {
        content: {
          'application/json': components['schemas']['CreateActivityResponse']
        }
      }
      /** @description Prison, location, program service or iep value do not exist */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * get visit
   * @description Retrieves a visit by id.
   */
  getVisit: {
    parameters: {
      path: {
        /**
         * @description Nomis Visit Id
         * @example 12345
         */
        visitId: string
      }
    }
    responses: {
      /** @description Visit Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['VisitResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description visit does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * get future visit room usage by filter
   * @description Retrieves a list of rooms with usage count for the (filtered) visits. Only future visits are included
   */
  getVisitRoomCountsByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /**
         * @description Filter results by prison ids (returns all prisons if not specified)
         * @example ['MDI','LEI']
         */
        prisonIds?: string[]
        /**
         * @description Filter results by visitType (returns all types if not specified)
         * @example ['SCON','OFFI']
         */
        visitTypes?: string[]
        /**
         * @description Filter results by visits that were created on or after the given timestamp
         * @example 2021-11-03T09:00:00
         */
        fromDateTime?: string
        /**
         * @description Filter results by visits that were created on or before the given timestamp
         * @example 2021-11-03T09:00:00
         */
        toDateTime?: string
        /**
         * @description Filter results by restricting to future visit usage only
         * @example true
         */
        futureVisitsOnly?: boolean
      }
    }
    responses: {
      /** @description list of visit room and count is returned */
      200: {
        content: {
          'application/json': components['schemas']['VisitRoomCountResponse'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * get visits by filter
   * @description Retrieves a paged list of visits by filter
   */
  getVisitsByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /**
         * @description Filter results by prison ids (returns all prisons if not specified)
         * @example ['MDI','LEI']
         */
        prisonIds?: string[]
        /**
         * @description Filter results by visitType (returns all types if not specified)
         * @example ['SCON','OFFI']
         */
        visitTypes?: string[]
        /**
         * @description Filter results by visits that were created on or after the given timestamp
         * @example 2021-11-03T09:00:00
         */
        fromDateTime?: string
        /**
         * @description Filter results by visits that were created on or before the given timestamp
         * @example 2021-11-03T09:00:00
         */
        toDateTime?: string
      }
    }
    responses: {
      /** @description Pageable list of visit ids is returned */
      200: {
        content: {
          'application/json': components['schemas']['PageVisitIdResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Retrieve a list of prisons switched on for the service
   * @description Retrieves all prisons switched on for the service code, or an empty list if there are none. Requires role SYNCHRONISATION_REPORTING
   */
  getServicePrisons: {
    parameters: {
      path: {
        /** @description The code of the service from the EXTERNAL_SERVICES table */
        serviceCode: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['PrisonDetails'][]
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role SYNCHRONISATION_REPORTING */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get incident questionnaire details
   * @description Gets incident questionnaire details. Requires role NOMIS_INCIDENTS
   */
  getQuestionnaire: {
    parameters: {
      path: {
        /** @description Incident Questionnaire id */
        questionnaireId: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['QuestionnaireResponse']
        }
      }
      /** @description Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_INCIDENTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * get questionnaire IDs by filter
   * @description Retrieves a paged list of incident questionnaire ids by filter. Requires ROLE_NOMIS_INCIDENTS.
   */
  getIdsByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /**
         * @description Filter results by those that were created on or after the given date
         * @example 2021-11-03
         */
        fromDate?: string
        /**
         * @description Filter results by those that were created on or before the given date
         * @example 2021-11-03
         */
        toDate?: string
      }
    }
    responses: {
      /** @description Pageable list of ids are returned */
      200: {
        content: {
          'application/json': components['schemas']['PageQuestionnaireIdResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_INCIDENTS not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Retrieve a list of active incentive levels for a prison
   * @description Retrieve a list of active incentive levels for a prison. Requires role NOMIS_ACTIVITIES
   */
  getPrisonIncentiveLevels: {
    parameters: {
      path: {
        /** @description The prison ID */
        prisonId: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['IncentiveLevel'][]
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role SYNCHRONISATION_REPORTING */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prison not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * get an offender charge
   * @description Requires role NOMIS_SENTENCING. Retrieves offender charge details. Offender Charges are at the booking level.
   */
  getOffenderCharge: {
    parameters: {
      path: {
        /**
         * @description Offender Charge id
         * @example 12345
         */
        offenderChargeId: string
        /**
         * @description Offender No
         * @example 12345
         */
        offenderNo: string
      }
    }
    responses: {
      /** @description the court appearance details */
      200: {
        content: {
          'application/json': components['schemas']['OffenderChargeResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Offender not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * get a court case
   * @description Requires role NOMIS_SENTENCING. Retrieves a court case by id
   */
  getCourtCase: {
    parameters: {
      path: {
        /**
         * @description Court case id
         * @example 12345
         */
        id: string
        /**
         * @description Offender No
         * @example 12345
         */
        offenderNo: string
      }
    }
    responses: {
      /** @description the court case details */
      200: {
        content: {
          'application/json': components['schemas']['CourtCaseResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Offender not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * get a court appearance
   * @description Requires role NOMIS_SENTENCING. Retrieves a court appearance by id
   */
  getCourtAppearance: {
    parameters: {
      path: {
        /**
         * @description Court appearance id
         * @example 12345
         */
        id: string
        /**
         * @description Offender No
         * @example 12345
         */
        offenderNo: string
      }
    }
    responses: {
      /** @description the court appearance details */
      200: {
        content: {
          'application/json': components['schemas']['CourtEventResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Offender not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Gets prisoner's list of merge details since a given date. Either the current offenderNo or the previous offenderNo can be used to search for merges.
   * @description Requires role SYNCHRONISATION_REPORTING.
   */
  getPrisonerMerges: {
    parameters: {
      query?: {
        /** @description The earliest date to search for merges from */
        fromDate?: string
      }
      path: {
        /**
         * @description Offender Noms Id
         * @example A1234ZZ
         */
        offenderNo: string
      }
    }
    responses: {
      /** @description list of prisoner merges */
      200: {
        content: {
          'application/json': components['schemas']['MergeDetail'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role SYNCHRONISATION_REPORTING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Gets a prisoner's previous booking relative to the supplied booking id
   * @description Requires role NOMIS_ALERTS.
   */
  getPreviousBooking: {
    parameters: {
      path: {
        /**
         * @description Offender Noms Id
         * @example A1234ZZ
         */
        offenderNo: string
        /**
         * @description Booking Id
         * @example 123
         */
        bookingId: string
      }
    }
    responses: {
      /** @description Ids of booking */
      200: {
        content: {
          'application/json': components['schemas']['PreviousBookingId']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_ALERTS not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Booking or prisoner does not exist or has no previous booking */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Gets alert for latest booking plus unique list of alerts from previous bookings for a prisoner
   * @description Retrieves alerts for a prisoner across all bookings. The latest booking all alerts will be returned, from the previous bookings the list will contain at most one alert per alert code type ordered by alert date with latest alert taken. Requires ROLE_NOMIS_ALERTS
   */
  getAlertsToMigrate: {
    parameters: {
      path: {
        /**
         * @description Offender No AKA prisoner number
         * @example A1234AK
         */
        offenderNo: string
      }
    }
    responses: {
      /** @description Alerts Returned */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerAlertsResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prisoner does not exist or has no bookings */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Gets active alerts for latest booking plus unique list of alerts from previous bookings for a prisoner
   * @description Retrieves active alerts for a prisoner across all bookings. The latest booking all active alerts will be returned, from the previous bookings the list will contain at most one alert per alert code that is active type ordered by alert date with latest alert taken. Requires ROLE_NOMIS_ALERTS
   */
  getActiveAlertsForReconciliation: {
    parameters: {
      path: {
        /**
         * @description Offender No AKA prisoner number
         * @example A1234AK
         */
        offenderNo: string
      }
    }
    responses: {
      /** @description Active Alerts Returned */
      200: {
        content: {
          'application/json': components['schemas']['PrisonerAlertsResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prisoner does not exist or has no bookings */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Gets the identifiers for all prisoners. By default only active prisoners will be return unless active=false
   * @description Requires role SYNCHRONISATION_REPORTING.
   */
  getPrisonerIdentifiers: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /** @description When true only return active prisoners currently in prison else all prisoners that at some point has been in prison are returned */
        active?: boolean
      }
    }
    responses: {
      /** @description paged list of prisoner ids */
      200: {
        content: {
          'application/json': components['schemas']['PagePrisonerId']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role SYNCHRONISATION_REPORTING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * get sentences for an offender using the given booking id and sentence sequence
   * @description Requires role NOMIS_SENTENCING. Retrieves a court case by id
   */
  getOffenderSentence: {
    parameters: {
      path: {
        /**
         * @description Sentence sequence
         * @example 1
         */
        sequence: string
        /**
         * @description Offender Booking Id
         * @example 12345
         */
        bookingId: string
      }
    }
    responses: {
      /** @description the sentence details */
      200: {
        content: {
          'application/json': components['schemas']['SentenceResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Offender booking not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * get court cases for an offender booking
   * @description Requires role NOMIS_SENTENCING. Retrieves a court case by id
   */
  getCourtCasesByOffenderBooking: {
    parameters: {
      path: {
        /**
         * @description Booking Id
         * @example 12345
         */
        bookingId: string
      }
    }
    responses: {
      /** @description the list of court cases */
      200: {
        content: {
          'application/json': components['schemas']['CourtCaseResponse'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Offender booking not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * get active sentence and key date adjustments for a booking
   * @description Retrieves all the current active sentence and key date adjustments (by booking) for a prisoner. Requires NOMIS_SENTENCING.
   */
  getActiveAdjustments: {
    parameters: {
      query: {
        /** @description Indicate if should return just active adjustments */
        'active-only': string
      }
      path: {
        /**
         * @description NOMIS booking Id
         * @example 12345
         */
        bookingId: string
      }
    }
    responses: {
      /** @description the list of adjustments details */
      200: {
        content: {
          'application/json': components['schemas']['SentencingAdjustmentsResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * get hearing result award by Id
   * @description Retrieves a hearing result by the Id (bookingId and sanctionSequence). Requires ROLE_NOMIS_ADJUDICATIONS
   */
  getAdjudicationHearingResultAward: {
    parameters: {
      path: {
        /**
         * @description NOMIS booking Id
         * @example 12345
         */
        bookingId: string
        /**
         * @description Nomis sanction sequence
         * @example 1
         */
        sanctionSequence: string
      }
    }
    responses: {
      /** @description Hearing result award Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['AdjudicationResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Hearing result award does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get ADA award summary result award by booking
   * @description Retrieves a summary of ADA awards along with associated adjudication for a given booking. Requires ROLE_NOMIS_ADJUDICATIONS
   */
  getAdjudicationADASummary: {
    parameters: {
      path: {
        /**
         * @description NOMIS booking Id
         * @example 12345
         */
        bookingId: string
      }
    }
    responses: {
      /** @description ADA Summary award Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['AdjudicationADAAwardSummaryResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Booking does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Gets alert for booking
   * @description Retrieves alerts for a specific booking. Requires ROLE_NOMIS_ALERTS
   */
  getAlertsByBookingId: {
    parameters: {
      path: {
        /**
         * @description Booking id
         * @example 12345
         */
        bookingId: string
      }
    }
    responses: {
      /** @description Alerts Returned */
      200: {
        content: {
          'application/json': components['schemas']['BookingAlertsResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Booking does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * get an alert by bookingId and alert sequence
   * @description Retrieves an prisoner alert. Requires ROLE_NOMIS_ALERTS
   */
  getAlert: {
    parameters: {
      path: {
        /**
         * @description Booking Id
         * @example 12345
         */
        bookingId: string
        /**
         * @description Alert sequence
         * @example 3
         */
        alertSequence: string
      }
    }
    responses: {
      /** @description Alert Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['AlertResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Alert does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get an open non-association
   * @description Get the open non-association for the two offender numbers. Requires role NOMIS_NON_ASSOCIATIONS
   */
  getNonAssociation: {
    parameters: {
      query?: {
        /**
         * @description Sequence number. If present, get this detail record, otherwise get the open record if there is one.
         * @example 2
         */
        typeSequence?: number
      }
      path: {
        /**
         * @description Offender
         * @example A3456GH
         */
        offenderNo: string
        /**
         * @description Non-association offender
         * @example A4578ED
         */
        nsOffenderNo: string
      }
    }
    responses: {
      /** @description Non-association information */
      200: {
        content: {
          'application/json': components['schemas']['NonAssociationResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_NON_ASSOCIATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No open non-association exists for these offender numbers, or one of the offenders does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get all non-associations for the two offender numbers
   * @description Get all non-associations for the two offender numbers, including expired. Requires role NOMIS_NON_ASSOCIATIONS
   */
  getNonAssociationDetails: {
    parameters: {
      path: {
        /**
         * @description Offender
         * @example A3456GH
         */
        offenderNo: string
        /**
         * @description Non-association offender
         * @example A4578ED
         */
        nsOffenderNo: string
      }
    }
    responses: {
      /** @description List of non-associations */
      200: {
        content: {
          'application/json': components['schemas']['NonAssociationResponse'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_NON_ASSOCIATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Non-association does not exist, or one of the offenders does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * get non-associations by filter
   * @description Retrieves a paged list of composite ids by filter. Requires ROLE_NOMIS_NON_ASSOCIATIONS.
   */
  getNonAssociationsByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
      }
    }
    responses: {
      /** @description Pageable list of composite ids are returned */
      200: {
        content: {
          'application/json': components['schemas']['PageNonAssociationIdResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_NON_ASSOCIATIONS not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get a location
   * @description Get the location given the id. Requires role ROLE_NOMIS_LOCATIONS
   */
  getLocation: {
    parameters: {
      path: {
        /**
         * @description Location id
         * @example 12345678
         */
        id: number
      }
    }
    responses: {
      /** @description Location information */
      200: {
        content: {
          'application/json': components['schemas']['LocationResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, correct role not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No location exists for this id */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get a location
   * @description Get the location given the business key. Requires role ROLE_NOMIS_LOCATIONS
   */
  getLocationByKey: {
    parameters: {
      path: {
        /**
         * @description Location id
         * @example LEI-B-3-014
         */
        key: string
      }
    }
    responses: {
      /** @description Location information */
      200: {
        content: {
          'application/json': components['schemas']['LocationResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, correct role not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No location exists for this id */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * get locations by filter
   * @description Retrieves a paged list of composite ids by filter. Requires ROLE_NOMIS_LOCATIONS.
   */
  getLocationsByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
      }
    }
    responses: {
      /** @description Pageable list of ids is returned */
      200: {
        content: {
          'application/json': components['schemas']['PageLocationIdResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role ROLE_NOMIS_LOCATIONS not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get incident details
   * @description Gets incident details. Requires role NOMIS_INCIDENTS
   */
  getIncident: {
    parameters: {
      path: {
        /** @description Incident id */
        incidentId: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['IncidentResponse']
        }
      }
      /** @description Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_INCIDENTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * get incident IDs by filter
   * @description Retrieves a paged list of incident ids by filter. Requires ROLE_NOMIS_INCIDENTS.
   */
  getIdsByFilter_1: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /**
         * @description Filter results by those that were created on or after the given date
         * @example 2021-11-03
         */
        fromDate?: string
        /**
         * @description Filter results by those that were created on or before the given date
         * @example 2021-11-03
         */
        toDate?: string
      }
    }
    responses: {
      /** @description Pageable list of ids are returned */
      200: {
        content: {
          'application/json': components['schemas']['PageIncidentIdResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_INCIDENTS not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * get incentives (a.k.a IEP) by filter
   * @description Retrieves a paged list of incentive composite ids by filter. Requires ROLE_NOMIS_INCENTIVES.
   */
  getIncentivesByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /**
         * @description Filter results by incentives that were created on or after the given date
         * @example 2021-11-03
         */
        fromDate?: string
        /**
         * @description Filter results by incentives that were created on or before the given date
         * @example 2021-11-03
         */
        toDate?: string
        /**
         * @description if true only retrieve latest incentive for each prisoner
         * @example true
         */
        latestOnly?: boolean
      }
    }
    responses: {
      /** @description Pageable list of composite ids are returned */
      200: {
        content: {
          'application/json': components['schemas']['PageIncentiveIdResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * get a prisoner's incentive level (a.k.a IEP) by id (bookingId and incentiveId)
   * @description Retrieves a created incentive level for a prisoner. Requires ROLE_NOMIS_INCENTIVES.
   */
  getIncentive: {
    parameters: {
      path: {
        /**
         * @description NOMIS booking Id
         * @example 12345
         */
        bookingId: string
        /**
         * @description NOMIS Incentive sequence
         * @example 1
         */
        incentiveSequence: string
      }
    }
    responses: {
      /** @description the incentive level details */
      200: {
        content: {
          'application/json': components['schemas']['IncentiveResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * get a prisoner's current incentive level (a.k.a IEP) for a booking
   * @description Retrieves the current incentive level (by booking) for a prisoner. Requires ROLE_NOMIS_INCENTIVES.
   */
  getCurrentIncentive: {
    parameters: {
      path: {
        /**
         * @description NOMIS booking Id
         * @example 12345
         */
        bookingId: string
      }
    }
    responses: {
      /** @description the incentive level details */
      200: {
        content: {
          'application/json': components['schemas']['IncentiveResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Retrieve a document
   * @description Retrieve a document by its id. Requires role NOMIS_DOCUMENTS
   */
  getDocument: {
    parameters: {
      path: {
        /** @description The document id */
        id: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/octet-stream': string
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_DOCUMENTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Document not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Retrieve a list of document ids
   * @description Retrieve a list of document ids searching by booking id and template name. Requires role NOMIS_DOCUMENTS
   */
  getDocumentIds: {
    parameters: {
      query: {
        /**
         * @description The unique name of the template used for a document - this is a repeatable request parameter
         * @example CSIP_FAC
         */
        templateName: string[]
      }
      path: {
        /** @description The booking id */
        bookingId: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['DocumentIdResponse'][]
        }
      }
      /** @description Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_DOCUMENTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get CSIP details
   * @description Gets csip details. Requires role NOMIS_CSIP
   */
  getCSIP: {
    parameters: {
      path: {
        /** @description CSIP id */
        id: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['CSIPResponse']
        }
      }
      /** @description Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_CSIP */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * get csip IDs by filter
   * @description Retrieves a paged list of csip ids by filter. Requires ROLE_NOMIS_CSIP.
   */
  getIdsByFilter_2: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /**
         * @description Filter results by those that were created on or after the given date
         * @example 2021-11-03
         */
        fromDate?: string
        /**
         * @description Filter results by those that were created on or before the given date
         * @example 2021-11-03
         */
        toDate?: string
      }
    }
    responses: {
      /** @description Pageable list of ids are returned */
      200: {
        content: {
          'application/json': components['schemas']['PageCSIPIdResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_CSIP not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get csip count
   * @description Gets a count of all csips. Requires role NOMIS_CSIP
   */
  getCSIPCount: {
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': number
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_CSIP */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get data for an attendance sync reconciliation
   * @description Gets the number of active attendances for each booking in the prison
   */
  getAttendanceReconciliationSummary: {
    parameters: {
      query: {
        /** @description Date */
        date: string
      }
      path: {
        /** @description Prison id */
        prisonId: string
      }
    }
    responses: {
      /** @description Reconciliation data returned */
      200: {
        content: {
          'application/json': components['schemas']['AttendanceReconciliationResponse']
        }
      }
      /** @description Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get appointment by event id
   * @description Get an appointment given the unique event id. Requires role NOMIS_APPOINTMENTS
   */
  getAppointmentById: {
    parameters: {
      path: {
        /**
         * @description Event Id
         * @example 12345678
         */
        eventId: string
      }
    }
    responses: {
      /** @description Appointment information with created id */
      200: {
        content: {
          'application/json': components['schemas']['AppointmentResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_APPOINTMENTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Booking, location and timestamp combination does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * get appointments by filter
   * @description Retrieves a paged list of appointment ids by filter. Requires ROLE_NOMIS_APPOINTMENTS.
   */
  getAppointmentsByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /**
         * @description Filter results by prison ids
         * @example ['MDI','LEI']
         */
        prisonIds: string[]
        /**
         * @description Filter results by appointments that were created on or after the given date
         * @example 2021-11-03
         */
        fromDate?: string
        /**
         * @description Filter results by appointments that were created on or before the given date
         * @example 2022-04-11
         */
        toDate?: string
      }
    }
    responses: {
      /** @description Pageable list of composite ids are returned */
      200: {
        content: {
          'application/json': components['schemas']['PageAppointmentIdResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get appointment counts by prison, event sub type and future / past. Note that the 'future' is everything from tomorrow onwards.
   * @description Retrieves counts of appointments for the migration preview. Requires ROLE_NOMIS_APPOINTMENTS.
   */
  getAppointmentCounts: {
    parameters: {
      query: {
        /**
         * @description Filter results by prison ids
         * @example ['MDI','LEI']
         */
        prisonIds: string[]
        /**
         * @description Filter results by appointments that were created on or after the given date
         * @example 2021-11-03
         */
        fromDate?: string
        /**
         * @description Filter results by appointments that were created on or before the given date
         * @example 2022-04-11
         */
        toDate?: string
      }
    }
    responses: {
      /** @description Appointment counts returned */
      200: {
        content: {
          'application/json': components['schemas']['AppointmentCountsResponse'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get an appointment
   * @description Get an appointment given the booking id, internal location, date and start time. Requires role NOMIS_APPOINTMENTS
   */
  getAppointment: {
    parameters: {
      path: {
        /**
         * @description NOMIS booking Id
         * @example 1234567
         */
        bookingId: string
        /**
         * @description Appointment room internal location Id
         * @example 1234567
         */
        locationId: string
        /**
         * @description Appointment date and start time
         * @example 2023-02-27T14:40
         */
        dateTime: string
      }
    }
    responses: {
      /** @description Appointment information with created id */
      200: {
        content: {
          'application/json': components['schemas']['AppointmentResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_APPOINTMENTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Booking, location and timestamp combination does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get allocation details
   * @description Gets allocation details. Requires role NOMIS_ACTIVITIES
   */
  getAllocation: {
    parameters: {
      path: {
        /** @description Allocation id */
        allocationId: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['GetAllocationResponse']
        }
      }
      /** @description Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Find suspended allocations
   * @description Searches for suspended prisoners on active course allocations. Requires role NOMIS_ACTIVITIES
   */
  findSuspendedAllocations: {
    parameters: {
      query: {
        /** @description Prison id */
        prisonId: string
        /** @description Exclude program codes */
        excludeProgramCode?: string
        /** @description Course Activity ID */
        courseActivityId?: number
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['FindSuspendedAllocationsResponse'][]
        }
      }
      /** @description Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get data for an allocation sync reconciliation
   * @description Gets the number of active allocations for each booking in the prison
   */
  getAllocationReconciliationSummary: {
    parameters: {
      path: {
        /** @description Prison id */
        prisonId: string
      }
    }
    responses: {
      /** @description Reconciliation data returned */
      200: {
        content: {
          'application/json': components['schemas']['AllocationReconciliationResponse']
        }
      }
      /** @description Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Find allocations with missing pay bands
   * @description Searches for prisoners allocated to a course activity without a pay band assigned. Requires role NOMIS_ACTIVITIES
   */
  findAllocationsWithMissingPayBands: {
    parameters: {
      query: {
        /** @description Prison id */
        prisonId: string
        /** @description Exclude program codes */
        excludeProgramCode?: string
        /** @description Course Activity ID */
        courseActivityId?: number
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['FindAllocationsMissingPayBandsResponse'][]
        }
      }
      /** @description Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Find paged active allocations
   * @description Searches for active course allocations. Requires role NOMIS_ACTIVITIES
   */
  findActiveAllocations: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /** @description Prison id */
        prisonId: string
        /** @description Exclude program codes */
        excludeProgramCode?: string
        /** @description Course Activity ID */
        courseActivityId?: number
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['PageFindActiveAllocationIdsResponse']
        }
      }
      /** @description Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Get alert IDs by filter
   * @description Retrieves a paged list of alert ids by filter. Requires ROLE_NOMIS_ALERTS.
   */
  getAlertIdsByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /**
         * @description Filter results by alerts that were created on or after the given date
         * @example 2021-11-03
         */
        fromDate?: string
        /**
         * @description Filter results by alerts that were created on or before the given date
         * @example 2021-11-03
         */
        toDate?: string
      }
    }
    responses: {
      /** @description Pageable list of ids are returned */
      200: {
        content: {
          'application/json': components['schemas']['PageAlertIdResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role ROLE_NOMIS_ALERTS not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * get adjustment IDs (key date and Sentence adjustments) by filter
   * @description Retrieves a paged list of adjustment ids by filter. Requires ROLE_NOMIS_SENTENCING.
   */
  getAdjustmentsByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /**
         * @description Filter results by adjustments that were created on or after the given date
         * @example 2021-11-03
         */
        fromDate?: string
        /**
         * @description Filter results by adjustments that were created on or before the given date
         * @example 2021-11-03
         */
        toDate?: string
      }
    }
    responses: {
      /** @description Pageable list of ids are returned */
      200: {
        content: {
          'application/json': components['schemas']['PageAdjustmentIdResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * get hearing by hearing Id
   * @description Retrieves a hearing by the hearing Id. Requires ROLE_NOMIS_ADJUDICATIONS
   */
  getAdjudicationHearing: {
    parameters: {
      path: {
        /**
         * @description NOMIS Hearing Id
         * @example 12345
         */
        hearingId: string
      }
    }
    responses: {
      /** @description Hearing Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['AdjudicationResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Hearing does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * get hearing result by hearing id
   * @description Retrieves a hearing result by the nomis hearing id. DPS migrated and synchronised hearing results always have a result sequence of 1 Requires ROLE_NOMIS_ADJUDICATIONS
   */
  getAdjudicationHearingResult: {
    parameters: {
      path: {
        /**
         * @description NOMIS Hearing Id
         * @example 12345
         */
        hearingId: string
        /**
         * @description Nomis charge sequence
         * @example 1
         */
        chargeSequence: string
      }
    }
    responses: {
      /** @description Hearing Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['AdjudicationResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Hearing result does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * get adjudication charge IDs by filter
   * @description Retrieves a paged list of adjudication charge ids by filter. Requires ROLE_NOMIS_ADJUDICATIONS.
   */
  getAdjudicationChargeIdsByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /**
         * @description Filter results by adjudication charges that were created on or after the given date
         * @example 2021-11-03
         */
        fromDate?: string
        /**
         * @description Filter results by adjudication charges that were created on or before the given date
         * @example 2021-11-03
         */
        toDate?: string
        /**
         * @description Filter results by adjudication charges that were created in one of the given prisons
         * @example MDI
         */
        prisonIds?: string[]
      }
    }
    responses: {
      /** @description Pageable list of ids are returned */
      200: {
        content: {
          'application/json': components['schemas']['PageAdjudicationChargeIdResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_ADJUDICATIONS not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * get adjudication by adjudication number
   * @description Retrieves an adjudication by the adjudication number. Requires ROLE_NOMIS_ADJUDICATIONS
   */
  getAdjudication: {
    parameters: {
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: string
      }
    }
    responses: {
      /** @description Adjudication Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['AdjudicationResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Adjudication does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * get adjudication by adjudication number and charge sequence
   * @description Retrieves an adjudication by the adjudication number and charge sequence. Will only return the specified charge. Requires ROLE_NOMIS_ADJUDICATIONS
   */
  getAdjudicationByCharge: {
    parameters: {
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: string
        /**
         * @description Charge sequence
         * @example 1
         */
        chargeSequence: string
      }
    }
    responses: {
      /** @description Adjudication with charge information returned */
      200: {
        content: {
          'application/json': components['schemas']['AdjudicationChargeResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Adjudication or adjudication charge does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Find activities with pay rates with unknown incentive level
   * @description Searches for course activities that have an active pay rate with an unknown incentive level. Requires role NOMIS_ACTIVITIES
   */
  findRatesWithUnknownIncentiveLevel: {
    parameters: {
      query: {
        /** @description Prison id */
        prisonId: string
        /** @description Exclude program codes */
        excludeProgramCode?: string
        /** @description Course Activity ID */
        courseActivityId?: number
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['FindPayRateWithUnknownIncentiveResponse'][]
        }
      }
      /** @description Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Find paged active activities
   * @description Searches for active course activities with allocated prisoners. Requires role NOMIS_ACTIVITIES
   */
  findActiveActivities: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /** @description Prison id */
        prisonId: string
        /** @description Exclude program codes */
        excludeProgramCode?: string
        /** @description Course Activity ID */
        courseActivityId?: number
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['PageFindActiveActivityIdsResponse']
        }
      }
      /** @description Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * **** Used to recover from a duplicate incident creation only ***** Deletes an incident by adjudication number.
   * @description Deletes an incident by adjudication number. Supports the removal of a duplicate incident without a DPS mapping. Requires ROLE_NOMIS_ADJUDICATIONS
   */
  deleteIncident: {
    parameters: {
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: string
      }
    }
    responses: {
      /** @description Incident deleted */
      200: {
        content: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Delete a NOMIS attendance (from OFFENDER_COURSE_ATTENDANCES table)
   * @description Deletes an attendance from NOMIS. Requires role NOMIS_ACTIVITIES
   */
  deleteAttendance: {
    parameters: {
      path: {
        eventId: number
      }
    }
    responses: {
      /** @description Attendance is deleted */
      204: {
        content: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /**
   * Delete a NOMIS allocation (from OFFENDER_PROGRAM_PROFILES table)
   * @description Deletes an allocation from NOMIS and any children - pay rates, attendances. Requires role NOMIS_ACTIVITIES
   */
  deleteAllocation: {
    parameters: {
      path: {
        referenceId: number
      }
    }
    responses: {
      /** @description Allocation is deleted */
      204: {
        content: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
