/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/sentence-adjustments/{adjustmentId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get specific sentence adjustment
     * @description Requires role NOMIS_SENTENCING. Retrieves a sentence adjustment by id
     */
    get: operations['getSentenceAdjustment']
    /**
     * Updates specific sentence adjustment. The related booking and sentence can not be changed
     * @description Requires role NOMIS_SENTENCING. Updates a sentence adjustment by id
     */
    put: operations['updateSentenceAdjustment']
    post?: never
    /**
     * deletes specific sentence adjustment
     * @description Requires role NOMIS_SENTENCING. Deletes a sentence adjustment by id
     */
    delete: operations['deleteSentenceAdjustment']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/schedules/{courseScheduleId}/booking/{bookingId}/attendance': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Creates or updates an attendance record
     * @description Creates or updates an attendance for the course schedule. Requires role NOMIS_ACTIVITIES
     */
    put: operations['upsertAttendance']
    post?: never
    /**
     * Deletes an attendance record
     * @description Deletes an attendance for the course schedule. Requires role NOMIS_ACTIVITIES
     */
    delete: operations['deleteAttendance']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{offenderNo}/visits/{visitId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Updates an existing visit
     * @description Updates details of an existing visit such as the visitors and time slot
     */
    put: operations['updateVisit']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{offenderNo}/visits/{visitId}/cancel': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** Cancel a visit */
    put: operations['cancelVisit']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{offenderNo}/sentencing/court-cases/{caseId}/court-appearances/{eventId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Updates Court Appearance
     * @description Required role NOMIS_SENTENCING Updates a new Court Appearance for the offender,latest booking and given Court Case
     */
    put: operations['updateCourtAppearance']
    post?: never
    /**
     * Deletes Court Appearance
     * @description Required role NOMIS_SENTENCING Deletes s Court Appearance for the offender.
     */
    delete: operations['deleteCourtAppearance']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{offenderNo}/sentencing/court-cases/{caseId}/court-appearances/{courtEventId}/charges/{chargeId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Updates Charge
     * @description Required role NOMIS_SENTENCING Updates a Court Event Charge for the offender and given Appearance and Court Case (latest booking)
     */
    put: operations['updateCharge']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{offenderNo}/profile-details': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get profile details for a prisoner
     * @description Retrieves profile details for a prisoner and all of their aliases and bookings. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    get: operations['getProfileDetails']
    /**
     * Upsert profile details for a prisoner
     * @description Upserts profile details on the latest booking for a prisoner, if it exists. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    put: operations['upsertPhysicalAttributes']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{offenderNo}/court-cases/{caseId}/sentences/{sequence}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get sentences for an offender using the given case.booking id and sentence sequence
     * @description Requires role NOMIS_SENTENCING. Retrieves a court case by id
     */
    get: operations['getOffenderSentence']
    /**
     * Updates Sentence
     * @description Required role NOMIS_SENTENCING Updates a Sentence for the offender and latest booking
     */
    put: operations['updateSentence']
    post?: never
    /**
     * deletes a specific sentence
     * @description Requires role NOMIS_SENTENCING. Deletes a sentence by case.booking and sentence sequence
     */
    delete: operations['deleteSentence']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/booking-id/{bookingId}/alerts/{alertSequence}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get an alert by bookingId and alert sequence
     * @description Retrieves an prisoner alert. Requires ROLE_NOMIS_ALERTS
     */
    get: operations['getAlert']
    /**
     * Updates an alert on a prisoner
     * @description Updates an alert on the specified prisoner's booking which should be the latest booking. Requires ROLE_NOMIS_ALERTS
     */
    put: operations['updateAlert']
    post?: never
    /**
     * Deletes an alert by bookingId and alert sequence
     * @description Deletes an prisoner alert. Requires ROLE_NOMIS_ALERTS
     */
    delete: operations['deleteAlert']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/persons/{personId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a person by person Id
     * @description Retrieves a person and related contacts. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    get: operations['getPerson']
    /**
     * Updates a person
     * @description Updates core person data but leaves any associated data e.g contact relationships, addresses. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    put: operations['updatePerson']
    post?: never
    /**
     * Deletes a person
     * @description Deletes a person and any associated data e.g contact relationships, addresses. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    delete: operations['deletePerson']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/persons/{personId}/restriction/{personRestrictionId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Updates a global person restriction
     * @description Updates a person restriction; the restriction is estate wide. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    put: operations['updatePersonRestriction']
    post?: never
    /**
     * Deletes a global person restriction
     * @description Deletes a person restriction; the restriction is estate wide. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    delete: operations['deletePersonRestriction']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/persons/{personId}/phone/{phoneId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Updated a person global phone
     * @description Updates a person global phone in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    put: operations['updatePersonPhone']
    post?: never
    /**
     * Deleted a person global phone
     * @description Deletes a person global phone in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    delete: operations['deletePersonPhone']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/persons/{personId}/identifier/{sequence}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Updates a person identifier
     * @description Updates a person identifier in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    put: operations['updatePersonIdentifier']
    post?: never
    /**
     * Deletes a person identifier
     * @description Deletes a person identifier in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    delete: operations['deletePersonIdentifier']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/persons/{personId}/employment/{sequence}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Updates a person employment
     * @description Updates a person employment in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    put: operations['updatePersonEmployment']
    post?: never
    /**
     * Deletes a person employment
     * @description Deletes a person employment in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    delete: operations['deletePersonEmployment']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/persons/{personId}/email/{emailAddressId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Updates a person email
     * @description Updates a person email in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    put: operations['updatePersonEmail']
    post?: never
    /**
     * Deletes a person email
     * @description Deletes a person email in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    delete: operations['deletePersonEmail']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/persons/{personId}/contact/{contactId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Updates a person contact
     * @description Updates a person contact; the relationship between a prisoner and a person. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    put: operations['updatePersonContact']
    post?: never
    /**
     * Deletes a person contact
     * @description Deletes a person contact; the relationship between a prisoner and a person. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    delete: operations['deletePersonContact']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/persons/{personId}/contact/{contactId}/restriction/{contactRestrictionId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Updates a person contact restriction for a specific relationship
     * @description Updates a person contact restriction; the restriction is for a specific relationship between a prisoner and a person. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    put: operations['updatePersonContactRestriction']
    post?: never
    /**
     * Deletes a person contact restriction for a specific relationship
     * @description Deletes a person contact restriction; the restriction is for a specific relationship between a prisoner and a person. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    delete: operations['deletePersonContactRestriction']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/persons/{personId}/address/{addressId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Updates a person address
     * @description Updates a person address in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    put: operations['updatePersonAddress']
    post?: never
    /**
     * Deletes a person address
     * @description Deletes a person address in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    delete: operations['deletePersonAddress']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/persons/{personId}/address/{addressId}/phone/{phoneId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Updates a person address phone
     * @description Updates a person phone associated with an address in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    put: operations['updatedPersonAddressPhone']
    post?: never
    /**
     * Deletes a person address phone
     * @description Deletes a person phone associated with an address in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    delete: operations['deletedPersonAddressPhone']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/non-associations/offender/{offenderNo}/ns-offender/{nsOffenderNo}/sequence/{typeSequence}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Updates an existing non-association
     * @description Updates an existing non-association. Requires role NOMIS_NON_ASSOCIATIONS
     */
    put: operations['updateNonAssociation']
    post?: never
    /**
     * Deletes a non-association
     * @description Deletes the specified non-association detail record. if there was only one, the parent NA record is deleted too. Requires role NOMIS_NON_ASSOCIATIONS
     */
    delete: operations['deleteNonAssociation']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/non-associations/offender/{offenderNo}/ns-offender/{nsOffenderNo}/sequence/{typeSequence}/close': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Closes an existing non-association
     * @description Closes an existing non-association. Requires role NOMIS_NON_ASSOCIATIONS
     */
    put: operations['closeNonAssociation']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/{locationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Updates an existing location
     * @description Updates an existing location. Requires role NOMIS_LOCATIONS
     */
    put: operations['updateLocation']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/{locationId}/reactivate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Reactivates a deactivated location
     * @description Requires role NOMIS_LOCATIONS
     */
    put: operations['reactivateLocation']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/{locationId}/deactivate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Deactivates an existing location
     * @description Requires role NOMIS_LOCATIONS
     */
    put: operations['deactivateLocation']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/{locationId}/certification': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update location certification
     * @description Requires role NOMIS_LOCATIONS
     */
    put: operations['updateCertification']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/{locationId}/capacity': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update location capacity
     * @description Requires role NOMIS_LOCATIONS
     */
    put: operations['updateCapacity']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/key-date-adjustments/{adjustmentId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get specific key date adjustment
     * @description Requires role NOMIS_SENTENCING. Retrieves a key date adjustment by id
     */
    get: operations['getKeyDateAdjustment']
    /**
     * Updates specific key date adjustment. The related booking can not be changed
     * @description Requires role NOMIS_SENTENCING. Updates a sentence adjustment by id
     */
    put: operations['updateKeyDateAdjustment']
    post?: never
    /**
     * deletes specific key date adjustment
     * @description Requires role NOMIS_SENTENCING. Deletes a key date adjustment by id
     */
    delete: operations['deleteKeyDateAdjustment']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/incentives/reference-codes/{code}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets the global incentive level by code
     * @description Gets a global incentive level by provided code and domain of IEP_LEVEL
     */
    get: operations['getGlobalIncentiveLevel']
    /**
     * Updates an existing global incentive level
     * @description Updates an existing global incentive level, updateable fields are description and active
     */
    put: operations['updateGlobalIncentiveLevel']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/incentives/prison/{prison}/code/{code}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets the prison incentive level
     * @description Gets prison incentive level data by provided code and prison
     */
    get: operations['getPrisonIncentiveLevel']
    /**
     * Prison Incentive level data
     * @description Creates incentive level data associated with a Prison
     */
    put: operations['updatePrisonIncentiveLevelData']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/csip': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Creates or updates a csip
     * @description Creates or updates a csip report and its children. Requires ROLE_NOMIS_CSIP
     */
    put: operations['upsertCSIP']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/corporates/{corporateId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a corporate by corporateId Id
     * @description Retrieves a corporate and details. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    get: operations['getCorporateById']
    /**
     * Update corporate organisation
     * @description Updates an existing corporate record. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    put: operations['updateCorporate']
    post?: never
    /**
     * Delete corporate organisation
     * @description Deletes an existing corporate record. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    delete: operations['deleteCorporate']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/corporates/{corporateId}/web-address/{webAddressId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update a corporate web address
     * @description Updates a corporate web address record. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    put: operations['updateCorporateWebAddress']
    post?: never
    /**
     * Delete a corporate web address
     * @description Deletes a corporate web record. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    delete: operations['deleteCorporateWebAddress']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/corporates/{corporateId}/type': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update the corporate types
     * @description Updates the set of corporate types. This might result in some types being added and others being deleted. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    put: operations['updateCorporateTypes']
    /**
     * Create a corporate type
     * @description Creates a new corporate type record. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    post: operations['createCorporateType']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/corporates/{corporateId}/phone/{phoneId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update a corporate phone
     * @description Updates a corporate phone record. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    put: operations['updateCorporatePhone']
    post?: never
    /**
     * Delete a corporate phone
     * @description Deletes a corporate phone record. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    delete: operations['deleteCorporatePhone']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/corporates/{corporateId}/email/{emailId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update a corporate email
     * @description Updates a corporate email record. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    put: operations['updateCorporateEmail']
    post?: never
    /**
     * Delete a corporate email
     * @description Deletes a corporate email record. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    delete: operations['deleteCorporateEmail']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/corporates/{corporateId}/address/{addressId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update a corporate address
     * @description Updates a corporate address record. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    put: operations['updateCorporateAddress']
    post?: never
    /**
     * Delete a corporate address
     * @description Deletes a corporate address record. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    delete: operations['deleteCorporateAddress']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/corporates/{corporateId}/address/{addressId}/phone/{phoneId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update a corporate address phone
     * @description Updates a corporate address phone record. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    put: operations['updateCorporateAddressPhone']
    post?: never
    /**
     * Delete a corporate address phone
     * @description Deletes a corporate address phone record. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    delete: operations['deleteCorporateAddressPhone']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/casenotes/{caseNoteId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get a case note by id
     * @description Retrieves a prisoner case note. Requires ROLE_NOMIS_CASENOTES
     */
    get: operations['getCaseNote']
    /**
     * Updates a case note on a prisoner
     * @description Updates the specified case note. Requires ROLE_NOMIS_CASENOTES
     */
    put: operations['updateCaseNote']
    post?: never
    /**
     * Deletes a case note
     * @description Deletes the specified case note. Requires ROLE_NOMIS_CASENOTES
     */
    delete: operations['deleteCaseNote']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/appointments/{nomisEventId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Updates an existing appointment
     * @description Updates an existing appointment. Requires role NOMIS_APPOINTMENTS
     */
    put: operations['updateAppointment']
    post?: never
    /**
     * Deletes an existing appointment
     * @description Deletes an existing appointment by actually deleting from the table. Intended for appointments created in error. Requires role NOMIS_APPOINTMENTS
     */
    delete: operations['deleteAppointment']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/appointments/{nomisEventId}/uncancel': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Undoes an appointment cancellation
     * @description Undoes an appointment cancellation. Requires role NOMIS_APPOINTMENTS
     */
    put: operations['uncancelAppointment']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/appointments/{nomisEventId}/cancel': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Cancels an existing appointment
     * @description Cancels an existing appointment. Requires role NOMIS_APPOINTMENTS
     */
    put: operations['cancelAppointment']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/alerts/types/{code}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update an alert type
     * @description Updates an alert type in the NOMIS reference data, specifically the description. Requires ROLE_NOMIS_ALERTS
     */
    put: operations['updateAlertType']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/alerts/types/{code}/reactivate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update an alert type to be active
     * @description Updates an alert type in the NOMIS reference data to be active, specifically the description. Requires ROLE_NOMIS_ALERTS
     */
    put: operations['reactivateAlertType']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/alerts/types/{code}/deactivate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update an alert type to be inactive
     * @description Updates an alert type in the NOMIS reference data to be inactive, specifically the description. Requires ROLE_NOMIS_ALERTS
     */
    put: operations['deactivateAlertType']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/alerts/codes/{code}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update an alert code
     * @description Updates an alert code in the NOMIS reference data, specifically the description. Requires ROLE_NOMIS_ALERTS
     */
    put: operations['updateAlertCode']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/alerts/codes/{code}/reactivate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update an alert code to be active
     * @description Updates an alert code in the NOMIS reference data to be active, specifically the description. Requires ROLE_NOMIS_ALERTS
     */
    put: operations['reactivateAlertCode']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/alerts/codes/{code}/deactivate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update an alert code to be inactive
     * @description Updates an alert code in the NOMIS reference data to be inactive, specifically the description. Requires ROLE_NOMIS_ALERTS
     */
    put: operations['deactivateAlertCode']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/adjudications/adjudication-number/{adjudicationNumber}/repairs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Updates repairs (aka damages) for a given adjudication
     * @description List of repairs are refreshed so this operation may result in any combinations of inserts, updates or deletes. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    put: operations['updateRepairs']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/adjudications/adjudication-number/{adjudicationNumber}/hearings/{hearingId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Updates a hearing
     * @description Updates a hearing for a given adjudication and hearing Id. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    put: operations['updateHearing']
    post?: never
    /**
     * Deletes a hearing
     * @description Deletes a hearing for a given adjudication and hearing Id. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    delete: operations['deleteHearing']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/adjudications/adjudication-number/{adjudicationNumber}/evidence': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Updates evidence for a given adjudication
     * @description List of evidence items are refreshed so this operation may result in any combinations of inserts, updates or deletes. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    put: operations['updateEvidence']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/adjudications/adjudication-number/{adjudicationNumber}/charge/{chargeSequence}/unquash': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * updates adjudication charge outcome and awards to the requested state before a quash
     * @description The latest hearing result is set to back to the supplied value along with all awards associated with this charge. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    put: operations['unquashHearingResultAndAwards']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/adjudications/adjudication-number/{adjudicationNumber}/charge/{chargeSequence}/quash': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * updates adjudication charge outcome and awards to quashed
     * @description The latest hearing result is set to quashed along with all awards associated with this charge (that may be associated with other hearings). Requires ROLE_NOMIS_ADJUDICATIONS
     */
    put: operations['quashHearingResultAndAwards']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/adjudications/adjudication-number/{adjudicationNumber}/charge/{chargeSequence}/awards': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * updates a batch of hearing result awards for a given adjudication
     * @description Creates a hearing result awards that have been added, updates those that have changed and deletes ones that are absent for the booking associated with the adjudication. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    put: operations['updateCreateAndDeleteHearingResultAwards']
    /**
     * creates a hearing result award for a given adjudication
     * @description Creates a hearing result award. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    post: operations['createHearingResultAward']
    /**
     * Deletes hearing result awards for a given adjudication and charge sequence
     * @description Deletes hearing result awards for a given adjudication and charge sequence. Returns list of deleted award keys. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    delete: operations['deleteHearingResultAwards']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/activities/{courseActivityId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get activity details
     * @description Gets activity details including schedule rules and pay rates. Requires role NOMIS_ACTIVITIES
     */
    get: operations['getActivity']
    /**
     * Updates an activity
     * @description Updates an activity and associated pay rates. Requires role NOMIS_ACTIVITIES
     */
    put: operations['updateActivity']
    post?: never
    /**
     * Delete a NOMIS course activity
     * @description Deletes a course activity and its children - pay rates, schedules, allocations and attendances. Intended to be used for data fixes. Requires role NOMIS_ACTIVITIES
     */
    delete: operations['deleteActivity']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/activities/{courseActivityId}/schedule': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Updates a course schedule
     * @description Updates a course schedule. Requires role NOMIS_ACTIVITIES
     */
    put: operations['updateCourseSchedule']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/activities/{courseActivityId}/end': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * End a course activity
     * @description Ends a course activity and all active attendances with end date today. Requires role NOMIS_ACTIVITIES
     */
    put: operations['endActivity']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/activities/{courseActivityId}/allocation': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Creates or Updates a prisoner's allocation to an activity
     * @description Creates or updates a prisoner's allocation to an activity. Requires role NOMIS_ACTIVITIES
     */
    put: operations['upsertAllocation']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/activities/end': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * End multiple course activities
     * @description Ends course activities and all active allocations with end date today. Requires role NOMIS_ACTIVITIES
     */
    put: operations['endActivities']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/service-prisons/{serviceCode}/prison/{prisonId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Check if a service is turned on for a prison
     * @description Check if a prison is turned on for a service. Requires role NOMIS_ACTIVITIES
     */
    get: operations['checkServicePrison']
    put?: never
    /**
     * Turn on a service for a prison
     * @description Turn on a service for a prison. Requires role NOMIS_ACTIVITIES
     */
    post: operations['createServicePrison']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{offenderNo}/visits': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new visit
     * @description Creates a new visit and decrements the visit balance.
     */
    post: operations['createVisit']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{offenderNo}/sentencing/court-cases': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get court cases for an offender
     * @description Requires role NOMIS_SENTENCING. Retrieves a court case by id
     */
    get: operations['getCourtCasesByOffender']
    put?: never
    /**
     * Creates a new Court Case
     * @description Required role NOMIS_SENTENCING Creates a new Court Case for the offender and latest booking
     */
    post: operations['createCourtCase']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{offenderNo}/sentencing/court-cases/{caseId}/court-appearances': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new Court Appearance
     * @description Required role NOMIS_SENTENCING Creates a new Court Appearance for the offender,latest booking and given Court Case
     */
    post: operations['createCourtAppearance']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{offenderNo}/sentencing/court-cases/{caseId}/charges': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new Offender Charge
     * @description Required role NOMIS_SENTENCING Creates a new Offender Charge for the offender and latest booking. Will not associate with a Court Event
     */
    post: operations['createCourtCharge']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{offenderNo}/sentencing/court-cases/{caseId}/case-identifiers': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Refreshes the list of Case identifiers associated with the case
     * @description Required role NOMIS_SENTENCING Refreshes the list of Case identifiers associated with the case (identifier type CASE/INFO#)
     */
    post: operations['refreshCaseIdentifiers']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{offenderNo}/court-cases/{caseId}/sentences': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new Sentence
     * @description Required role NOMIS_SENTENCING Creates a new Sentence for the offender booking associated with the court case
     */
    post: operations['createSentence']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{offenderNo}/casenotes': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets all case notes for a prisoner
     * @description Retrieves all case notes for a specific prisoner, for migration or merge. Requires ROLE_NOMIS_CASENOTES
     */
    get: operations['getCaseNotesForPrisoner']
    put?: never
    /**
     * Creates a case note on a prisoner
     * @description Creates a case note on the prisoner's latest booking. Requires ROLE_NOMIS_CASENOTES
     */
    post: operations['createCaseNote']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{offenderNo}/alerts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates an alert on a prisoner
     * @description Creates an alert on the prisoner's latest booking. Requires ROLE_NOMIS_ALERTS
     */
    post: operations['createAlert']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{offenderNo}/alerts/resynchronise': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Replaces an alerts on a prisoner
     * @description Replaces all alerts on the prisoner's latest booking. Requires ROLE_NOMIS_ALERTS
     */
    post: operations['resynchroniseAlerts']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{offenderNo}/adjudications': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * creates an adjudication on the latest booking of a prisoner
     * @description Creates an adjudication. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    post: operations['createAdjudication']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/bookings': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Gets prisoner details for a list of bookings
     * @description Requires role SYNCHRONISATION_REPORTING.
     */
    post: operations['getPrisonerBookings']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/booking-id/{bookingId}/sentences/{sentenceSequence}/adjustments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new sentence adjustment
     * @description Required role NOMIS_SENTENCING Creates a new sentence adjustment (aka Debit/Credit). Key dates will not be recalculated as a side effect of this operation
     */
    post: operations['createSentenceAdjustment']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/booking-id/{bookingId}/incentives': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new incentive
     * @description Creates a new incentive using next sequence no.
     */
    post: operations['createIncentive']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/booking-id/{bookingId}/incentives/reorder': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Reorder a existing incentives to match time order
     * @description Reorder a series of IEPs so the sequence number matches the IEP date time. Latest time gets the higher sequence so the current IEP is the latest. This is required to correct DPS incentives that are created out of order
     */
    post: operations['reorderCurrentIncentives']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/booking-id/{bookingId}/adjustments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new key date adjustment
     * @description Required role NOMIS_SENTENCING Creates a new key date adjustment. Key dates will be recalculated as a side effect of this operation
     */
    post: operations['createKeyDateAdjustment']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/persons': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a person
     * @description Creates a person, typically a person who will become a contact of a prisoners. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    post: operations['createPerson']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/persons/{personId}/restriction': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a global person restriction
     * @description Creates a person restriction; the restriction is estate wide. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    post: operations['createPersonRestriction']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/persons/{personId}/phone': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a person global phone
     * @description Creates a person global phone in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    post: operations['createPersonPhone']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/persons/{personId}/identifier': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a person identifier
     * @description Creates a person identifier in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    post: operations['createPersonIdentifier']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/persons/{personId}/employment': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a person employment
     * @description Creates a person employment in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    post: operations['createPersonEmployment']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/persons/{personId}/email': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a person email
     * @description Creates a person email in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    post: operations['createPersonEmail']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/persons/{personId}/contact': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a person contact
     * @description Creates a person contact; the relationship between a prisoner and a person. Typically a prospective visitor. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    post: operations['createPersonContact']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/persons/{personId}/contact/{contactId}/restriction': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a person contact restriction for a specific relationship
     * @description Creates a person contact restriction; the restriction is for a specific relationship between a prisoner and a person. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    post: operations['createPersonContactRestriction']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/persons/{personId}/address': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a person address
     * @description Creates a person address in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    post: operations['createPersonAddress']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/persons/{personId}/address/{addressId}/phone': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a person address phone
     * @description Creates a person phone associated with an address in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    post: operations['createPersonAddressPhone']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/non-associations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new non-association
     * @description Creates a new non-association. Requires role NOMIS_NON_ASSOCIATIONS
     */
    post: operations['createNonAssociation']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new location
     * @description Creates a new location. Requires role ROLE_NOMIS_LOCATIONS
     */
    post: operations['createLocation']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/incentives/reference-codes': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new global incentive level
     * @description Creates a new global incentive level
     */
    post: operations['createGlobalIncentiveLevel']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/incentives/reference-codes/reorder': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * reorders all global incentive levels
     * @description reorders all global incentive levels using provided list of Incentive codes, including inactive. 1-based index
     */
    post: operations['reorderGlobalIncentiveLevels']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/incentives/prison/{prison}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Prison Incentive level data
     * @description Creates incentive level data associated with a Prison
     */
    post: operations['createPrisonIncentiveLevelData']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/corporates': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a corporate organisation
     * @description Creates a new corporate record. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    post: operations['createCorporate']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/corporates/{corporateId}/web-address': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create a corporate web address
     * @description Creates a new corporate web address record. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    post: operations['createCorporateWebAddress']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/corporates/{corporateId}/phone': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create a corporate phone
     * @description Creates a new corporate phone record. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    post: operations['createCorporatePhone']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/corporates/{corporateId}/email': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create a corporate email
     * @description Creates a new corporate email record. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    post: operations['createCorporateEmail']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/corporates/{corporateId}/address': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a corporate address
     * @description Creates a new corporate address record. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    post: operations['createCorporateAddress']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/corporates/{corporateId}/address/{addressId}/phone': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a corporate address phone
     * @description Creates a new corporate address phone record. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    post: operations['createCorporateAddressPhone']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/appointments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new appointment
     * @description Creates a new appointment. Requires role NOMIS_APPOINTMENTS
     */
    post: operations['createAppointment']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/alerts/types': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates an alert type
     * @description Creates an alert type in the NOMIS reference data. Requires ROLE_NOMIS_ALERTS
     */
    post: operations['createAlertType']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/alerts/codes': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates an alert code
     * @description Creates an alert code in the NOMIS reference data. Requires ROLE_NOMIS_ALERTS
     */
    post: operations['createAlertCode']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/adjudications/adjudication-number/{adjudicationNumber}/hearings': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * creates a hearing for a given adjudication
     * @description Creates a hearing for a given adjudication. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    post: operations['createHearing']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/adjudications/adjudication-number/{adjudicationNumber}/hearings/{hearingId}/charge/{chargeSequence}/result': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * creates or updates a hearing result for a given hearing and charge.
     * @description Creates a (or updates the existing) hearing result for a given hearing and charge. DPS only supports 1 result per hearing. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    post: operations['upsertHearingResult']
    /**
     * Deletes a hearing result
     * @description Deletes a hearing result for a given adjudication and hearing Id. Returns list of any deleted award Ids to allow removal of award mappings in the sync service. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    delete: operations['deleteHearingResult']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/adjudications/adjudication-number/{adjudicationNumber}/charge/{chargeSequence}/result': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * creates or updates a result for a given charge. This requires a dummy hearing to be created
     * @description Creates or updates a result for a charge. DPS allows results to be created without hearings eg: Refer to Police. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    post: operations['createResultWithDummyHearing']
    /**
     * Deletes a result
     * @description Deletes a result for a given adjudication and charge sequence. The result will be associated with a dummy hearing used by DPS to record referrals. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    delete: operations['deleteResult']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/activities': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new activity
     * @description Creates a new activity and associated pay rates. Requires role NOMIS_ACTIVITIES
     */
    post: operations['createActivity']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/{visitId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get visit
     * @description Retrieves a visit by id.
     */
    get: operations['getVisit']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/rooms/usage-count': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get future visit room usage by filter
     * @description Retrieves a list of rooms with usage count for the (filtered) visits. Only future visits are included
     */
    get: operations['getVisitRoomCountsByFilter']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visits/ids': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get visits by filter
     * @description Retrieves a paged list of visits by filter
     */
    get: operations['getVisitsByFilter']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visit-orders/visit-balance-adjustment/{visitBalanceAdjustmentId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get specific offender visit balance adjustment
     * @description Retrieves offender visit balance adjustment. Requires ROLE_NOMIS_VISIT_BALANCE
     */
    get: operations['getVisitBalanceAdjustment']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visit-balances/{visitBalanceId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get visit balance data for a booking
     * @description Retrieves visit order balance details for the last month for a booking. Requires ROLE_NOMIS_VISIT_BALANCE
     */
    get: operations['getVisitBalanceByIdToMigrate']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/visit-balances/ids': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Find paged visit balance ids
     * @description
     *           Returns the visit balance ids (which are booking ids) for the latest booking for offenders with balance entries.
     *           Requires role NOMIS_VISIT_BALANCE
     */
    get: operations['findVisitBalanceIds']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/splash-screens/{moduleName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve a list of prisons and their associated screen conditions (if any set) for the screen
     * @description Retrieves all prisons switched on for the screen (module) name, or an empty list if there are none. Requires role NOMIS_SCREEN_ACCESS
     */
    get: operations['getScreenConditions']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/splash-screens/{moduleName}/blocked': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve a list of blocked prison ids for the screen
     * @description Retrieves a list of blocked prison ids for the screen (module) name or **ALL** if all prisons, or an empty list if there are none blocked. Requires role NOMIS_SCREEN_ACCESS
     */
    get: operations['getBlockedPrisons']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/service-prisons/{serviceCode}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve a list of prisons switched on for the service
     * @description Retrieves all prisons switched on for the service code, or an empty list if there are none. Requires role SYNCHRONISATION_REPORTING
     */
    get: operations['getServicePrisons']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/schedules/max-id': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the highest value of CRS_SCH_ID in NOMIS
     * @description Retrieves the last course schedule ID so we can identify mappings records in preprod that have been copied from prod but don't have any NOMIS data.
     */
    get: operations['getMaxCourseScheduleId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/questionnaires/{questionnaireId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get incident questionnaire details
     * @description Gets incident questionnaire details. Requires role NOMIS_INCIDENTS
     */
    get: operations['getQuestionnaire']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/questionnaires/ids': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get questionnaire IDs by filter
     * @description Retrieves a paged list of incident questionnaire ids by filter. Requires ROLE_NOMIS_INCIDENTS.
     */
    get: operations['getIdsByFilter']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisons/{prisonId}/incentive-levels': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve a list of active incentive levels for a prison
     * @description Retrieve a list of active incentive levels for a prison. Requires role NOMIS_ACTIVITIES
     */
    get: operations['getPrisonIncentiveLevels']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{prisonNumber}/visit-orders/balance': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get visit order balance data for a prisoner
     * @description Retrieves visit order balance details for the last month for a prisoner. Requires ROLE_NOMIS_VISIT_BALANCE
     */
    get: operations['getVisitBalanceToMigrate']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{offenderNo}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets the prisoner's details
     * @description Requires role NOMIS_ALERTS.
     */
    get: operations['getPrisonerDetails']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{offenderNo}/sentencing/offender-charges/{offenderChargeId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get an offender charge
     * @description Requires role NOMIS_SENTENCING. Retrieves offender charge details. Offender Charges are at the booking level.
     */
    get: operations['getOffenderCharge']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{offenderNo}/sentencing/court-cases/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get a court case
     * @description Requires role NOMIS_SENTENCING. Retrieves a court case by id
     */
    get: operations['getCourtCase']
    put?: never
    post?: never
    /**
     * delete a court case
     * @description Requires role NOMIS_SENTENCING. Deletes a court case by id
     */
    delete: operations['deleteCourtCase']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{offenderNo}/sentencing/court-appearances/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get a court appearance
     * @description Requires role NOMIS_SENTENCING. Retrieves a court appearance by id
     */
    get: operations['getCourtAppearance']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{offenderNo}/sentencing/court-appearances/{eventId}/charges/{chargeId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get the court event charge
     * @description Requires role NOMIS_SENTENCING. Retrieves the court event charge
     */
    get: operations['getCourtEventCharge']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{offenderNo}/merges': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets prisoner's list of merge details since a given date. Either the current offenderNo or the previous offenderNo can be used to search for merges. Only COMPLETED merges are returned
     * @description Requires role SYNCHRONISATION_REPORTING.
     */
    get: operations['getPrisonerMerges']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{offenderNo}/csip/reconciliation': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets csips for an offender for reconciliation
     * @description Retrieves a list of csips for a prisoner. Requires ROLE_NOMIS_CSIP
     */
    get: operations['getCSIPsForPrisoner']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{offenderNo}/contacts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets a prisoner's contacts
     * @description Retrieves all contacts across all bookings for a prisoner. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    get: operations['getPrisonerWithContacts']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{offenderNo}/casenotes/reconciliation': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets all case notes for a prisoner for reconciliation.
     * @description Retrieves all case notes for a specific prisoner, for reconciliation.
     *         This endpoint doesn't try to split out a case note into the amendments, simply just returns the text as stored in
     *         NOMIS. This is because the notes are truncated at 4,000 characters so we can end up with more amendments in DPS
     *         than there are in NOMIS. We therefore just return the text as stored in NOMIS and then transform the DPS text to
     *         match.
     *         Requires ROLE_NOMIS_CASENOTES
     */
    get: operations['getCaseNotesForPrisonerForReconciliation']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{offenderNo}/bookings/{bookingId}/previous': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets a prisoner's previous booking relative to the supplied booking id
     * @description Requires role NOMIS_ALERTS.
     */
    get: operations['getPreviousBooking']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{offenderNo}/alerts/to-migrate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets alert for latest booking
     * @description Retrieves alerts for a prisoner from latest all bookings. Requires ROLE_NOMIS_ALERTS
     */
    get: operations['getAlertsToMigrate']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/{offenderNo}/alerts/reconciliation': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets active alerts for latest booking
     * @description Retrieves active alerts for latest booking. Requires ROLE_NOMIS_ALERTS
     */
    get: operations['getActiveAlertsForReconciliation']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/ids': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets the identifiers for all prisoners. By default only active prisoners will be returned unless active=false
     * @deprecated
     * @description Requires role SYNCHRONISATION_REPORTING or ROLE_NOMIS_ALERTS.
     */
    get: operations['getPrisonerIdentifiers']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/ids/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets the identifier for all prisoners.
     * @description Requires role SYNCHRONISATION_REPORTING, NOMIS_ALERTS, 'ROLE_NOMIS_SENTENCING' or NOMIS_CORE_PERSON.
     */
    get: operations['getAllPrisoners']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/ids/all-from-id': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets the identifier for all prisoners.
     * @description Gets the specified number of prisoners starting after the given id number.
     *           Clients can iterate through all prisoners by calling this endpoint using the id from the last call (omit for first call).
     *           Iteration ends when the returned prisonerIds list has size less than the requested page size.
     *           Requires role SYNCHRONISATION_REPORTING or NOMIS_CASENOTES.
     */
    get: operations['getAllPrisonersFromId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/ids/active': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets the identifiers for all active prisoners
     * @description Requires role SYNCHRONISATION_REPORTING.
     */
    get: operations['getActivePrisonerIdentifiers']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/booking-id/{bookingId}/sentencing-adjustments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get active sentence and key date adjustments for a booking
     * @description Retrieves all the current active sentence and key date adjustments (by booking) for a prisoner. Requires NOMIS_SENTENCING.
     */
    get: operations['getActiveAdjustments']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/booking-id/{bookingId}/awards/{sanctionSequence}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get hearing result award by Id
     * @description Retrieves a hearing result by the Id (bookingId and sanctionSequence). Requires ROLE_NOMIS_ADJUDICATIONS
     */
    get: operations['getAdjudicationHearingResultAward']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/booking-id/{bookingId}/awards/ada/summary': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get ADA award summary result award by booking
     * @description Retrieves a summary of ADA awards along with associated adjudication for a given booking. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    get: operations['getAdjudicationADASummary']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisoners/booking-id/{bookingId}/alerts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets alert for booking
     * @description Retrieves alerts for a specific booking. Requires ROLE_NOMIS_ALERTS
     */
    get: operations['getAlertsByBookingId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/persons/ids': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all Ids
     * @description Retrieves all person Ids - typically for a migration. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    get: operations['getPersonIds']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/non-associations/offender/{offenderNo}/ns-offender/{nsOffenderNo}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get an open non-association
     * @description Get the open non-association for the two offender numbers. Requires role NOMIS_NON_ASSOCIATIONS
     */
    get: operations['getNonAssociation']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/non-associations/offender/{offenderNo}/ns-offender/{nsOffenderNo}/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all non-associations for the two offender numbers
     * @description Get all non-associations for the two offender numbers, including expired. Requires role NOMIS_NON_ASSOCIATIONS
     */
    get: operations['getNonAssociationDetails']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/non-associations/ids': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get non-associations by filter
     * @description Retrieves a paged list of composite ids by filter. Requires ROLE_NOMIS_NON_ASSOCIATIONS.
     */
    get: operations['getNonAssociationsByFilter']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/non-associations/booking/{bookingId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get non-associations by booking ID
     * @description Get non-associations for the given booking ID. Requires role NOMIS_NON_ASSOCIATIONS
     */
    get: operations['getByBookingId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a location
     * @description Get the location given the id. Requires role ROLE_NOMIS_LOCATIONS
     */
    get: operations['getLocation']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/key/{key}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a location
     * @description Get the location given the business key. Requires role ROLE_NOMIS_LOCATIONS
     */
    get: operations['getLocationByKey']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/ids': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get locations by filter
     * @description Retrieves a paged list of composite ids by filter. Requires ROLE_NOMIS_LOCATIONS.
     */
    get: operations['getLocationsByFilter']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/incidents/{incidentId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get incident details
     * @description Gets incident details. Requires role NOMIS_INCIDENTS
     */
    get: operations['getIncident']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/incidents/reconciliation/agency/{agencyId}/ids': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets ids of open incidents at an agency
     * @description Retrieves paged ids for open incidents for an agency.
     */
    get: operations['getOpenIncidentIdsForReconciliation']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/incidents/reconciliation/agency/{agencyId}/counts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets incident counts
     * @description Retrieves open and closed incident counts for an agency.
     */
    get: operations['getIncidentCountsForReconciliation']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/incidents/reconciliation/agencies': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve a list of all agencies that have raised incidents)
     * @description Retrieve a list of all agencies that have raised incidents, including prisons and PECS. Requires authorised access
     */
    get: operations['getIncidentAgencies']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/incidents/ids': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get incident IDs by filter
     * @description Retrieves a paged list of incident ids by filter. Requires ROLE_NOMIS_INCIDENTS.
     */
    get: operations['getIdsByFilter_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/incidents/booking/{bookingId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a list of Incidents for a booking
     * @description Gets a list of all incidents relating to an offender booking. Requires role NOMIS_INCIDENTS
     */
    get: operations['getIncidentsForBooking']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/incentives/ids': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get incentives (a.k.a IEP) by filter
     * @description Retrieves a paged list of incentive composite ids by filter. Requires ROLE_NOMIS_INCENTIVES.
     */
    get: operations['getIncentivesByFilter']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/incentives/booking-id/{bookingId}/incentive-sequence/{incentiveSequence}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get a prisoner's incentive level (a.k.a IEP) by id (bookingId and incentiveId)
     * @description Retrieves a created incentive level for a prisoner. Requires ROLE_NOMIS_INCENTIVES.
     */
    get: operations['getIncentive']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/incentives/booking-id/{bookingId}/current': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get a prisoner's current incentive level (a.k.a IEP) for a booking
     * @description Retrieves the current incentive level (by booking) for a prisoner. Requires ROLE_NOMIS_INCENTIVES.
     */
    get: operations['getCurrentIncentive']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/documents/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve a document
     * @description Retrieve a document by its id. Requires role NOMIS_DOCUMENTS
     */
    get: operations['getDocument']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/documents/booking/{bookingId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieve a list of document ids
     * @description Retrieve a list of document ids searching by booking id and template name. Requires role NOMIS_DOCUMENTS
     */
    get: operations['getDocumentIds']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/csip/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get CSIP details
     * @description Gets csip details. Requires role NOMIS_CSIP
     */
    get: operations['getCSIP']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/csip/ids': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get csip IDs by filter
     * @description Retrieves a paged list of csip ids by filter. Requires ROLE_NOMIS_CSIP.
     */
    get: operations['getIdsByFilter_2']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/csip/factors/{csipFactorId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get CSIP factor details
     * @description Gets csip factor details. Requires role NOMIS_CSIP
     */
    get: operations['getCSIPFactor']
    put?: never
    post?: never
    /**
     * Deletes a csip factor
     * @description Deletes a csip factor. Requires ROLE_NOMIS_CSIP
     */
    delete: operations['deleteCSIPFactor']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/csip/count': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get csip count
     * @description Gets a count of all csips. Requires role NOMIS_CSIP
     */
    get: operations['getCSIPCount']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/csip/booking/{bookingId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a list of CSIP Ids for a booking
     * @description Gets a list of all csip ids relating to an offender booking. Requires role NOMIS_CSIP
     */
    get: operations['getCSIPIdsForBooking']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/court-cases/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get a court case, migration version without offenderNo validation
     * @description Requires role NOMIS_SENTENCING. Retrieves a court case by id
     */
    get: operations['getCourtCaseForMigration']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/court-cases/ids': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get court case IDs by filter
     * @description Retrieves a paged list of court case ids by filter. Requires ROLE_NOMIS_SENTENCING.
     */
    get: operations['getCourtCaseIdsByFilter']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/corporates/ids': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all Ids
     * @description Retrieves all corporate Ids - typically for a migration. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    get: operations['getCorporateIds']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/core-person/{prisonNumber}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get an offender by prison number
     * @description Retrieves an offender. Requires ROLE_NOMIS_CORE_PERSON
     */
    get: operations['getOffender']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/bookings/ids/latest-from-id': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets the identifiers for all latest bookings.
     * @description Gets the specified number of latest bookings starting after the given id number.
     *           Clients can iterate through all bookings by calling this endpoint using the id from the last call (omit for first call).
     *           Iteration ends when the returned prisonerIds list has size less than the requested page size.
     *           Requires role SYNCHRONISATION_REPORTING.
     */
    get: operations['getAllLatestBookingsFromId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/attendances/reconciliation/{prisonId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get data for an attendance sync reconciliation
     * @description Gets the number of active attendances for each booking in the prison
     */
    get: operations['getAttendanceReconciliationSummary']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/appointments/{eventId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get appointment by event id
     * @description Get an appointment given the unique event id. Requires role NOMIS_APPOINTMENTS
     */
    get: operations['getAppointmentById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/appointments/ids': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get appointments by filter
     * @description Retrieves a paged list of appointment ids by filter. Requires ROLE_NOMIS_APPOINTMENTS.
     */
    get: operations['getAppointmentsByFilter']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/appointments/counts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get appointment counts by prison, event sub type and future / past. Note that the 'future' is everything from tomorrow onwards.
     * @description Retrieves counts of appointments for the migration preview. Requires ROLE_NOMIS_APPOINTMENTS.
     */
    get: operations['getAppointmentCounts']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/appointments/booking/{bookingId}/location/{locationId}/start/{dateTime}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get an appointment
     * @description Get an appointment given the booking id, internal location, date and start time. Requires role NOMIS_APPOINTMENTS
     */
    get: operations['getAppointment']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/allocations/{allocationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get allocation details
     * @description Gets allocation details. Requires role NOMIS_ACTIVITIES
     */
    get: operations['getAllocation']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/allocations/suspended': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Find suspended allocations
     * @description Searches for suspended prisoners on active course allocations. Requires role NOMIS_ACTIVITIES
     */
    get: operations['findSuspendedAllocations']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/allocations/reconciliation/{prisonId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get data for an allocation sync reconciliation
     * @description Gets the number of active allocations for each booking in the prison
     */
    get: operations['getAllocationReconciliationSummary']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/allocations/missing-pay-bands': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Find allocations with missing pay bands
     * @description Searches for prisoners allocated to a course activity without a pay band assigned. Requires role NOMIS_ACTIVITIES
     */
    get: operations['findAllocationsWithMissingPayBands']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/allocations/ids': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Find paged active allocations
     * @description Searches for active course allocations. Requires role NOMIS_ACTIVITIES
     */
    get: operations['findActiveAllocations']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/adjustments/ids': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get adjustment IDs (key date and Sentence adjustments) by filter
     * @description Retrieves a paged list of adjustment ids by filter. Requires ROLE_NOMIS_SENTENCING.
     */
    get: operations['getAdjustmentsByFilter']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/adjudications/hearings/{hearingId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get hearing by hearing Id
     * @description Retrieves a hearing by the hearing Id. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    get: operations['getAdjudicationHearing']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/adjudications/hearings/{hearingId}/charge/{chargeSequence}/result': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get hearing result by hearing id
     * @description Retrieves a hearing result by the nomis hearing id. DPS migrated and synchronised hearing results always have a result sequence of 1 Requires ROLE_NOMIS_ADJUDICATIONS
     */
    get: operations['getAdjudicationHearingResult']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/adjudications/charges/ids': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get adjudication charge IDs by filter
     * @description Retrieves a paged list of adjudication charge ids by filter. Requires ROLE_NOMIS_ADJUDICATIONS.
     */
    get: operations['getAdjudicationChargeIdsByFilter']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/adjudications/adjudication-number/{adjudicationNumber}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get adjudication by adjudication number
     * @description Retrieves an adjudication by the adjudication number. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    get: operations['getAdjudication']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/adjudications/adjudication-number/{adjudicationNumber}/charge-sequence/{chargeSequence}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get adjudication by adjudication number and charge sequence
     * @description Retrieves an adjudication by the adjudication number and charge sequence. Will only return the specified charge. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    get: operations['getAdjudicationByCharge']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/activities/without-schedule-rules': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Find activities without schedule rules
     * @description Searches for course activities that are active with active allocations but no schedule rules. Requires role NOMIS_ACTIVITIES
     */
    get: operations['findActivitiesWithoutScheduleRules']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/activities/rates-with-unknown-incentives': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Find activities with pay rates with unknown incentive level
     * @description Searches for course activities that have an active pay rate with an unknown incentive level. Requires role NOMIS_ACTIVITIES
     */
    get: operations['findRatesWithUnknownIncentiveLevel']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/activities/ids': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Find paged active activities
     * @description Searches for active course activities with allocated prisoners. Requires role NOMIS_ACTIVITIES
     */
    get: operations['findActiveActivities']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/incident/adjudication-number/{adjudicationNumber}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * **** Used to recover from a duplicate incident creation only ***** Deletes an incident by adjudication number.
     * @description Deletes an incident by adjudication number. Supports the removal of a duplicate incident without a DPS mapping. Requires ROLE_NOMIS_ADJUDICATIONS
     */
    delete: operations['deleteIncident']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/csip/{csipId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Deletes a csip report
     * @description Deletes a csip report. Requires ROLE_NOMIS_CSIP
     */
    delete: operations['deleteCSIP']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/corporates/{corporateId}/type/{typeCode}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Delete a corporate type
     * @description Deletes a new corporate type record. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    delete: operations['deleteCorporateType']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/attendances/{eventId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Delete a NOMIS attendance (from OFFENDER_COURSE_ATTENDANCES table)
     * @description Deletes an attendance from NOMIS. Requires role NOMIS_ACTIVITIES
     */
    delete: operations['deleteAttendance_1']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/allocations/{referenceId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Delete a NOMIS allocation (from OFFENDER_PROGRAM_PROFILES table)
     * @description Deletes an allocation from NOMIS and any children - pay rates, attendances. Requires role NOMIS_ACTIVITIES
     */
    delete: operations['deleteAllocation']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    ErrorResponse: {
      /** Format: int32 */
      status: number
      /** Format: int32 */
      errorCode?: number
      userMessage?: string
      developerMessage?: string
      /** @description For 409 errors this may contain the entity Id for the existing record that causes the duplicate */
      moreInfo?: string
    }
    /** @description Sentence adjustment update request */
    UpdateSentenceAdjustmentRequest: {
      /**
       * @description NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS
       * @example RX
       * @enum {string}
       */
      adjustmentTypeCode: 'RSR' | 'UR' | 'S240A' | 'RST' | 'RX'
      /**
       * Format: date
       * @description Date adjustment is applied
       */
      adjustmentDate?: string
      /**
       * Format: date
       * @description Start of the period which contributed to the adjustment
       */
      adjustmentFromDate?: string
      /**
       * Format: int64
       * @description Number of days for the adjustment
       */
      adjustmentDays: number
      /** @description Comment */
      comment?: string
      /** @description Flag to indicate if the adjustment is being applied */
      active?: boolean
      /**
       * Format: int64
       * @description Sentence sequence
       */
      sentenceSequence: number
    }
    /** @description Course activity create/update request */
    UpsertAttendanceRequest: {
      /**
       * Format: date
       * @description The date of the course schedule
       * @example 2023-04-03
       */
      scheduleDate: string
      /**
       * Format: partial-time
       * @description The time of the course schedule
       * @example 10:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The time the course schedule ends
       * @example 11:00
       */
      endTime: string
      /**
       * @description The status of the attendance
       * @example SCH
       */
      eventStatusCode: string
      /**
       * @description The outcome code for a completed attendance
       * @example ATT
       */
      eventOutcomeCode?: string
      /**
       * @description Comments relating to the attendance
       * @example Disruptive
       */
      comments?: string
      /**
       * @description Whether the absence is excused
       * @default false
       * @example true
       */
      unexcusedAbsence: boolean
      /**
       * @description Whether the absence is authorised
       * @default false
       * @example true
       */
      authorisedAbsence: boolean
      /**
       * @description Whether the attendance is to be paid
       * @default false
       * @example true
       */
      paid: boolean
      /**
       * @description Any bonus pay for the attendance
       * @example 1.5
       */
      bonusPay?: number
    }
    /** @description Attendance create/update response */
    UpsertAttendanceResponse: {
      /**
       * Format: int64
       * @description The attendance event id
       */
      eventId: number
      /**
       * Format: int64
       * @description The course schedule id for the attendance
       */
      courseScheduleId: number
      /** @description Whether or the attendance was created */
      created: boolean
      /** @description Prison code */
      prisonId: string
    }
    /** @description Visit update request */
    UpdateVisitRequest: {
      /**
       * Format: date-time
       * @description Visit start date and time
       */
      startDateTime: string
      /**
       * @description Visit end time
       * @example 14:30
       */
      endTime: string
      /** @description Visitors */
      visitorPersonIds: number[]
      /** @description Name of the real world room where visit will take place */
      room: string
      /**
       * @description Whether visit is restricted to a closed session
       * @enum {string}
       */
      openClosedStatus: 'OPEN' | 'CLOSED'
    }
    /** @description Visit cancellation */
    CancelVisitRequest: {
      /**
       * @description The cancellation reason
       * @enum {string}
       */
      outcome: 'VISCANC' | 'OFFCANC' | 'ADMIN' | 'NSHOW'
    }
    /** @description Court Event */
    CourtAppearanceRequest: {
      /** Format: date-time */
      eventDateTime: string
      courtEventType: string
      courtId: string
      outcomeReasonCode?: string
      /** Format: date-time */
      nextEventDateTime?: string
      courtEventCharges: number[]
      nextCourtId?: string
    }
    /** @description Create offender charge response */
    OffenderChargeIdResponse: {
      /** Format: int64 */
      offenderChargeId: number
    }
    /** @description Create adjustment response */
    UpdateCourtAppearanceResponse: {
      createdCourtEventChargesIds: components['schemas']['OffenderChargeIdResponse'][]
      deletedOffenderChargesIds: components['schemas']['OffenderChargeIdResponse'][]
    }
    /** @description Court Charge */
    OffenderChargeRequest: {
      offenceCode: string
      /** Format: date */
      offenceDate?: string
      /** Format: date */
      offenceEndDate?: string
      resultCode1?: string
    }
    /** @description Profile Details to update a prisoner */
    UpsertProfileDetailsRequest: {
      /** @description Profile Type */
      profileType: string
      /** @description Profile Code */
      profileCode?: string
    }
    /** @description Profile Details upsert response */
    UpsertProfileDetailsResponse: {
      /** @description Whether the record was created or updated */
      created: boolean
      /**
       * Format: int64
       * @description The offender booking ID that was changed
       */
      bookingId: number
    }
    /** @description Sentence request */
    CreateSentenceRequest: {
      /** Format: date */
      startDate: string
      /** Format: date */
      endDate?: string
      status: string
      sentenceCategory: string
      sentenceCalcType: string
      sentenceLevel: string
      fine?: number
      sentenceTerms: components['schemas']['SentenceTermRequest'][]
      offenderChargeIds: number[]
      /** Format: int64 */
      consecutiveToSentenceSeq?: number
      /** Format: int64 */
      eventId: number
    }
    /** @description Sentence term request */
    SentenceTermRequest: {
      /** Format: int32 */
      years?: number
      /** Format: int32 */
      months?: number
      /** Format: int32 */
      weeks?: number
      /** Format: int32 */
      days?: number
      /** Format: int32 */
      hours?: number
      sentenceTermType: string
      lifeSentenceFlag: boolean
    }
    /** @description The data held in NOMIS about an alert associated with a prisoner */
    AlertResponse: {
      /**
       * Format: int64
       * @description The prisoner's bookingId related to this alert
       */
      bookingId: number
      /**
       * Format: int64
       * @description The prisoner's bookingId sequence related to this alert. Used to show if this is on latest bookings
       */
      bookingSequence: number
      /**
       * Format: int64
       * @description The sequence primary key within this booking
       */
      alertSequence: number
      /** @description The alert code */
      alertCode: components['schemas']['CodeDescription']
      /** @description The alert type */
      type: components['schemas']['CodeDescription']
      /**
       * Format: date
       * @description Date alert started
       */
      date: string
      /**
       * Format: date
       * @description Date alert expired
       */
      expiryDate?: string
      /** @description true if alert is active and has not expired */
      isActive: boolean
      /** @description true if alert has been verified by another member of staff */
      isVerified: boolean
      /**
       * @description Free format text of person or department that authorised the alert
       * @example security
       */
      authorisedBy?: string
      /** @description Free format comment */
      comment?: string
      /** @description Audit data associated with the records */
      audit: components['schemas']['NomisAudit']
    }
    CodeDescription: {
      code: string
      description: string
    }
    /** @description The data held in NOMIS the person or system that created this record */
    NomisAudit: {
      /**
       * Format: date-time
       * @description Date time record was created
       */
      createDatetime: string
      /** @description Username of person that created the record (might also be a system)  */
      createUsername: string
      /** @description Real name of person that created the record (might by null for system users) */
      createDisplayName?: string
      /** @description Username of person that last modified the record (might also be a system) */
      modifyUserId?: string
      /** @description Real name of person that modified the record (might by null for system users) */
      modifyDisplayName?: string
      /**
       * Format: date-time
       * @description Date time record was last modified
       */
      modifyDatetime?: string
      /**
       * Format: date-time
       * @description Audit Date time
       */
      auditTimestamp?: string
      /** @description Audit username */
      auditUserId?: string
      /** @description NOMIS or DPS module that created the record */
      auditModuleName?: string
      /** @description Client userid */
      auditClientUserId?: string
      /** @description IP Address where request originated from */
      auditClientIpAddress?: string
      /** @description Machine name where request originated from */
      auditClientWorkstationName?: string
      /** @description Additional information that is audited */
      auditAdditionalInfo?: string
    }
    /** @description A request to update an alert in NOMIS */
    UpdateAlertRequest: {
      /**
       * Format: date
       * @description Date alert started
       */
      date: string
      /**
       * Format: date
       * @description Date alert expired
       */
      expiryDate?: string
      /** @description true if alert is active and has not expired */
      isActive: boolean
      /** @description Free format comment */
      comment?: string
      /** @description Username of person that update the record (might also be a system)  */
      updateUsername: string
      /**
       * @description Free format text of person or department that authorised the alert
       * @example security
       */
      authorisedBy?: string
    }
    /** @description Request to update an person (aka DPS contact) in NOMIS */
    UpdatePersonRequest: {
      /**
       * @description First name of the person
       * @example Ashantee
       */
      firstName: string
      /**
       * @description Surname name of the person
       * @example Addo
       */
      lastName: string
      /**
       * @description Middle name of the person
       * @example Ashwin
       */
      middleName?: string
      /**
       * Format: date
       * @description Date of birth of the person
       */
      dateOfBirth?: string
      /**
       * @description Gender code of the person
       * @example F
       */
      genderCode?: string
      /**
       * @description Title code of the person
       * @example DR
       */
      titleCode?: string
      /**
       * @description Language code of the person
       * @example FRE-FRA
       */
      languageCode?: string
      /** @description True if the person requires an interpreter */
      interpreterRequired: boolean
      /**
       * @description Domestic status code aka marital status of the person
       * @example S
       */
      domesticStatusCode?: string
      /** @description True if a staff member */
      isStaff?: boolean
      /**
       * Format: date
       * @description Date the person dies
       */
      deceasedDate?: string
    }
    /** @description Request to update a contact restriction in NOMIS for either global or against a specific relationship */
    UpdateContactPersonRestrictionRequest: {
      /** @description Restriction type */
      typeCode: string
      /** @description Free format comment text */
      comment?: string
      /**
       * Format: date
       * @description Date restriction became active
       */
      effectiveDate: string
      /**
       * Format: date
       * @description Date restriction is no longer active
       */
      expiryDate?: string
      /** @description Username Staff member who updated the restriction */
      enteredStaffUsername: string
    }
    UpdatePersonPhoneRequest: {
      /**
       * @description The number
       * @example 0114 555 555
       */
      number: string
      /**
       * @description Extension
       * @example x432
       */
      extension?: string
      /**
       * @description Phone type code
       * @example MOB
       */
      typeCode: string
    }
    UpdatePersonIdentifierRequest: {
      /** @description The identifier type code */
      typeCode: string
      /**
       * @description The identifier value
       * @example NE121212T
       */
      identifier: string
      /**
       * @description The issued authority
       * @example Police
       */
      issuedAuthority?: string
    }
    UpdatePersonEmploymentRequest: {
      /**
       * Format: int64
       * @description The id of the corporate organisation this employment is at
       */
      corporateId: number
      /** @description True is employment is active */
      active: boolean
    }
    UpdatePersonEmailRequest: {
      /**
       * @description Email address
       * @example test@test.justice.gov.uk
       */
      email: string
    }
    /** @description Request to update a contact (aka DPS prisoner contact) in NOMIS */
    UpdatePersonContactRequest: {
      contactTypeCode: string
      /**
       * @description The relationship type
       * @example BRO
       */
      relationshipTypeCode: string
      /** @description True if active */
      active: boolean
      /**
       * Format: date
       * @description Date contact is no longer active
       */
      expiryDate?: string
      /** @description True if approved to visit the prisoner */
      approvedVisitor: boolean
      /** @description True if next of kin to the prisoner */
      nextOfKin: boolean
      /** @description True if emergency contact for the prisoner */
      emergencyContact: boolean
      /** @description Free format comment text */
      comment?: string
    }
    UpdatePersonAddressRequest: {
      /**
       * @description Address reference code
       * @example HOME
       */
      typeCode?: string
      /**
       * @description Flat name or number
       * @example Apartment 3
       */
      flat?: string
      /**
       * @description Premise
       * @example 22
       */
      premise?: string
      /**
       * @description Street
       * @example West Street
       */
      street?: string
      /**
       * @description Locality
       * @example Keighley
       */
      locality?: string
      /**
       * @description Post code
       * @example MK15 2ST
       */
      postcode?: string
      /**
       * @description City reference code
       * @example 25343
       */
      cityCode?: string
      /**
       * @description County reference code
       * @example S.YORKSHIRE
       */
      countyCode?: string
      /**
       * @description Country reference code
       * @example ENG
       */
      countryCode?: string
      /** @description true if address not fixed. for example homeless */
      noFixedAddress?: boolean
      /** @description true if this is the person's primary address */
      primaryAddress: boolean
      /** @description true if this is used for mail */
      mailAddress: boolean
      /** @description Free format comment about the address */
      comment?: string
      /**
       * Format: date
       * @description Date address was valid from
       */
      startDate?: string
      /**
       * Format: date
       * @description Date address was valid to
       */
      endDate?: string
      /** @description true if address validated by PAF */
      validatedPAF?: boolean
    }
    /** @description Offender NonAssociation update request */
    UpdateNonAssociationRequest: {
      /**
       * @description Reason code of the first prisoner, domain NON_ASSO_RSN
       * @example VIC
       */
      reason: string
      /**
       * @description Reason code of the other prisoner, domain NON_ASSO_RSN
       * @example PER
       */
      recipReason: string
      /**
       * @description Type code, domain NON_ASSO_TYP
       * @example WING
       */
      type: string
      /**
       * @description Free text name of staff member
       * @example Joe Bloggs
       */
      authorisedBy?: string
      /**
       * Format: date
       * @description Effective date
       * @example 2022-08-12
       */
      effectiveDate: string
      /**
       * @description Comment
       * @example Some comment
       */
      comment?: string
      /**
       * Format: date
       * @description Expiry date
       * @example 2024-08-12
       */
      expiryDate?: string
    }
    /** @description Location profile or attribute */
    ProfileRequest: {
      /**
       * @description Reference Domain for the attribute
       * @enum {string}
       */
      profileType: 'HOU_SANI_FIT' | 'HOU_UNIT_ATT' | 'HOU_USED_FOR' | 'SUP_LVL_TYPE' | 'NON_ASSO_TYP'
      /** @description Reference Code within the domain for the attribute */
      profileCode: string
    }
    /** @description Location update request */
    UpdateLocationRequest: {
      /**
       * @description Whether a CELL, VISIT room, Kitchen etc (Ref type ILOC_TYPE)
       * @enum {string}
       */
      locationType:
        | 'ADJU'
        | 'ADMI'
        | 'APP'
        | 'AREA'
        | 'ASSO'
        | 'BOOT'
        | 'BOX'
        | 'CELL'
        | 'CLAS'
        | 'EXER'
        | 'EXTE'
        | 'FAIT'
        | 'GROU'
        | 'HCEL'
        | 'HOLD'
        | 'IGRO'
        | 'INSI'
        | 'INTE'
        | 'LAND'
        | 'LOCA'
        | 'MEDI'
        | 'MOVE'
        | 'OFFI'
        | 'OUTS'
        | 'POSI'
        | 'RESI'
        | 'ROOM'
        | 'RTU'
        | 'SHEL'
        | 'SPOR'
        | 'SPUR'
        | 'STOR'
        | 'TABL'
        | 'TRAI'
        | 'TRRM'
        | 'VIDE'
        | 'VISIT'
        | 'WING'
        | 'WORK'
      /**
       * @description Full code hierarchy
       * @example MDI-C-3-015
       */
      description: string
      /**
       * @description Description of location
       * @example Some description
       */
      userDescription?: string
      /**
       * @description Usually a number for a cell, a letter for a wing or landing. Used to calculate description
       * @example 005
       */
      locationCode: string
      /**
       * Format: int64
       * @description Parent location if any, e.g. landing for a cell
       * @example 1234567
       */
      parentLocationId?: number
      /**
       * @description Housing Unit type, Reference code (HOU_UN_TYPE)
       * @enum {string}
       */
      unitType?: 'HC' | 'HOLC' | 'NA' | 'OU' | 'REC' | 'SEG' | 'SPLC'
      /**
       * Format: int32
       * @description Defines the order within parent location
       * @example Joe Bloggs
       */
      listSequence?: number
      /**
       * @description Comment
       * @example Some comment
       */
      comment?: string
      /** @description Profiles */
      profiles?: components['schemas']['ProfileRequest'][]
      /** @description Usages */
      usages?: components['schemas']['UsageRequest'][]
    }
    /** @description Location usage */
    UsageRequest: {
      /**
       * @description Types of location that the usage applies to
       * @enum {string}
       */
      internalLocationUsageType: 'APP' | 'MOVEMENT' | 'OCCUR' | 'OIC' | 'OTHER' | 'OTH' | 'PROG' | 'PROP' | 'VISIT'
      /** Format: int32 */
      capacity?: number
      /** Format: int32 */
      sequence?: number
    }
    /** @description Location deactivate request */
    DeactivateRequest: {
      /**
       * Format: date
       * @description The deactivation date, defaults to today
       * @example 2024-12-31
       */
      deactivateDate?: string
      /**
       * @description The reason code for deactivation, reference data 'LIV_UN_RSN'
       * @enum {string}
       */
      reasonCode?: 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L'
      /**
       * Format: date
       * @description The expected reactivation date if any
       * @example 2024-12-31
       */
      reactivateDate?: string
      /** @description If true, update Nomis even if already inactive. Useful when a temporarily inactive location is deactivated permanently */
      force: boolean
    }
    /** @description Location update certification request */
    UpdateCertificationRequest: {
      /**
       * Format: int32
       * @description The CNA certified capacity
       */
      cnaCapacity: number
      /** @description Whether the location is certified */
      certified: boolean
    }
    /** @description Location update capacity request */
    UpdateCapacityRequest: {
      /**
       * Format: int32
       * @description The maximum physical capacity
       */
      capacity?: number
      /**
       * Format: int32
       * @description The maximum operational capacity
       */
      operationalCapacity?: number
    }
    /** @description Key date adjustment update request */
    UpdateKeyDateAdjustmentRequest: {
      /**
       * @description NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS
       * @example ADA
       * @enum {string}
       */
      adjustmentTypeCode: 'LAL' | 'UAL' | 'RADA' | 'ADA' | 'SREM'
      /**
       * Format: date
       * @description Date adjustment is applied
       */
      adjustmentDate?: string
      /**
       * Format: date
       * @description Start of the period which contributed to the adjustment
       */
      adjustmentFromDate: string
      /**
       * Format: int64
       * @description Number of days for the adjustment
       */
      adjustmentDays: number
      /** @description Comment */
      comment?: string
      /** @description Flag to indicate if the adjustment is being applied */
      active?: boolean
    }
    /** @description IEP creation request */
    CreateIncentiveRequest: {
      /**
       * @description IEP Level
       * @example Standard
       */
      iepLevel: string
      /**
       * @description Review comments
       * @example A review took place
       */
      comments?: string
      /**
       * Format: date-time
       * @description Date and time when last review took place
       * @example 2022-08-12T14:30
       */
      iepDateTime: string
      /**
       * @description Prison ID
       * @example MDI
       */
      prisonId: string
      /**
       * @description Username of the reviewer
       * @example AJONES
       */
      userId: string
    }
    ReferenceCode: {
      code: string
      domain: string
      description: string
      active: boolean
      /** Format: int32 */
      sequence?: number
      parentCode?: string
      /** Format: date */
      expiredDate?: string
      systemDataFlag: boolean
    }
    /** @description Prison Incentive level data create request */
    CreatePrisonIncentiveRequest: {
      /**
       * @description Incentive Level code
       * @example STD
       */
      levelCode: string
      /**
       * @description active status of the Global Incentive Level
       * @example true
       */
      active: boolean
      /**
       * @description default on admission
       * @example true
       */
      defaultOnAdmission: boolean
      /**
       * Format: int32
       * @description The number of weekday visits for a convicted prisoner per fortnight
       * @example 5500
       */
      visitOrderAllowance?: number
      /**
       * Format: int32
       * @description The number of privileged/weekend visits for a convicted prisoner per 4 weeks
       * @example 5500
       */
      privilegedVisitOrderAllowance?: number
      /**
       * Format: int32
       * @description The amount transferred weekly from the private cash account to the spends account for a remand prisoner to use
       * @example 5500
       */
      remandTransferLimitInPence?: number
      /**
       * Format: int32
       * @description The maximum amount allowed in the spends account for a remand prisoner
       * @example 5500
       */
      remandSpendLimitInPence?: number
      /**
       * Format: int32
       * @description The amount transferred weekly from the private cash account to the spends account for a convicted prisoner to use
       * @example 5500
       */
      convictedTransferLimitInPence?: number
      /**
       * Format: int32
       * @description The maximum amount allowed in the spends account for a convicted prisoner
       * @example 5500
       */
      convictedSpendLimitInPence?: number
    }
    /** @description Incentive information */
    PrisonIncentiveLevelDataResponse: {
      prisonId: string
      iepLevelCode: string
      /** Format: int32 */
      visitOrderAllowance?: number
      /** Format: int32 */
      privilegedVisitOrderAllowance?: number
      defaultOnAdmission: boolean
      /** Format: int32 */
      remandTransferLimitInPence?: number
      /** Format: int32 */
      remandSpendLimitInPence?: number
      /** Format: int32 */
      convictedTransferLimitInPence?: number
      /** Format: int32 */
      convictedSpendLimitInPence?: number
      active: boolean
      /** Format: date */
      expiryDate?: string
      visitAllowanceActive?: boolean
      /** Format: date */
      visitAllowanceExpiryDate?: string
    }
    CSIPComponent: {
      /**
       * @description The child component created
       * @enum {string}
       */
      component: 'ATTENDEE' | 'FACTOR' | 'INTERVIEW' | 'PLAN' | 'REVIEW'
      /**
       * Format: int64
       * @description The nomisId of the created component
       */
      nomisId: number
      /** @description The dpsId of the created component */
      dpsId: string
    }
    /** @description A response after a csip has been upserted in NOMIS */
    UpsertCSIPResponse: {
      /**
       * Format: int64
       * @description The nomis csip id
       */
      nomisCSIPReportId: number
      /** @description The prisoner nomis Id relating to this csip */
      offenderNo: string
      /** @description Any new CSIP components that were created */
      components: components['schemas']['CSIPComponent'][]
    }
    ActionsRequest: {
      openCSIPAlert: boolean
      nonAssociationsUpdated: boolean
      observationBook: boolean
      unitOrCellMove: boolean
      csraOrRsraReview: boolean
      serviceReferral: boolean
      simReferral: boolean
    }
    AttendeeRequest: {
      /**
       * Format: int64
       * @description Review Attendee/Contributor Id
       */
      id?: number
      /** @description DPS Attendee id */
      dpsId: string
      /** @description Name of attendee/contributor */
      name?: string
      /** @description Role of attendee/contributor */
      role?: string
      /** @description If attended (otherwise contributor) */
      attended: boolean
      /** @description Contribution */
      contribution?: string
    }
    CSIPFactorRequest: {
      /**
       * Format: int64
       * @description Contributory Factor id
       */
      id?: number
      /** @description DPS Factor id */
      dpsId: string
      /** @description Contributory Factor */
      typeCode: string
      /** @description Factor comment */
      comment?: string
    }
    DecisionRequest: {
      /** @description Conclusion & Reason for decision */
      conclusion?: string
      /** @description Outcome */
      decisionOutcomeCode?: string
      /** @description Signed off by */
      signedOffRoleCode?: string
      /** @description The username of the person who recorded the decision */
      recordedBy?: string
      /**
       * Format: date
       * @description Recorded Date
       */
      recordedDate?: string
      /** @description What to do next */
      nextSteps?: string
      /** @description Other information to take into consideration */
      otherDetails?: string
      /** @description Action list */
      actions: components['schemas']['ActionsRequest']
    }
    InterviewDetailRequest: {
      /**
       * Format: int64
       * @description Interview Id
       */
      id?: number
      /** @description DPS Interview id */
      dpsId: string
      /** @description Person being interviewed */
      interviewee: string
      /**
       * Format: date
       * @description date of interview
       */
      date: string
      /** @description Why the incident occurred */
      roleCode: string
      /** @description Additional data regarding the interview */
      comments?: string
    }
    InvestigationDetailRequest: {
      /** @description Staff involved in the incident */
      staffInvolved?: string
      /** @description Whether any evidence was secured */
      evidenceSecured?: string
      /** @description Why the incident occurred */
      reasonOccurred?: string
      /** @description Normal behaviour of the offender */
      usualBehaviour?: string
      /** @description Offender's trigger */
      trigger?: string
      /** @description Protective factors */
      protectiveFactors?: string
      /** @description Interview */
      interviews?: components['schemas']['InterviewDetailRequest'][]
    }
    PlanRequest: {
      /**
       * Format: int64
       * @description Plan Id
       */
      id?: number
      /** @description DPS Plan/IdentifiedNeed id */
      dpsId: string
      /** @description Details of the need */
      identifiedNeed: string
      /** @description Intervention plan */
      intervention: string
      /** @description Information regarding progression of plan */
      progression?: string
      /** @description The person reporting - free text */
      referredBy: string
      /**
       * Format: date
       * @description Target date of plan
       */
      targetDate: string
      /**
       * Format: date
       * @description Plan closed date
       */
      closedDate?: string
    }
    ReviewRequest: {
      /**
       * Format: int64
       * @description Review Id
       */
      id?: number
      /** @description DPS Review id */
      dpsId: string
      /** @description Attendees to the review */
      attendees?: components['schemas']['AttendeeRequest'][]
      /** @description Whether to remain on CSIP */
      remainOnCSIP: boolean
      /** @description If the csip has been updated */
      csipUpdated: boolean
      /** @description If a case note was added */
      caseNote: boolean
      /** @description If the csip is closed */
      closeCSIP: boolean
      /** @description Whether people were informed */
      peopleInformed: boolean
      /** @description Summary details */
      summary?: string
      /**
       * Format: date
       * @description Next Review date
       */
      nextReviewDate?: string
      /**
       * Format: date
       * @description Review closed date
       */
      closeDate?: string
      /**
       * Format: date
       * @description The date the review was created
       */
      recordedDate: string
      /** @description The username of the person who recorded the review */
      recordedBy: string
      /**
       * Format: int32
       * @description The sequence number of the review, allowing for dps to set
       */
      reviewSequence: number
    }
    SaferCustodyScreeningRequest: {
      /** @description Result of the Safer Custody Screening */
      scsOutcomeCode: string
      /** @description The username of the person who recorded the data */
      recordedBy: string
      /**
       * Format: date
       * @description When the the SCS occurred
       */
      recordedDate: string
      /** @description Why the decision was made */
      reasonForDecision?: string
    }
    /** @description CSIP Report create/update request */
    UpsertCSIPRequest: {
      /**
       * Format: int64
       * @description The csip id
       * @example 1234
       */
      id?: number
      /**
       * @description The offender No
       * @example A11235BC
       */
      offenderNo: string
      /** @description Log number */
      logNumber?: string
      /**
       * Format: date
       * @description Date/Time incident occurred
       * @example 2023-04-03
       */
      incidentDate: string
      /**
       * Format: partial-time
       * @description Date/Time incident occurred
       * @example 10:00
       */
      incidentTime?: string
      /** @description Type of incident */
      typeCode: string
      /** @description Location of the incident */
      locationCode: string
      /** @description The Area of work, aka function */
      areaOfWorkCode: string
      /** @description The person reporting the incident - free text */
      reportedBy: string
      /**
       * Format: date
       * @description Date reported
       */
      reportedDate: string
      /** @description proActive Referral */
      proActiveReferral: boolean
      /** @description If a staff member was assaulted */
      staffAssaulted: boolean
      /** @description If assaulted, the staff member name */
      staffAssaultedName?: string
      /** @description Originating Prison Id */
      prisonCodeWhenRecorded?: string
      /** @description Additional information for the CSIP Report */
      reportDetailRequest?: components['schemas']['UpsertReportDetailsRequest']
      /** @description Safer custody screening */
      saferCustodyScreening?: components['schemas']['SaferCustodyScreeningRequest']
      /** @description Investigation details of the incident */
      investigation?: components['schemas']['InvestigationDetailRequest']
      /** @description DecisionAndActions */
      decision?: components['schemas']['DecisionRequest']
      /** @description Case Manager involved */
      caseManager?: string
      /** @description Reason for plan */
      planReason?: string
      /**
       * Format: date
       * @description Date of first review
       */
      firstCaseReviewDate?: string
      /** @description CSIP Plans */
      plans?: components['schemas']['PlanRequest'][]
      /** @description CSIP Reviews */
      reviews?: components['schemas']['ReviewRequest'][]
    }
    UpsertReportDetailsRequest: {
      /** @description How the offender was involved */
      involvementCode?: string
      /** @description Concern description */
      concern?: string
      /** @description known reasons for the involvement */
      knownReasons?: string
      /** @description Additional information */
      otherInformation?: string
      /** @description If the safer custody team were informed */
      saferCustodyTeamInformed: boolean
      /** @description If the referral has been completed */
      referralComplete: boolean
      /** @description Who completed the referral */
      referralCompletedBy?: string
      /**
       * Format: date
       * @description Date the referral was completed
       */
      referralCompletedDate?: string
      /** @description Contributory factors */
      factors: components['schemas']['CSIPFactorRequest'][]
    }
    /** @description Request to update a corporate organisation in NOMIS */
    UpdateCorporateOrganisationRequest: {
      /**
       * @description The corporate name
       * @example Boots
       */
      name: string
      /** @description Is active */
      active: boolean
      /**
       * Format: date
       * @description Date made inactive
       */
      expiryDate?: string
      /**
       * @description The associated caseload code
       * @example WWI
       */
      caseloadId?: string
      /** @description User comment */
      comment?: string
      /** @description Programme number */
      programmeNumber?: string
      /** @description VAT number */
      vatNumber?: string
    }
    UpdateCorporateWebAddressRequest: {
      /**
       * @description Web address
       * @example test@test.justice.gov.uk
       */
      webAddress: string
    }
    UpdateCorporateTypesRequest: {
      /** @description list of type codes that should be set on the corporate */
      typeCodes: string[]
    }
    UpdateCorporatePhoneRequest: {
      /**
       * @description The number
       * @example 0114 555 555
       */
      number: string
      /**
       * @description Extension
       * @example x432
       */
      extension?: string
      /**
       * @description Phone type code
       * @example MOB
       */
      typeCode: string
    }
    UpdateCorporateEmailRequest: {
      /**
       * @description Email address
       * @example test@test.justice.gov.uk
       */
      email: string
    }
    /** @description Request to update a corporate organisation address in NOMIS */
    UpdateCorporateAddressRequest: {
      /**
       * @description Address type
       * @example BUS
       */
      typeCode?: string
      /**
       * @description Flat name or number
       * @example Apartment 3
       */
      flat?: string
      /**
       * @description Premise
       * @example 22
       */
      premise?: string
      /**
       * @description Street
       * @example West Street
       */
      street?: string
      /**
       * @description Locality
       * @example Keighley
       */
      locality?: string
      /**
       * @description Post code
       * @example MK15 2ST
       */
      postcode?: string
      /**
       * @description City code
       * @example 25343
       */
      cityCode?: string
      /**
       * @description County code
       * @example S.YORKSHIRE
       */
      countyCode?: string
      /**
       * @description Country code
       * @example ENG
       */
      countryCode?: string
      /** @description true if address not fixed. for example homeless */
      noFixedAddress: boolean
      /** @description true if this is the corporate's primary address */
      primaryAddress: boolean
      /** @description true if this is used for mail */
      mailAddress: boolean
      /** @description Free format comment about the address */
      comment?: string
      /**
       * Format: date
       * @description Date address was valid from
       */
      startDate: string
      /**
       * Format: date
       * @description Date address was valid to
       */
      endDate?: string
      /** @description True if this is a service organisation */
      isServices: boolean
      /** @description Business hours */
      businessHours?: string
      /** @description Contact person */
      contactPersonName?: string
    }
    UpdateAmendment: {
      /** @description Free format text body of amendment */
      text: string
      /** @description Author login name of person or department that added the amendment */
      authorUsername: string
      /**
       * Format: date-time
       * @description Amendment created timestamp
       */
      createdDateTime: string
    }
    /** @description A request to amend a case note in NOMIS */
    UpdateCaseNoteRequest: {
      /** @description Free format text body of the amendment */
      text: string
      /** @description Amendments to the text */
      amendments: components['schemas']['UpdateAmendment'][]
    }
    /** @description Offender individual schedule update request */
    UpdateAppointmentRequest: {
      /**
       * Format: date
       * @description Appointment date
       * @example 2022-08-12
       */
      eventDate: string
      /**
       * Format: partial-time
       * @description Appointment start time
       * @example 09:45
       */
      startTime: string
      /**
       * Format: partial-time
       * @description Activity end time
       * @example 15:20
       */
      endTime: string
      /**
       * Format: int64
       * @description Room where the appointment is to occur (in cell if null)
       * @example 112233
       */
      internalLocationId?: number
      /**
       * @description Appointment event sub-type
       * @example MEOT
       */
      eventSubType: string
      /**
       * @description Comment
       * @example Some comment
       */
      comment?: string
    }
    /** @description A request to update an alert type reference data in NOMIS */
    UpdateAlertType: {
      /** @description The alert type description */
      description: string
    }
    /** @description A request to update an alert code reference data in NOMIS */
    UpdateAlertCode: {
      /** @description The alert description */
      description: string
    }
    Repair: {
      type: components['schemas']['CodeDescription']
      comment?: string
      cost?: number
      /** @description Username of person who created the record in NOMIS */
      createdByUsername: string
    }
    UpdateRepairsResponse: {
      /** @description The repairs required due to the damage */
      repairs: components['schemas']['Repair'][]
    }
    RepairToUpdateOrAdd: {
      /**
       * @description NOMIS repair type code
       * @enum {string}
       */
      typeCode: 'CLEA' | 'DECO' | 'ELEC' | 'FABR' | 'LOCK' | 'PLUM'
      /** @description Description of repair required by damage */
      comment?: string
    }
    /** @description Repairs required due to damage. Any items not in this list will be removed from the Adjudication in NOMIS */
    UpdateRepairsRequest: {
      /** @description Current list of repairs required due to damage */
      repairs: components['schemas']['RepairToUpdateOrAdd'][]
    }
    /** @description Hearing update fields */
    UpdateHearingRequest: {
      /**
       * @description Type of hearing
       * @example GOV
       */
      hearingType: string
      /**
       * Format: date
       * @description Hearing date
       */
      hearingDate: string
      /**
       * Format: partial-time
       * @description Hearing time
       */
      hearingTime: string
      /**
       * Format: int64
       * @description location id for the hearing
       * @example 123456
       */
      internalLocationId: number
    }
    Evidence: {
      type: components['schemas']['CodeDescription']
      /** Format: date */
      date: string
      detail: string
      /** @description Username of person who created the record in NOMIS */
      createdByUsername: string
    }
    UpdateEvidenceResponse: {
      /** @description The evidence associated with the adjudication incident */
      evidence: components['schemas']['Evidence'][]
    }
    EvidenceToUpdateOrAdd: {
      /**
       * @description Type of evidence
       * @example PHOTO
       * @enum {string}
       */
      typeCode: 'BEHAV' | 'DRUGTEST' | 'EVI_BAG' | 'OTHER' | 'PHOTO' | 'VICTIM' | 'WEAP' | 'WITNESS'
      /**
       * @description Description of evidence
       * @example Image of damages
       */
      detail: string
    }
    /** @description Evidence associated with adjudication incident. Any items not in this list will be removed from the Adjudication in NOMIS */
    UpdateEvidenceRequest: {
      /** @description Current list of evidence items */
      evidence: components['schemas']['EvidenceToUpdateOrAdd'][]
    }
    /** @description Provides the generated Hearing Result Award composite ID after creation */
    HearingResultAwardResponse: {
      /** Format: int64 */
      bookingId: number
      /** Format: int32 */
      sanctionSequence: number
    }
    /** @description A list of Hearing result awards created (aka punishment) */
    UpdateHearingResultAwardResponses: {
      /** @description an ordered list of awards created, the order matching the request order for awardRequestsToCreate */
      awardsCreated: components['schemas']['HearingResultAwardResponse'][]
      /** @description a list of awards that were deleted due to this update */
      awardsDeleted: components['schemas']['HearingResultAwardResponse'][]
    }
    AdjudicationChargeId: {
      /**
       * Format: int64
       * @description adjudication number
       */
      adjudicationNumber: number
      /**
       * Format: int32
       * @description charge sequence within the adjudication
       */
      chargeSequence: number
    }
    /** @description Hearing result award (aka punishment) to be created */
    ExistingHearingResultAwardRequest: {
      /** @description award to update */
      award: components['schemas']['HearingResultAwardRequest']
      /**
       * Format: int32
       * @description sanction sequence for the booking associated with the adjudication
       */
      sanctionSequence: number
    }
    /** @description Hearing result award (aka punishment) to be created */
    HearingResultAwardRequest: {
      /**
       * @description The type of award
       * @example CAUTION
       * @enum {string}
       */
      sanctionType:
        | 'ADA'
        | 'CAUTION'
        | 'CC'
        | 'EXTRA_WORK'
        | 'EXTW'
        | 'FORFEIT'
        | 'OTHER'
        | 'REMACT'
        | 'REMWIN'
        | 'STOP_EARN'
        | 'STOP_PCT'
        | 'PP'
      /**
       * @description The status of the award
       * @example IMMEDIATE
       * @enum {string}
       */
      sanctionStatus:
        | 'AS_AWARDED'
        | 'AWARD_RED'
        | 'IMMEDIATE'
        | 'PROSPECTIVE'
        | 'QUASHED'
        | 'REDAPP'
        | 'SUSPENDED'
        | 'SUSPEN_EXT'
        | 'SUSPEN_RED'
        | 'SUSP_PROSP'
      /**
       * @description Award comment
       * @example GUILTY
       */
      commentText?: string
      /**
       * Format: date
       * @description Award effective date
       */
      effectiveDate: string
      /**
       * @description optional compensation amount
       * @example 0.5
       */
      compensationAmount?: number
      /**
       * Format: int32
       * @description the duration  of the award, in days
       */
      sanctionDays?: number
      /** @description adjudication that contains the matching award that this award is consecutive to */
      consecutiveCharge?: components['schemas']['AdjudicationChargeId']
    }
    UnquashHearingResultAwardRequest: {
      /**
       * @description Finding code
       * @example PROVED
       */
      findingCode: string
      /** @description A list of current result awards (aka punishment) updated. Typically the awardsToCreate would be empty unless there was a previous synchronisation problem */
      awards: components['schemas']['UpdateHearingResultAwardRequest']
    }
    /** @description A list of Hearing result awards (aka punishment) to be created and updated */
    UpdateHearingResultAwardRequest: {
      /** @description a list of award requests to create */
      awardsToCreate: components['schemas']['HearingResultAwardRequest'][]
      /** @description a list of award requests to update */
      awardsToUpdate: components['schemas']['ExistingHearingResultAwardRequest'][]
    }
    /** @description Course schedule request */
    CourseScheduleRequest: {
      /**
       * Format: int64
       * @description The id of the course schedule if known
       * @example 13245
       */
      id?: number
      /**
       * Format: date
       * @description The date of the course schedule
       * @example 2023-04-03
       */
      date: string
      /**
       * Format: partial-time
       * @description The time of the course schedule
       * @example 10:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The time the course schedule ends
       * @example 11:00
       */
      endTime: string
      /**
       * @description Whether the course schedule has been cancelled
       * @example true
       */
      cancelled: boolean
    }
    /** @description Course activity creation request pay rates */
    PayRateRequest: {
      /**
       * @description The incentive level
       * @example BAS
       */
      incentiveLevel: string
      /**
       * @description The pay band (1 TO 10)
       * @example 4
       */
      payBand: string
      /**
       * @description The half day rate
       * @example 0.5
       */
      rate: number
      /**
       * Format: date
       * @description Pay rate start date, null means 'before every other rate'
       * @example 2022-08-12
       */
      startDate?: string
      /**
       * Format: date
       * @description Pay rate end date, if not passed will be derived from start dates
       * @example 2022-08-12
       */
      endDate?: string
    }
    /** @description Course activity creation request schedule rules */
    ScheduleRuleRequest: {
      /**
       * Format: partial-time
       * @description Schedule start time in 24 hour clock
       * @example 08:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description Schedule end time in 24 hour clock
       * @example 11:00
       */
      endTime: string
      /**
       * @description Scheduled on Monday
       * @example true
       */
      monday: boolean
      /**
       * @description Scheduled on Tuesday
       * @example true
       */
      tuesday: boolean
      /**
       * @description Scheduled on Wednesday
       * @example true
       */
      wednesday: boolean
      /**
       * @description Scheduled on Thursday
       * @example true
       */
      thursday: boolean
      /**
       * @description Scheduled on Friday
       * @example true
       */
      friday: boolean
      /**
       * @description Scheduled on Saturday
       * @example false
       */
      saturday: boolean
      /**
       * @description Scheduled on Sunday
       * @example false
       */
      sunday: boolean
    }
    /** @description Course activity update request */
    UpdateActivityRequest: {
      /**
       * Format: date
       * @description Activity start date
       * @example 2022-08-12
       */
      startDate: string
      /**
       * Format: date
       * @description Activity end date
       * @example 2022-08-12
       */
      endDate?: string
      /**
       * Format: int64
       * @description Room where the activity is to occur (from activity schedule)
       */
      internalLocationId?: number
      /**
       * Format: int32
       * @description Capacity of activity (from activity schedule)
       */
      capacity: number
      /** @description Pay rates */
      payRates: components['schemas']['PayRateRequest'][]
      /** @description Description from concatenated activity and activity schedule */
      description: string
      /** @description Minimum Incentive Level */
      minimumIncentiveLevelCode?: string
      /**
       * @description Half or Full day (H or F)
       * @example H
       * @enum {string}
       */
      payPerSession: 'F' | 'H'
      /** @description Schedule rules */
      scheduleRules: components['schemas']['ScheduleRuleRequest'][]
      /** @description Exclude bank holidays? */
      excludeBankHolidays: boolean
      /** @description Outside work? */
      outsideWork: boolean
      /** @description Program Service code (from activity category) */
      programCode: string
      /** @description Schedules */
      schedules: components['schemas']['CourseScheduleRequest'][]
    }
    /** @description Activity creation response */
    CreateActivityResponse: {
      /**
       * Format: int64
       * @description The created course activity id
       */
      courseActivityId: number
      /** @description The created course schedules */
      courseSchedules: components['schemas']['CreateScheduledInstanceResponse'][]
    }
    CreateScheduledInstanceResponse: {
      /**
       * Format: int64
       * @description The created scheduled instance id
       */
      courseScheduleId: number
      /**
       * Format: date
       * @description The instance date
       */
      date: string
      /**
       * Format: partial-time
       * @description The instance start time
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The instance end time
       */
      endTime: string
    }
    /** @description Course schedule update update response */
    UpdateCourseScheduleResponse: {
      /**
       * Format: int64
       * @description The id of the course schedule
       * @example 123456
       */
      courseScheduleId: number
    }
    /** @description A session to exclude from the allocation during which period attendances will not be generated */
    AllocationExclusion: {
      /**
       * @description The day of the exclusion
       * @example MON
       * @enum {string}
       */
      day: 'MON' | 'TUE' | 'WED' | 'THU' | 'FRI' | 'SAT' | 'SUN'
      /**
       * @description The session the exclusion applies to (morning, afternoon or evening). Or null for the whole day.
       * @example AM
       * @enum {string}
       */
      slot?: 'AM' | 'PM' | 'ED'
    }
    /** @description Course activity create or update allocation request */
    UpsertAllocationRequest: {
      /**
       * Format: int64
       * @description Booking id of the prisoner
       * @example 1234567
       */
      bookingId: number
      /**
       * @description The prisoner's pay band
       * @example 2
       */
      payBandCode?: string
      /**
       * Format: date
       * @description Activity start date
       * @example 2022-08-12
       */
      startDate: string
      /**
       * Format: date
       * @description Activity end date
       * @example 2022-08-12
       */
      endDate?: string
      /**
       * @description Activity end reason (from domain PS_END_RSN)
       * @example REL
       */
      endReason?: string
      /** @description Activity end comment */
      endComment?: string
      /** @description Offender is suspended from Activity? */
      suspended?: boolean
      /** @description Activity suspended comment */
      suspendedComment?: string
      /**
       * @description Offender program status from domain OFF_PRG_STS
       * @example ALLOC
       */
      programStatusCode: string
      /** @description Sessions excluded from the allocation during which period attendances will not be generated */
      exclusions?: components['schemas']['AllocationExclusion'][]
    }
    /** @description OffenderProgramProfile create/update response */
    UpsertAllocationResponse: {
      /**
       * Format: int64
       * @description The created OffenderProgramProfile id
       * @example 12345678
       */
      offenderProgramReferenceId: number
      /** @description Whether or not the allocation was created */
      created: boolean
      /** @description Prison code */
      prisonId: string
    }
    /** @description End activities request */
    EndActivitiesRequest: {
      /**
       * @description Course activity ids
       * @example [
       *       1,
       *       2
       *     ]
       */
      courseActivityIds: number[]
      /**
       * Format: date
       * @description The date activities and allocations are ended
       * @example 2025-02-20
       */
      endDate?: string
    }
    /** @description Visit creation request */
    CreateVisitRequest: {
      /**
       * Format: date-time
       * @description Visit start date and time
       */
      startDateTime: string
      /**
       * @description Visit end time
       * @example 14:30
       */
      endTime: string
      /** @description Prison where the visit is to occur */
      prisonId: string
      /** @description Visitors */
      visitorPersonIds: number[]
      /**
       * @description Visit type, whether social or official
       * @enum {string}
       */
      visitType: 'SCON' | 'OFFI'
      /**
       * Format: date
       * @description Issue date
       */
      issueDate: string
      /** @description Comment to be added to visit */
      visitComment: string
      /** @description Comment to be added to visit order (if one is created) */
      visitOrderComment: string
      /** @description Name of the real world room where visit will take place */
      room: string
      /**
       * @description Whether visit is restricted to a closed session
       * @enum {string}
       */
      openClosedStatus: 'OPEN' | 'CLOSED'
    }
    /** @description Visit creation response */
    CreateVisitResponse: {
      /**
       * Format: int64
       * @description The created Nomis visit id
       */
      visitId: number
    }
    /** @description Court case create request */
    CreateCourtCaseRequest: {
      /** Format: date */
      startDate: string
      legalCaseType: string
      courtId: string
      status: string
      courtAppearance?: components['schemas']['CourtAppearanceRequest']
      caseReference?: string
    }
    /** @description Create adjustment response */
    CreateCourtAppearanceResponse: {
      /** Format: int64 */
      id: number
      courtEventChargesIds: components['schemas']['OffenderChargeIdResponse'][]
    }
    /** @description Create court case response */
    CreateCourtCaseResponse: {
      /** Format: int64 */
      id: number
      courtAppearanceIds: components['schemas']['CreateCourtAppearanceResponse'][]
    }
    /** @description Court case associated reference */
    CaseIdentifier: {
      reference: string
      /** Format: date-time */
      createdDate: string
    }
    /** @description Case identifier list */
    CaseIdentifierRequest: {
      caseIdentifiers: components['schemas']['CaseIdentifier'][]
    }
    /** @description Create sentence response */
    CreateSentenceResponse: {
      /** Format: int64 */
      sentenceSeq: number
      /** Format: int64 */
      termSeq: number
      /** Format: int64 */
      bookingId: number
    }
    /** @description A response after a case note created in NOMIS */
    CreateCaseNoteResponse: {
      /**
       * Format: int64
       * @description The id of this case note
       */
      id: number
      /**
       * Format: int64
       * @description The booking id of this case note (which is the prisoner's latest at creation time)
       */
      bookingId: number
    }
    /** @description A request to create a case note in NOMIS */
    CreateCaseNoteRequest: {
      /** @description The case note type */
      caseNoteType: string
      /** @description The case note subtype */
      caseNoteSubType: string
      /**
       * Format: date-time
       * @description Date and time case note occurred
       */
      occurrenceDateTime: string
      /**
       * Format: date-time
       * @description Date and time case note was created
       */
      creationDateTime: string
      /** @description Free format text of person or department that created the case note */
      authorUsername: string
      /** @description Free format text body of case note */
      caseNoteText: string
    }
    /** @description A response after an alert created in NOMIS */
    CreateAlertResponse: {
      /**
       * Format: int64
       * @description The prisoner's bookingId related to this alert
       */
      bookingId: number
      /**
       * Format: int64
       * @description The sequence primary key within this booking
       */
      alertSequence: number
      /** @description The alert code */
      alertCode: components['schemas']['CodeDescription']
      /** @description The alert type */
      type: components['schemas']['CodeDescription']
    }
    /** @description A request to create an alert in NOMIS */
    CreateAlertRequest: {
      /** @description The alert code */
      alertCode: string
      /**
       * Format: date
       * @description Date alert started
       */
      date: string
      /**
       * Format: date
       * @description Date alert expired
       */
      expiryDate?: string
      /** @description true if alert is active and has not expired */
      isActive: boolean
      /** @description Free format comment */
      comment?: string
      /**
       * @description Free format text of person or department that authorised the alert
       * @example security
       */
      authorisedBy?: string
      /** @description Username of person that created the record (might also be a system)  */
      createUsername: string
    }
    AdjudicationCharge: {
      offence: components['schemas']['AdjudicationOffence']
      evidence?: string
      reportDetail?: string
      offenceId?: string
      /** Format: int32 */
      chargeSequence: number
    }
    AdjudicationIncident: {
      /**
       * Format: int64
       * @description The adjudication incident Id, part of the composite key with adjudicationSequence
       */
      adjudicationIncidentId: number
      /** @description Reporting staff member */
      reportingStaff: components['schemas']['Staff']
      /**
       * Format: date
       * @description Date of the associated incident
       */
      incidentDate: string
      /**
       * Format: partial-time
       * @description Date and time of the associated incident
       */
      incidentTime: string
      /**
       * Format: date
       * @description Date when the associated incident was reported
       */
      reportedDate: string
      /**
       * Format: partial-time
       * @description Date and time when the associated incident was reported
       */
      reportedTime: string
      /** @description Username of person who created the record in NOMIS */
      createdByUsername: string
      /**
       * Format: date-time
       * @description Date time when the record was created in NOMIS
       */
      createdDateTime: string
      /** @description location where incident took place */
      internalLocation: components['schemas']['InternalLocation']
      /** @description Incident type  */
      incidentType: components['schemas']['CodeDescription']
      /** @description Incident details */
      details?: string
      /** @description Prison where the incident took place */
      prison: components['schemas']['CodeDescription']
      /** @description Prisoners that witnessed the incident. Rarely used in NOMIS */
      prisonerWitnesses: components['schemas']['Prisoner'][]
      /** @description Prisoners that were victims in the incident. Not often used in NOMIS */
      prisonerVictims: components['schemas']['Prisoner'][]
      /** @description Other suspects involved in the incident that may or may not have been placed on report */
      otherPrisonersInvolved: components['schemas']['Prisoner'][]
      /** @description The officer who reported the incident who may differ from the reporting officer. Often used in NOMIS */
      reportingOfficers: components['schemas']['Staff'][]
      /** @description Staff that witnessed the incident. Used in NOMIS in a small percentage of cases */
      staffWitnesses: components['schemas']['Staff'][]
      /** @description Staff that was a victim in the incident. Rarely used in NOMIS */
      staffVictims: components['schemas']['Staff'][]
      /** @description Other staff that was involved in the incident either using force or some other link. Used in NOMIS in a small percentage of cases */
      otherStaffInvolved: components['schemas']['Staff'][]
      /** @description The repairs required due to the damage */
      repairs: components['schemas']['Repair'][]
    }
    AdjudicationOffence: {
      code: string
      description: string
      type?: components['schemas']['CodeDescription']
      category?: components['schemas']['CodeDescription']
    }
    /** @description Adjudication Information */
    AdjudicationResponse: {
      /**
       * Format: int32
       * @description The adjudication/party sequence, part of the composite key with adjudicationIncidentId
       */
      adjudicationSequence: number
      /** @description The offender number, aka nomsId, prisonerId */
      offenderNo: string
      /**
       * Format: int64
       * @description The id of the booking associated with the adjudication
       */
      bookingId: number
      /**
       * Format: int64
       * @description The adjudication number (business key)
       */
      adjudicationNumber: number
      /** @description Gender recorded in NOMIS */
      gender: components['schemas']['CodeDescription']
      /** @description Current prison or null if OUT */
      currentPrison?: components['schemas']['CodeDescription']
      /**
       * Format: date
       * @description Date Prisoner was added to the adjudication ????
       */
      partyAddedDate: string
      /** @description Adjudication comments */
      comment?: string
      /** @description Associated incident details */
      incident: components['schemas']['AdjudicationIncident']
      /** @description Charges associated with this adjudication */
      charges: components['schemas']['AdjudicationCharge'][]
      /** @description Investigator that gathers evidence. Used in NOMIS in a small percentage of cases */
      investigations: components['schemas']['Investigation'][]
      /** @description hearings associated with this adjudication */
      hearings: components['schemas']['Hearing'][]
    }
    Hearing: {
      /** Format: int64 */
      hearingId: number
      type?: components['schemas']['CodeDescription']
      /**
       * Format: date
       * @description Hearing scheduled date as set by DPS but not used by NOMIS or set in NOMIS
       */
      scheduleDate?: string
      /**
       * Format: partial-time
       * @description Hearing scheduled time as set by DPS but not used by NOMIS or set in NOMIS
       */
      scheduleTime?: string
      /**
       * Format: date
       * @description Hearing date
       */
      hearingDate?: string
      /**
       * Format: partial-time
       * @description Hearing time
       */
      hearingTime?: string
      comment?: string
      representativeText?: string
      hearingStaff?: components['schemas']['Staff']
      internalLocation?: components['schemas']['InternalLocation']
      eventStatus?: components['schemas']['CodeDescription']
      hearingResults: components['schemas']['HearingResult'][]
      /** Format: int64 */
      eventId?: number
      /**
       * Format: date-time
       * @description Date time when the record was created the record in NOMIS
       */
      createdDateTime: string
      /** @description Username of person who created the record in NOMIS */
      createdByUsername: string
      /** @description List of hearing notifications */
      notifications: components['schemas']['HearingNotification'][]
    }
    HearingNotification: {
      /**
       * Format: date
       * @description Hearing notification date
       */
      deliveryDate: string
      /**
       * Format: partial-time
       * @description Hearing notification time
       */
      deliveryTime: string
      /** @description Notification comment */
      comment?: string
      /** @description Staff notified */
      notifiedStaff: components['schemas']['Staff']
    }
    HearingResult: {
      pleaFindingType?: components['schemas']['CodeDescription']
      findingType?: components['schemas']['CodeDescription']
      charge: components['schemas']['AdjudicationCharge']
      offence: components['schemas']['AdjudicationOffence']
      resultAwards: components['schemas']['HearingResultAward'][]
      /**
       * Format: date-time
       * @description Date time when the record was created the record in NOMIS
       */
      createdDateTime: string
      /** @description Username of person who created the record in NOMIS */
      createdByUsername: string
    }
    HearingResultAward: {
      /**
       * Format: int32
       * @description Sequence of this sanction for this prisoner's booking
       */
      sequence: number
      sanctionType?: components['schemas']['CodeDescription']
      sanctionStatus?: components['schemas']['CodeDescription']
      comment?: string
      /** Format: date */
      effectiveDate: string
      /** Format: date */
      statusDate?: string
      /** Format: int32 */
      sanctionDays?: number
      /** Format: int32 */
      sanctionMonths?: number
      compensationAmount?: number
      consecutiveAward?: components['schemas']['HearingResultAward']
      /** Format: int32 */
      chargeSequence: number
      /** Format: int64 */
      adjudicationNumber: number
      /** @description Username of person who created the record in NOMIS */
      createdByUsername: string
      /**
       * Format: date-time
       * @description Date time when the record was created the record in NOMIS
       */
      createdDateTime: string
    }
    InternalLocation: {
      /**
       * Format: int64
       * @description NOMIS location id
       */
      locationId: number
      /** @description NOMIS location code */
      code: string
      /** @description NOMIS location description */
      description: string
    }
    Investigation: {
      investigator: components['schemas']['Staff']
      comment?: string
      /** Format: date */
      dateAssigned: string
      evidence: components['schemas']['Evidence'][]
    }
    Prisoner: {
      /** @description The offender number, aka nomsId, prisonerId */
      offenderNo: string
      /** @description First name of prisoner */
      firstName?: string
      /** @description Last name of prisoner */
      lastName: string
      /** @description Username of person who created the record in NOMIS where this prisoner is used */
      createdByUsername: string
      /**
       * Format: date
       * @description date added in NOMIS to the adjudication incident
       */
      dateAddedToIncident: string
      /** @description comment about why they were added to the adjudication incident */
      comment?: string
    }
    Staff: {
      /** @description Username of first account related to staff */
      username: string
      /**
       * Format: int64
       * @description NOMIS staff id
       */
      staffId: number
      /** @description First name of staff member */
      firstName: string
      /** @description Last name of staff member */
      lastName: string
      /** @description Username of person who created the record in NOMIS where this staff is used */
      createdByUsername?: string
      /**
       * Format: date
       * @description date added in NOMIS to the adjudication incident
       */
      dateAddedToIncident?: string
      /** @description comment about why they were added to the adjudication incident */
      comment?: string
    }
    ChargeToCreate: {
      /**
       * @description Offence code they are charged with
       * @example 51:1N
       */
      offenceCode: string
    }
    /** @description Core Adjudication to be created */
    CreateAdjudicationRequest: {
      /** @description Associated incident details */
      incident: components['schemas']['IncidentToCreate']
      /** @description Charges associated with this adjudication */
      charges: components['schemas']['ChargeToCreate'][]
      /** @description The evidence records as part of the incident */
      evidence: components['schemas']['EvidenceToCreate'][]
    }
    EvidenceToCreate: {
      /**
       * @description Type of evidence
       * @example PHOTO
       * @enum {string}
       */
      typeCode: 'BEHAV' | 'DRUGTEST' | 'EVI_BAG' | 'OTHER' | 'PHOTO' | 'VICTIM' | 'WEAP' | 'WITNESS'
      /**
       * @description Description of evidence
       * @example Image of damages
       */
      detail: string
    }
    IncidentToCreate: {
      /**
       * @description Reporting staff member username
       * @example JANE.BROOKES
       */
      reportingStaffUsername: string
      /**
       * Format: date
       * @description Date of the associated incident
       */
      incidentDate: string
      /**
       * Format: partial-time
       * @description Date and time of the associated incident
       * @example 12:00:00
       */
      incidentTime: string
      /**
       * Format: date
       * @description Date when the associated incident was reported
       */
      reportedDate: string
      /**
       * Format: partial-time
       * @description Date and time when the associated incident was reported
       * @example 12:00:00
       */
      reportedTime: string
      /**
       * Format: int64
       * @description location id where incident took place
       * @example 123456
       */
      internalLocationId: number
      /**
       * @description Incident details
       * @example The details of the incident are as follows
       */
      details: string
      /**
       * @description Prison code where the incident took place
       * @example MDI
       */
      prisonId: string
      /**
       * @description Prisoners numbers that witnessed the incident
       * @example [
       *       "A1234AA",
       *       "A1234AB"
       *     ]
       */
      prisonerVictimsOffenderNumbers: string[]
      /**
       * @description Staff usernames that witnessed the incident
       * @example [
       *       "A.BARNES",
       *       "M.ABDULLAH"
       *     ]
       */
      staffWitnessesUsernames: string[]
      /**
       * @description Staff usernames that were victims in the incident
       * @example [
       *       "A.BARNES",
       *       "M.ABDULLAH"
       *     ]
       */
      staffVictimsUsernames: string[]
      /** @description The repairs required due to the damage */
      repairs: components['schemas']['RepairToCreate'][]
    }
    RepairToCreate: {
      /**
       * @description Type of repairs
       * @example PLUM
       * @enum {string}
       */
      typeCode: 'CLEA' | 'DECO' | 'ELEC' | 'FABR' | 'LOCK' | 'PLUM'
      /**
       * @description Optional description of repairs
       * @example Damage to the plumbing
       */
      comment?: string
      /**
       * @description Optional cost of repairs
       * @example 62.12
       */
      cost?: number
    }
    /** @description Details of a prisoner booking */
    PrisonerDetails: {
      /**
       * @description The NOMIS reference
       * @example A1234AA
       */
      offenderNo: string
      /**
       * Format: int64
       * @description The NOMIS booking ID
       * @example 1234567
       */
      bookingId: number
      /**
       * @description The prisoner's current location
       * @example BXI, OUT
       */
      location: string
      /** @description True if prisoner is active in prison */
      active: boolean
    }
    /** @description Sentence adjustment create request */
    CreateSentenceAdjustmentRequest: {
      /**
       * @description NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS
       * @example RX
       * @enum {string}
       */
      adjustmentTypeCode: 'RSR' | 'UR' | 'S240A' | 'RST' | 'RX'
      /**
       * Format: date
       * @description Date adjustment is applied
       */
      adjustmentDate?: string
      /**
       * Format: date
       * @description Start of the period which contributed to the adjustment
       */
      adjustmentFromDate?: string
      /**
       * Format: int64
       * @description Number of days for the adjustment
       */
      adjustmentDays: number
      /** @description Comment */
      comment?: string
      /**
       * @description Flag to indicate if the adjustment is being applied
       * @default true
       */
      active: boolean
    }
    /** @description Create adjustment response */
    CreateAdjustmentResponse: {
      /** Format: int64 */
      id: number
    }
    /** @description Incentive creation response */
    CreateIncentiveResponse: {
      /**
       * Format: int64
       * @description The created Nomis booking and sequence
       */
      bookingId: number
      /** Format: int64 */
      sequence: number
    }
    /** @description Key date adjustment create request */
    CreateKeyDateAdjustmentRequest: {
      /**
       * @description NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS
       * @example ADA
       * @enum {string}
       */
      adjustmentTypeCode: 'LAL' | 'UAL' | 'RADA' | 'ADA' | 'SREM'
      /**
       * Format: date
       * @description Date adjustment is applied
       */
      adjustmentDate?: string
      /**
       * Format: date
       * @description Start of the period which contributed to the adjustment
       */
      adjustmentFromDate: string
      /**
       * Format: int64
       * @description Number of days for the adjustment
       */
      adjustmentDays: number
      /** @description Comment */
      comment?: string
      /**
       * @description Flag to indicate if the adjustment is being applied
       * @default true
       */
      active: boolean
    }
    CreatePersonResponse: {
      /**
       * Format: int64
       * @description The person Id
       */
      personId: number
    }
    /** @description Request to create an person (aka DPS contact) in NOMIS */
    CreatePersonRequest: {
      /**
       * Format: int64
       * @description The person id. When non-zero this will be used rather than the auto generated id
       * @example 12345
       */
      personId?: number
      /**
       * @description First name of the person
       * @example Ashantee
       */
      firstName: string
      /**
       * @description Surname name of the person
       * @example Addo
       */
      lastName: string
      /**
       * @description Middle name of the person
       * @example Ashwin
       */
      middleName?: string
      /**
       * Format: date
       * @description Date of birth of the person
       */
      dateOfBirth?: string
      /**
       * @description Gender code of the person
       * @example F
       */
      genderCode?: string
      /**
       * @description Title code of the person
       * @example DR
       */
      titleCode?: string
      /**
       * @description Language code of the person
       * @example FRE-FRA
       */
      languageCode?: string
      /** @description True if the person requires an interpreter */
      interpreterRequired: boolean
      /**
       * @description Domestic status code aka marital status of the person
       * @example S
       */
      domesticStatusCode?: string
      /** @description True if a staff member */
      isStaff?: boolean
    }
    CreateContactPersonRestrictionResponse: {
      /**
       * Format: int64
       * @description Unique NOMIS Id of the restriction
       */
      id: number
    }
    /** @description Request to create a contact restriction in NOMIS for either global or against a specific relationship */
    CreateContactPersonRestrictionRequest: {
      /** @description Restriction type */
      typeCode: string
      /** @description Free format comment text */
      comment?: string
      /**
       * Format: date
       * @description Date restriction became active
       */
      effectiveDate: string
      /**
       * Format: date
       * @description Date restriction is no longer active
       */
      expiryDate?: string
      /** @description Username Staff member who created the restriction */
      enteredStaffUsername: string
    }
    CreatePersonPhoneResponse: {
      /**
       * Format: int64
       * @description Unique NOMIS Id of phone
       */
      phoneId: number
    }
    CreatePersonPhoneRequest: {
      /**
       * @description The number
       * @example 0114 555 555
       */
      number: string
      /**
       * @description Extension
       * @example x432
       */
      extension?: string
      /**
       * @description Phone type code
       * @example MOB
       */
      typeCode: string
    }
    CreatePersonIdentifierResponse: {
      /**
       * Format: int64
       * @description Unique NOMIS sequence for this identifier for this person
       */
      sequence: number
    }
    CreatePersonIdentifierRequest: {
      /** @description The identifier type code */
      typeCode: string
      /**
       * @description The identifier value
       * @example NE121212T
       */
      identifier: string
      /**
       * @description The issued authority
       * @example Police
       */
      issuedAuthority?: string
    }
    CreatePersonEmploymentResponse: {
      /**
       * Format: int64
       * @description Unique NOMIS sequence for this employment for this person
       */
      sequence: number
    }
    CreatePersonEmploymentRequest: {
      /**
       * Format: int64
       * @description The id of the corporate organisation this employment is at
       */
      corporateId: number
      /** @description True is employment is active */
      active: boolean
    }
    CreatePersonEmailResponse: {
      /**
       * Format: int64
       * @description Unique NOMIS Id of email address
       */
      emailAddressId: number
    }
    CreatePersonEmailRequest: {
      /**
       * @description Email address
       * @example test@test.justice.gov.uk
       */
      email: string
    }
    CreatePersonContactResponse: {
      /**
       * Format: int64
       * @description The contact Id
       */
      personContactId: number
    }
    /** @description Request to create a contact (aka DPS prisoner contact) in NOMIS */
    CreatePersonContactRequest: {
      /**
       * @description Offender no aka prisoner number. Contact will be added to latest booking
       * @example A1234AA
       */
      offenderNo: string
      /**
       * @description The contact type
       * @example S
       */
      contactTypeCode: string
      /**
       * @description The relationship type
       * @example BRO
       */
      relationshipTypeCode: string
      /** @description True if active */
      active: boolean
      /**
       * Format: date
       * @description Date contact is no longer active
       */
      expiryDate?: string
      /** @description True if approved to visit the prisoner */
      approvedVisitor: boolean
      /** @description True if next of kin to the prisoner */
      nextOfKin: boolean
      /** @description True if emergency contact for the prisoner */
      emergencyContact: boolean
      /** @description Free format comment text */
      comment?: string
    }
    CreatePersonAddressResponse: {
      /**
       * Format: int64
       * @description The address Id
       */
      personAddressId: number
    }
    CreatePersonAddressRequest: {
      /**
       * @description Address reference code
       * @example HOME
       */
      typeCode?: string
      /**
       * @description Flat name or number
       * @example Apartment 3
       */
      flat?: string
      /**
       * @description Premise
       * @example 22
       */
      premise?: string
      /**
       * @description Street
       * @example West Street
       */
      street?: string
      /**
       * @description Locality
       * @example Keighley
       */
      locality?: string
      /**
       * @description Post code
       * @example MK15 2ST
       */
      postcode?: string
      /**
       * @description City reference code
       * @example 25343
       */
      cityCode?: string
      /**
       * @description County reference code
       * @example S.YORKSHIRE
       */
      countyCode?: string
      /**
       * @description Country reference code
       * @example ENG
       */
      countryCode?: string
      /** @description true if address not fixed. for example homeless */
      noFixedAddress?: boolean
      /** @description true if this is the person's primary address */
      primaryAddress: boolean
      /** @description true if this is used for mail */
      mailAddress: boolean
      /** @description Free format comment about the address */
      comment?: string
      /**
       * Format: date
       * @description Date address was valid from
       */
      startDate?: string
      /**
       * Format: date
       * @description Date address was valid to
       */
      endDate?: string
    }
    /** @description Offender individual schedule creation request */
    CreateNonAssociationRequest: {
      /**
       * @description Noms id of the prisoner
       * @example A1234DF
       */
      offenderNo: string
      /**
       * @description Noms id of the other prisoner
       * @example A1234EG
       */
      nsOffenderNo: string
      /**
       * @description Reason code of the first prisoner, domain NON_ASSO_RSN
       * @example VIC
       */
      reason: string
      /**
       * @description Reason code of the other prisoner, domain NON_ASSO_RSN
       * @example PER
       */
      recipReason: string
      /**
       * @description Type code, domain NON_ASSO_TYP
       * @example WING
       */
      type: string
      /**
       * @description Free text name of staff member
       * @example Joe Bloggs
       */
      authorisedBy?: string
      /**
       * Format: date
       * @description Effective date
       * @example 2022-08-12
       */
      effectiveDate: string
      /**
       * @description Comment
       * @example Some comment
       */
      comment?: string
    }
    /** @description Non-association creation response */
    CreateNonAssociationResponse: {
      /**
       * Format: int32
       * @description The created offender_na_details type sequence number
       */
      typeSequence: number
    }
    /** @description Location creation request */
    CreateLocationRequest: {
      /**
       * @description Whether certified for use
       * @default false
       * @example true
       */
      certified: boolean
      /**
       * @description Whether a CELL, VISIT room, Kitchen etc (Ref type ILOC_TYPE)
       * @enum {string}
       */
      locationType:
        | 'ADJU'
        | 'ADMI'
        | 'APP'
        | 'AREA'
        | 'ASSO'
        | 'BOOT'
        | 'BOX'
        | 'CELL'
        | 'CLAS'
        | 'EXER'
        | 'EXTE'
        | 'FAIT'
        | 'GROU'
        | 'HCEL'
        | 'HOLD'
        | 'IGRO'
        | 'INSI'
        | 'INTE'
        | 'LAND'
        | 'LOCA'
        | 'MEDI'
        | 'MOVE'
        | 'OFFI'
        | 'OUTS'
        | 'POSI'
        | 'RESI'
        | 'ROOM'
        | 'RTU'
        | 'SHEL'
        | 'SPOR'
        | 'SPUR'
        | 'STOR'
        | 'TABL'
        | 'TRAI'
        | 'TRRM'
        | 'VIDE'
        | 'VISIT'
        | 'WING'
        | 'WORK'
      /**
       * @description Prison code of the location
       * @example LEI
       */
      prisonId: string
      /**
       * Format: int64
       * @description The containing location id
       * @example 1234567
       */
      parentLocationId?: number
      /**
       * Format: int32
       * @description Max capacity subject to resources
       * @example 43
       */
      operationalCapacity?: number
      /**
       * Format: int32
       * @description Certified Normal Accommodation capacity
       * @example 44
       */
      cnaCapacity?: number
      /**
       * @description Description of location
       * @example Some description
       */
      userDescription?: string
      /**
       * @description Usually a number for a cell, a letter for a wing or landing. Used to calculate description
       * @example 005
       */
      locationCode: string
      /**
       * @description Full code hierarchy
       * @example MDI-C-3-015
       */
      description: string
      /**
       * @description Housing Unit type, Reference code (HOU_UN_TYPE)
       * @enum {string}
       */
      unitType?: 'HC' | 'HOLC' | 'NA' | 'OU' | 'REC' | 'SEG' | 'SPLC'
      /**
       * Format: int32
       * @description Physical maximum capacity
       * @example 45
       */
      capacity?: number
      /**
       * Format: int32
       * @description Defines the order within parent location
       * @example Joe Bloggs
       */
      listSequence?: number
      /**
       * @description Comment
       * @example Some comment
       */
      comment?: string
      /** @description Profiles */
      profiles?: components['schemas']['ProfileRequest'][]
      /** @description Usages */
      usages?: components['schemas']['UsageRequest'][]
    }
    /** @description Location creation response */
    LocationIdResponse: {
      /**
       * Format: int64
       * @description The created agency_internal_locations location id
       */
      locationId: number
    }
    ReorderRequest: {
      codeList: string[]
    }
    /** @description Request to create a corporate organisation in NOMIS */
    CreateCorporateOrganisationRequest: {
      /**
       * Format: int64
       * @description Unique Id of corporate
       */
      id: number
      /**
       * @description The corporate name
       * @example Boots
       */
      name: string
      /** @description Is active */
      active: boolean
      /**
       * Format: date
       * @description Date made inactive
       */
      expiryDate?: string
      /**
       * @description The associated caseload code
       * @example WWI
       */
      caseloadId?: string
      /** @description User comment */
      comment?: string
      /** @description Programme number */
      programmeNumber?: string
      /** @description VAT number */
      vatNumber?: string
    }
    CreateCorporateWebAddressResponse: {
      /**
       * Format: int64
       * @description Unique NOMIS Id of web address
       */
      id: number
    }
    CreateCorporateWebAddressRequest: {
      /**
       * @description Web address
       * @example test@test.justice.gov.uk
       */
      webAddress: string
    }
    CreateCorporateTypeRequest: {
      /**
       * @description type
       * @example TEA
       */
      typeCode: string
    }
    CreateCorporatePhoneResponse: {
      /**
       * Format: int64
       * @description Unique NOMIS Id of phone
       */
      id: number
    }
    CreateCorporatePhoneRequest: {
      /**
       * @description The number
       * @example 0114 555 555
       */
      number: string
      /**
       * @description Extension
       * @example x432
       */
      extension?: string
      /**
       * @description Phone type code
       * @example MOB
       */
      typeCode: string
    }
    CreateCorporateEmailResponse: {
      /**
       * Format: int64
       * @description Unique NOMIS Id of email address
       */
      id: number
    }
    CreateCorporateEmailRequest: {
      /**
       * @description Email address
       * @example test@test.justice.gov.uk
       */
      email: string
    }
    CreateCorporateAddressResponse: {
      /**
       * Format: int64
       * @description The address Id
       */
      id: number
    }
    /** @description Request to create a corporate organisation address in NOMIS */
    CreateCorporateAddressRequest: {
      /**
       * @description Address type
       * @example BUS
       */
      typeCode?: string
      /**
       * @description Flat name or number
       * @example Apartment 3
       */
      flat?: string
      /**
       * @description Premise
       * @example 22
       */
      premise?: string
      /**
       * @description Street
       * @example West Street
       */
      street?: string
      /**
       * @description Locality
       * @example Keighley
       */
      locality?: string
      /**
       * @description Post code
       * @example MK15 2ST
       */
      postcode?: string
      /**
       * @description City code
       * @example 25343
       */
      cityCode?: string
      /**
       * @description County code
       * @example S.YORKSHIRE
       */
      countyCode?: string
      /**
       * @description Country code
       * @example ENG
       */
      countryCode?: string
      /** @description true if address not fixed. for example homeless */
      noFixedAddress: boolean
      /** @description true if this is the corporate's primary address */
      primaryAddress: boolean
      /** @description true if this is used for mail */
      mailAddress: boolean
      /** @description Free format comment about the address */
      comment?: string
      /**
       * Format: date
       * @description Date address was valid from
       */
      startDate: string
      /**
       * Format: date
       * @description Date address was valid to
       */
      endDate?: string
      /** @description True if this is a service organisation */
      isServices: boolean
      /** @description Business hours */
      businessHours?: string
      /** @description Contact person */
      contactPersonName?: string
    }
    /** @description Offender individual schedule creation request */
    CreateAppointmentRequest: {
      /**
       * Format: int64
       * @description Booking id of the prisoner
       * @example 1234567
       */
      bookingId: number
      /**
       * Format: date
       * @description Appointment date
       * @example 2022-08-12
       */
      eventDate: string
      /**
       * Format: partial-time
       * @description Appointment start time
       * @example 09:45
       */
      startTime: string
      /**
       * Format: partial-time
       * @description Activity end time
       * @example 15:20
       */
      endTime: string
      /**
       * Format: int64
       * @description Room where the appointment is to occur (in cell if null)
       * @example 112233
       */
      internalLocationId?: number
      /**
       * @description Appointment event sub-type
       * @example MEOT
       */
      eventSubType: string
      /**
       * @description Comment
       * @example Some comment
       */
      comment?: string
    }
    /** @description Offender individual schedule creation response */
    CreateAppointmentResponse: {
      /**
       * Format: int64
       * @description The created offender_ind_schedules id
       */
      eventId: number
    }
    /** @description A request to create an alert type reference data in NOMIS */
    CreateAlertType: {
      /** @description The alert type code */
      code: string
      /** @description The alert type description */
      description: string
      /**
       * Format: int32
       * @description The sequence in a UI list
       */
      listSequence: number
    }
    /** @description A request to create an alert code reference data in NOMIS */
    CreateAlertCode: {
      /** @description The alert code */
      code: string
      /** @description The parent type code */
      typeCode: string
      /** @description The alert description */
      description: string
      /**
       * Format: int32
       * @description The sequence in a UI list
       */
      listSequence: number
    }
    /** @description Provides the generated hearing ID after creation */
    CreateHearingResponse: {
      /**
       * Format: int64
       * @description The Id for the created Hearing
       */
      hearingId: number
    }
    /** @description Hearing to be created */
    CreateHearingRequest: {
      /**
       * @description Type of hearing
       * @example GOV
       */
      hearingType: string
      /**
       * Format: date
       * @description Hearing date
       */
      hearingDate: string
      /**
       * Format: partial-time
       * @description Hearing time
       */
      hearingTime: string
      /** @description agency id of hearing */
      agencyId: string
      /**
       * Format: int64
       * @description location id for the hearing
       * @example 123456
       */
      internalLocationId: number
    }
    /** @description Provides the generated hearing result composite ID after creation */
    CreateHearingResultResponse: {
      /** Format: int64 */
      hearingId: number
      /** Format: int32 */
      resultSequence: number
    }
    /** @description Hearing result to be created */
    CreateHearingResultRequest: {
      /**
       * @description adjudicator username for the hearing record
       * @example ASMITH_GEN
       */
      adjudicatorUsername?: string
      /**
       * @description The offender's plea code on this charge
       * @example NOT_GUILTY
       */
      pleaFindingCode: string
      /**
       * @description Finding code
       * @example GUILTY
       */
      findingCode: string
    }
    /** @description A list of Hearing result awards created (aka punishment) */
    CreateHearingResultAwardResponses: {
      /** @description an ordered list of award response, the order matching the request order */
      awardsCreated: components['schemas']['HearingResultAwardResponse'][]
    }
    /** @description A list of Hearing result awards (aka punishment) to be created */
    CreateHearingResultAwardRequest: {
      /** @description a list of award requests */
      awards: components['schemas']['HearingResultAwardRequest'][]
    }
    /** @description Course activity creation request */
    CreateActivityRequest: {
      /** @description Code generated from the activity and schedule ids and mapped */
      code: string
      /**
       * Format: date
       * @description Activity start date
       * @example 2022-08-12
       */
      startDate: string
      /**
       * Format: date
       * @description Activity end date
       * @example 2022-08-12
       */
      endDate?: string
      /** @description Prison where the activity is to occur */
      prisonId: string
      /**
       * Format: int64
       * @description Room where the activity is to occur (from activity schedule)
       */
      internalLocationId?: number
      /**
       * Format: int32
       * @description Capacity of activity (from activity schedule)
       */
      capacity: number
      /** @description Pay rates */
      payRates: components['schemas']['PayRateRequest'][]
      /** @description Description from concatenated activity and activity schedule */
      description: string
      /** @description Minimum Incentive Level */
      minimumIncentiveLevelCode?: string
      /** @description Program Service code (from activity category) */
      programCode: string
      /**
       * @description Half or Full day (H or F)
       * @example H
       * @enum {string}
       */
      payPerSession: 'F' | 'H'
      /** @description Schedules */
      schedules: components['schemas']['CourseScheduleRequest'][]
      /** @description Schedule rules */
      scheduleRules: components['schemas']['ScheduleRuleRequest'][]
      /** @description Exclude bank holidays? */
      excludeBankHolidays: boolean
      /** @description Outside work? */
      outsideWork: boolean
    }
    LeadVisitor: {
      /**
       * Format: int64
       * @description visitor NOMIS person Id
       */
      personId: number
      /** @description full name of visitor */
      fullName: string
      /** @description Ordered list of telephone numbers for contact with latest first */
      telephones: string[]
    }
    /** @description Visit information */
    VisitResponse: {
      /**
       * Format: int64
       * @description The visit id
       */
      visitId: number
      /** @description The offender number, aka nomsId, prisonerId */
      offenderNo: string
      /**
       * Format: date-time
       * @description Visit start date and time
       */
      startDateTime: string
      /**
       * Format: date-time
       * @description Visit end date and time
       */
      endDateTime: string
      /** @description Prison where the visit is to occur */
      prisonId: string
      /** @description Visitors */
      visitors: components['schemas']['Visitor'][]
      /** @description the lead visitor */
      leadVisitor?: components['schemas']['LeadVisitor']
      /** @description Visit type, whether social or official */
      visitType: components['schemas']['CodeDescription']
      /** @description The status of the visit */
      visitStatus: components['schemas']['CodeDescription']
      /** @description The outcome of the visit */
      visitOutcome: components['schemas']['CodeDescription']
      /** @description NOMIS room */
      agencyInternalLocation: components['schemas']['CodeDescription']
      /** @description Visit comments */
      commentText?: string
      /** @description Visitor concerns text */
      visitorConcernText?: string
      /**
       * Format: date-time
       * @description date and time of creation
       */
      whenCreated: string
      /**
       * Format: date-time
       * @description date and time of last update
       */
      whenUpdated?: string
      /** @description User id for visit creation */
      createUserId: string
      /** @description User id for last visit update */
      modifyUserId?: string
    }
    Visitor: {
      /**
       * Format: int64
       * @description visitor NOMIS person Id
       */
      personId: number
      /** @description Indicates lead visitor for the visit */
      leadVisitor: boolean
    }
    Pageable: {
      /** Format: int32 */
      page?: number
      /** Format: int32 */
      size?: number
      sort?: string[]
    }
    /** @description Visit id */
    VisitRoomCountResponse: {
      /** @description The internal location description */
      agencyInternalLocationDescription: string
      /**
       * Format: int64
       * @description The room usage count
       */
      count: number
      /** @description The prison id */
      prisonId: string
    }
    PageVisitIdResponse: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['VisitIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    PageableObject: {
      /** Format: int64 */
      offset?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      pageSize?: number
      paged?: boolean
      /** Format: int32 */
      pageNumber?: number
      unpaged?: boolean
    }
    SortObject: {
      empty?: boolean
      sorted?: boolean
      unsorted?: boolean
    }
    /** @description Visit id */
    VisitIdResponse: {
      /**
       * Format: int64
       * @description The visit id
       */
      visitId: number
    }
    /** @description The visit order balance changes held against a booking for a prisoner */
    VisitBalanceAdjustmentResponse: {
      /**
       * Format: int32
       * @description Number of visit orders affected by the adjustment
       */
      remainingVisitOrders?: number
      /**
       * Format: int32
       * @description Previous number of visit orders before the adjustment
       */
      previousRemainingVisitOrders?: number
      /**
       * Format: int32
       * @description Number of privileged visit orders affected by the adjustment
       */
      remainingPrivilegedVisitOrders?: number
      /**
       * Format: int32
       * @description Previous number of privileged visit orders before the adjustment
       */
      previousRemainingPrivilegedVisitOrders?: number
      /** @description Adjustment reason */
      adjustmentReason?: components['schemas']['CodeDescription']
      /**
       * Format: date
       * @description Date the adjust was made
       */
      adjustmentDate: string
      /** @description Comment text */
      comment?: string
      /**
       * Format: int32
       * @description Expiry balance
       */
      expiryBalance?: number
      /**
       * Format: date
       * @description Expiry date
       */
      expiryDate?: string
      /**
       * Format: int64
       * @description Which staff member endorsed the adjustment aka Entered by
       */
      endorsedStaffId?: number
      /**
       * Format: int64
       * @description Which staff member authorised the adjustment
       */
      authorisedStaffId?: number
      /** @description Who created the adjustment */
      createUsername: string
    }
    /** @description The visit balance held against a prisoner's latest booking */
    PrisonerVisitBalanceResponse: {
      /**
       * @description Prison number aka noms id / offender id display
       * @example A1234BC
       */
      prisonNumber: string
      /**
       * Format: int32
       * @description Total number of unallocated (remaining) visit orders
       */
      remainingVisitOrders: number
      /**
       * Format: int32
       * @description Total number of unallocated (remaining) privileged visit orders
       */
      remainingPrivilegedVisitOrders: number
      /**
       * Format: date
       * @description The date of the last IEP Allocation date via the batch process, if it exists
       */
      lastIEPAllocationDate?: string
    }
    PageVisitBalanceIdResponse: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['VisitBalanceIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description visit balance id */
    VisitBalanceIdResponse: {
      /**
       * Format: int64
       * @description The visit balance (booking) id
       */
      visitBalanceId: number
    }
    /** @description Splash Screen Access Condition details */
    SplashConditionDto: {
      /**
       * @description The prisonId or **ALL**
       * @example MDI but can be **ALL** for all
       */
      prisonId: string
      /**
       * @description Whether access to the screen is blocked
       * @example true
       */
      accessBlocked: boolean
      /**
       * @description The type of condition set on the screen
       * @example CASELOAD
       */
      type: components['schemas']['CodeDescription']
    }
    /** @description Splash screen details */
    SplashScreenDto: {
      /**
       * @description The name of the module/screen
       * @example OIDINCRS
       */
      moduleName: string
      /** @description The type of access - YES, NO, COND */
      accessBlockedType: components['schemas']['CodeDescription']
      /**
       * @description The text shown when a screen is accessible but will shortly be turned off
       * @example This screen will be turned off next month.
       */
      warningText?: string
      /**
       * @description The text shown when a screen is blocked
       * @example This screen is no longer accessible, use DPS.
       */
      blockedText?: string
      /** @description Prison access conditions */
      conditions: components['schemas']['SplashConditionDto'][]
    }
    PrisonDto: {
      /**
       * @description The prisonId or **ALL**
       * @example MDI but can be **ALL** for all
       */
      prisonId: string
    }
    /** @description A prison */
    PrisonDetails: {
      /**
       * @description The prison code
       * @example BXI
       */
      prisonId: string
      /**
       * @description The prison name
       * @example Brixton
       */
      name: string
    }
    /** @description Sentence adjustment */
    SentenceAdjustmentResponse: {
      /**
       * Format: int64
       * @description The sentence adjustment id
       */
      id: number
      /**
       * Format: int64
       * @description The booking id
       */
      bookingId: number
      /**
       * Format: int32
       * @description The booking sequence
       */
      bookingSequence: number
      /** @description Indicates whether for this booking the prisoner has been released */
      hasBeenReleased: boolean
      /** @description Current prison or OUT */
      prisonId: string
      /** @description The offender number, aka nomsId, prisonerId */
      offenderNo: string
      /**
       * Format: int64
       * @description The sequence of the sentence within this booking
       */
      sentenceSequence: number
      /** @description Adjustment type */
      adjustmentType: components['schemas']['SentencingAdjustmentType']
      /**
       * Format: date
       * @description Date adjustment is applied
       */
      adjustmentDate?: string
      /**
       * Format: date
       * @description Start of the period which contributed to the adjustment
       */
      adjustmentFromDate?: string
      /**
       * Format: date
       * @description End of the period which contributed to the adjustment
       */
      adjustmentToDate?: string
      /**
       * Format: int64
       * @description Number of days for the adjustment
       */
      adjustmentDays: number
      /** @description Comment */
      comment?: string
      /** @description Flag to indicate if the adjustment is being applied */
      active: boolean
      /** @description Flag to indicate the adjustment is hidden from end users. This is true when it was created as part of a key date adjustment */
      hiddenFromUsers: boolean
    }
    SentencingAdjustmentType: {
      /**
       * @description code
       * @example RX
       */
      code: string
      /**
       * @description description
       * @example Remand
       */
      description: string
    }
    AnswerResponse: {
      /**
       * Format: int64
       * @description The answer id
       */
      id: number
      /** @description The answer text */
      answer: string
      /**
       * Format: int32
       * @description The answer id used to set the listSequence values
       * @example 1
       */
      answerSequence: number
      /**
       * Format: int32
       * @description The order of the answers
       * @example 1
       */
      listSequence: number
      /**
       * @description If the answer is active
       * @example true
       */
      active: boolean
      /**
       * Format: date
       * @description The date the answer is no longer used
       */
      expiryDate?: string
      /** @description Question to be asked following this answer */
      nextQuestion?: components['schemas']['NextQuestionResponse']
      /**
       * @description If the answer should include a date
       * @example true
       */
      dateRequired: boolean
      /**
       * @description If the answer should include a comment
       * @example true
       */
      commentRequired: boolean
    }
    NextQuestionResponse: {
      /**
       * Format: int64
       * @description The question id
       */
      id: number
      /** @description The question text */
      question: string
    }
    QuestionResponse: {
      /**
       * Format: int64
       * @description The question id
       */
      id: number
      /** @description The question text */
      question: string
      /** @description List of Answers to this question */
      answers: components['schemas']['AnswerResponse'][]
      /**
       * @description If the question is active
       * @example true
       */
      active: boolean
      /**
       * Format: date
       * @description The date the question is no longer used
       */
      expiryDate?: string
      /**
       * @description If the question has multiple answers
       * @example true
       */
      multipleAnswers: boolean
      /**
       * Format: int32
       * @description The question id used to set the listSequence values
       * @example 1
       */
      questionSequence: number
      /**
       * Format: int32
       * @description The order of the questions
       * @example 1
       */
      listSequence: number
    }
    /** @description Questionnaire */
    QuestionnaireResponse: {
      /**
       * Format: int64
       * @description The unique identifier of the questionnaire
       */
      id: number
      /**
       * @description A description of the questionnaire
       * @example Escape from Establishment
       */
      description?: string
      /**
       * @description Code to identify this questionnaire
       * @example ESCAPE_EST
       */
      code: string
      /**
       * @description If the questionnaire is active
       * @example true
       */
      active: boolean
      /**
       * Format: int32
       * @description Sequence value of the questionnaires
       * @example 1
       */
      listSequence: number
      /** @description List of Questions (and associated Answers) for this Questionnaire */
      questions: components['schemas']['QuestionResponse'][]
      /** @description List of Roles allowed for an offender's participation in an incident */
      offenderRoles: string[]
      /**
       * Format: date
       * @description The date the questionnaire is no longer used
       */
      expiryDate?: string
      /**
       * Format: date-time
       * @description Questionnaire created date
       */
      createdDate: string
      /** @description Questionnaire created by */
      createdBy: string
      /**
       * Format: date-time
       * @description Questionnaire modified date
       */
      modifiedDate?: string
      /** @description Questionnaire modified by */
      modifiedBy?: string
    }
    PageQuestionnaireIdResponse: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['QuestionnaireIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Questionnaire id */
    QuestionnaireIdResponse: {
      /**
       * Format: int64
       * @description The questionnaire id
       */
      questionnaireId: number
    }
    /** @description An incentive levels */
    IncentiveLevel: {
      /**
       * @description The incentive level code
       * @example STD
       */
      code: string
      /**
       * @description The incentive level description
       * @example Standard
       */
      description: string
    }
    /** @description Offence */
    OffenceResponse: {
      offenceCode: string
      statuteCode: string
      description: string
    }
    /** @description Offence Result Code */
    OffenceResultCodeResponse: {
      chargeStatus: string
      code: string
      description: string
      dispositionCode: string
      conviction: boolean
    }
    /** @description Offender Charge */
    OffenderChargeResponse: {
      /** Format: int64 */
      id: number
      offence: components['schemas']['OffenceResponse']
      /** Format: int32 */
      offencesCount?: number
      /** Format: date */
      offenceDate?: string
      /** Format: date */
      offenceEndDate?: string
      plea?: components['schemas']['CodeDescription']
      propertyValue?: number
      totalPropertyValue?: number
      cjitCode1?: string
      cjitCode2?: string
      cjitCode3?: string
      chargeStatus?: components['schemas']['CodeDescription']
      resultCode1?: components['schemas']['OffenceResultCodeResponse']
      resultCode2?: components['schemas']['OffenceResultCodeResponse']
      mostSeriousFlag: boolean
      /** Format: int32 */
      lidsOffenceNumber?: number
    }
    /** @description Case related reference */
    CaseIdentifierResponse: {
      /**
       * @description The type of case identifier
       * @example CASE/INFO#
       */
      type: string
      /**
       * @description The value of the case identifier
       * @example asd/123
       */
      reference: string
      /**
       * Format: date-time
       * @description The time the case identifier was created
       * @example 2020-07-17T12:34:56
       */
      createDateTime: string
      /**
       * Format: date-time
       * @description The time the case identifier was last changed
       * @example 2021-07-16T12:34:56
       */
      modifiedDateTime?: string
      /**
       * @description The name of the module that last changed it, indicates if this was NOMIS or the synchronisation service
       * @example DPS_SYNCHRONISATION
       */
      auditModuleName?: string
    }
    /** @description Court Case */
    CourtCaseResponse: {
      /** Format: int64 */
      id: number
      offenderNo: string
      /** Format: int64 */
      bookingId: number
      primaryCaseInfoNumber?: string
      /** Format: int32 */
      caseSequence: number
      caseStatus: components['schemas']['CodeDescription']
      legalCaseType: components['schemas']['CodeDescription']
      /** Format: date */
      beginDate?: string
      courtId: string
      /** Format: int64 */
      combinedCaseId?: number
      /** Format: int64 */
      statusUpdateStaffId?: number
      /** Format: date */
      statusUpdateDate?: string
      statusUpdateComment?: string
      statusUpdateReason?: string
      /** Format: int32 */
      lidsCaseId?: number
      /** Format: int32 */
      lidsCombinedCaseId?: number
      /** Format: int32 */
      lidsCaseNumber: number
      /** Format: date-time */
      createdDateTime: string
      createdByUsername: string
      courtEvents: components['schemas']['CourtEventResponse'][]
      offenderCharges: components['schemas']['OffenderChargeResponse'][]
      caseInfoNumbers: components['schemas']['CaseIdentifierResponse'][]
      sentences: components['schemas']['SentenceResponse'][]
    }
    /** @description Court Event Charge */
    CourtEventChargeResponse: {
      /** Format: int64 */
      eventId: number
      offenderCharge: components['schemas']['OffenderChargeResponse']
      /** Format: int32 */
      offencesCount?: number
      /** Format: date */
      offenceDate?: string
      /** Format: date */
      offenceEndDate?: string
      plea?: components['schemas']['CodeDescription']
      propertyValue?: number
      totalPropertyValue?: number
      cjitCode1?: string
      cjitCode2?: string
      cjitCode3?: string
      resultCode1?: components['schemas']['OffenceResultCodeResponse']
      resultCode2?: components['schemas']['OffenceResultCodeResponse']
      mostSeriousFlag: boolean
    }
    /** @description Court Event */
    CourtEventResponse: {
      /** Format: int64 */
      id: number
      /** Format: int64 */
      caseId?: number
      offenderNo: string
      /** Format: date-time */
      eventDateTime: string
      courtEventType: components['schemas']['CodeDescription']
      eventStatus: components['schemas']['CodeDescription']
      directionCode?: components['schemas']['CodeDescription']
      judgeName?: string
      courtId: string
      outcomeReasonCode?: components['schemas']['OffenceResultCodeResponse']
      commentText?: string
      orderRequestedFlag?: boolean
      holdFlag?: boolean
      nextEventRequestFlag?: boolean
      /** Format: date-time */
      nextEventDateTime?: string
      /** Format: date-time */
      createdDateTime: string
      createdByUsername: string
      courtEventCharges: components['schemas']['CourtEventChargeResponse'][]
      courtOrders: components['schemas']['CourtOrderResponse'][]
    }
    /** @description Court Order */
    CourtOrderResponse: {
      /** Format: int64 */
      id: number
      /** Format: int64 */
      eventId: number
      /** Format: date */
      courtDate: string
      issuingCourt: string
      courtInfoId?: string
      orderType: string
      orderStatus: string
      /** Format: date */
      dueDate?: string
      /** Format: date */
      requestDate?: string
      seriousnessLevel?: components['schemas']['CodeDescription']
      commentText?: string
      nonReportFlag?: boolean
      sentencePurposes: components['schemas']['SentencePurposeResponse'][]
    }
    /** @description Sentence Purpose */
    SentencePurposeResponse: {
      /** Format: int64 */
      orderId: number
      orderPartyCode: string
      purposeCode: string
    }
    /** @description Offender Sentence */
    SentenceResponse: {
      /** Format: int64 */
      bookingId: number
      /** Format: int64 */
      sentenceSeq: number
      status: string
      calculationType: components['schemas']['CodeDescription']
      category: components['schemas']['CodeDescription']
      /** Format: date */
      startDate: string
      courtOrder?: components['schemas']['CourtOrderResponse']
      /** Format: int32 */
      consecSequence?: number
      /** Format: date */
      endDate?: string
      commentText?: string
      /** Format: int32 */
      absenceCount?: number
      /** Format: int64 */
      caseId?: number
      /** Format: date */
      etdCalculatedDate?: string
      /** Format: date */
      mtdCalculatedDate?: string
      /** Format: date */
      ltdCalculatedDate?: string
      /** Format: date */
      ardCalculatedDate?: string
      /** Format: date */
      crdCalculatedDate?: string
      /** Format: date */
      pedCalculatedDate?: string
      /** Format: date */
      npdCalculatedDate?: string
      /** Format: date */
      ledCalculatedDate?: string
      /** Format: date */
      sedCalculatedDate?: string
      /** Format: date */
      prrdCalculatedDate?: string
      /** Format: date */
      tariffCalculatedDate?: string
      /** Format: date */
      dprrdCalculatedDate?: string
      /** Format: date */
      tusedCalculatedDate?: string
      /** Format: int32 */
      aggSentenceSequence?: number
      /** Format: int32 */
      aggAdjustDays?: number
      sentenceLevel?: string
      /** Format: int32 */
      extendedDays?: number
      /** Format: int32 */
      counts?: number
      statusUpdateReason?: string
      statusUpdateComment?: string
      /** Format: date */
      statusUpdateDate?: string
      /** Format: int64 */
      statusUpdateStaffId?: number
      fineAmount?: number
      /** Format: date */
      dischargeDate?: string
      /** Format: int64 */
      nomSentDetailRef?: number
      /** Format: int64 */
      nomConsToSentDetailRef?: number
      /** Format: int64 */
      nomConsFromSentDetailRef?: number
      /** Format: int64 */
      nomConsWithSentDetailRef?: number
      /** Format: int32 */
      lineSequence?: number
      hdcExclusionFlag?: boolean
      hdcExclusionReason?: string
      cjaAct?: string
      /** Format: date */
      sled2Calc?: string
      /** Format: date */
      startDate2Calc?: string
      /** Format: date-time */
      createdDateTime: string
      createdByUsername: string
      sentenceTerms: components['schemas']['SentenceTermResponse'][]
      offenderCharges: components['schemas']['OffenderChargeResponse'][]
      prisonId: string
    }
    /** @description Sentence Term */
    SentenceTermResponse: {
      /** Format: int64 */
      termSequence: number
      sentenceTermType?: components['schemas']['CodeDescription']
      /** Format: int32 */
      years?: number
      /** Format: int32 */
      months?: number
      /** Format: int32 */
      weeks?: number
      /** Format: int32 */
      days?: number
      /** Format: int32 */
      hours?: number
      /** Format: date */
      startDate: string
      /** Format: date */
      endDate?: string
      lifeSentenceFlag: boolean
    }
    /** @description Profile details held against a booking */
    BookingProfileDetailsResponse: {
      /**
       * Format: int64
       * @description The booking's unique identifier
       * @example 1234567
       */
      bookingId: number
      /** @description A list of profile details for this booking */
      profileDetails: components['schemas']['ProfileDetailsResponse'][]
      /**
       * @description Whether this is the latest booking or not. Note that latest does not imply active.
       * @example true
       */
      latestBooking: boolean
      /**
       * Format: date-time
       * @description The start date of the booking
       * @example 2020-07-17T12:34:56
       */
      startDateTime: string
    }
    /** @description Profile details held against a prisoner */
    PrisonerProfileDetailsResponse: {
      /**
       * @description The prisoner's unique identifier
       * @example A1234AA
       */
      offenderNo: string
      /** @description A list of bookings and their profile details */
      bookings: components['schemas']['BookingProfileDetailsResponse'][]
    }
    /** @description Profile details recorded against a prisoner */
    ProfileDetailsResponse: {
      /**
       * @description The type of profile info
       * @example BUILD
       */
      type: string
      /**
       * @description The value of the profile info
       * @example SLIM
       */
      code?: string
      /**
       * Format: date-time
       * @description The time the profile info was created
       * @example 2020-07-17T12:34:56
       */
      createDateTime: string
      /**
       * @description The user who created the profile info
       * @example AQ425D
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The time the profile info was last changed
       * @example 2021-07-16T12:34:56
       */
      modifiedDateTime?: string
      /**
       * @description The user who modified the profile info
       * @example AQ425D
       */
      modifiedBy?: string
      /**
       * @description The name of the module that last changed the profile info, indicates if this was NOMIS or the synchronisation service
       * @example DPS_SYNCHRONISATION
       */
      auditModuleName?: string
    }
    /** @description Details of a prisoner merge */
    MergeDetail: {
      /**
       * @description The NOMIS reference of the record that was merged to and was then removed
       * @example A1234AA
       */
      deletedOffenderNo: string
      /**
       * Format: int64
       * @description The booking that was merged to and which then became active
       * @example 12345678
       */
      activeBookingId: number
      /**
       * @description The NOMIS reference of the record that was merged from and was retained
       * @example A1234AA
       */
      retainedOffenderNo: string
      /**
       * Format: int64
       * @description The booking that was merged from and was retained as inactive
       * @example 12345678
       */
      previousBookingId: number
      /**
       * Format: date-time
       * @description When the merge happened
       * @example 2021-01-01T12:34:56
       */
      requestDateTime: string
    }
    Actions: {
      openCSIPAlert: boolean
      nonAssociationsUpdated: boolean
      observationBook: boolean
      unitOrCellMove: boolean
      csraOrRsraReview: boolean
      serviceReferral: boolean
      simReferral: boolean
    }
    Attendee: {
      /**
       * Format: int64
       * @description Review Attendee/Contributor Id
       */
      id: number
      /** @description Name of attendee/contributor */
      name?: string
      /** @description Role of attendee/contributor */
      role?: string
      /** @description If attended (otherwise contributor) */
      attended: boolean
      /** @description Contribution */
      contribution?: string
      /**
       * Format: date-time
       * @description The date and time the attendee was created
       */
      createDateTime: string
      /** @description The username of the person who created the attendee */
      createdBy: string
      /**
       * Format: date-time
       * @description The date and time the attendee was last updated
       */
      lastModifiedDateTime?: string
      /** @description The username of the person who last updated the attendee */
      lastModifiedBy?: string
    }
    CSIPFactorResponse: {
      /**
       * Format: int64
       * @description Factor type id
       */
      id: number
      /** @description Contributory Factor */
      type: components['schemas']['CodeDescription']
      /** @description Factor comment */
      comment?: string
      /**
       * Format: date-time
       * @description The date and time the factor was created
       */
      createDateTime: string
      /** @description The username of the person who created the factor */
      createdBy: string
      /**
       * Format: date-time
       * @description The date and time the factor was last updated
       */
      lastModifiedDateTime?: string
      /** @description The username of the person who last updated the factor */
      lastModifiedBy?: string
    }
    /** @description CSIP Details */
    CSIPResponse: {
      /**
       * Format: int64
       * @description The csip id
       */
      id: number
      /** @description The offender */
      offender: components['schemas']['Offender']
      /**
       * Format: int64
       * @description The booking id associated with the CSIP
       */
      bookingId: number
      /** @description The original location when the CSIP was created */
      originalAgencyId?: string
      /** @description Log number */
      logNumber?: string
      /**
       * Format: date
       * @description Date/Time incident occurred
       */
      incidentDate: string
      /**
       * Format: partial-time
       * @description Date/Time incident occurred
       */
      incidentTime?: string
      /** @description Type of incident */
      type: components['schemas']['CodeDescription']
      /** @description Location of the incident */
      location: components['schemas']['CodeDescription']
      /** @description The Area of work, aka function */
      areaOfWork: components['schemas']['CodeDescription']
      /** @description The person reporting the incident - free text */
      reportedBy: string
      /**
       * Format: date
       * @description Date reported
       */
      reportedDate: string
      /** @description proActive Referral */
      proActiveReferral: boolean
      /** @description If a staff member was assaulted */
      staffAssaulted: boolean
      /** @description If assaulted, the staff member name */
      staffAssaultedName?: string
      /** @description Additional information for the CSIP Report */
      reportDetails: components['schemas']['ReportDetails']
      /** @description Safer custody screening */
      saferCustodyScreening: components['schemas']['SaferCustodyScreening']
      /** @description Investigation details of the incident */
      investigation: components['schemas']['InvestigationDetails']
      /** @description DecisionAndActions */
      decision: components['schemas']['Decision']
      /** @description Case Manager involved */
      caseManager?: string
      /** @description Reason for plan */
      planReason?: string
      /**
       * Format: date
       * @description Date of first review
       */
      firstCaseReviewDate?: string
      /** @description CSIP Plans */
      plans: components['schemas']['Plan'][]
      /** @description CSIP Reviews */
      reviews: components['schemas']['Review'][]
      /** @description Associated CSIP document Ids */
      documents?: components['schemas']['DocumentIdResponse'][]
      /**
       * Format: date-time
       * @description The date and time the report was created
       */
      createDateTime: string
      /** @description The username of the person who created the report */
      createdBy: string
      /**
       * Format: date-time
       * @description The date and time the report was last updated
       */
      lastModifiedDateTime?: string
      /** @description The username of the person who last updated the report */
      lastModifiedBy?: string
    }
    Decision: {
      /** @description Conclusion & Reason for decision */
      conclusion?: string
      /** @description Outcome */
      decisionOutcome?: components['schemas']['CodeDescription']
      /** @description Signed off by */
      signedOffRole?: components['schemas']['CodeDescription']
      /** @description The username of the person who recorded the decision */
      recordedBy?: string
      /** @description Real name of who recorded the decision */
      recordedByDisplayName?: string
      /**
       * Format: date
       * @description Recorded Date
       */
      recordedDate?: string
      /** @description What to do next */
      nextSteps?: string
      /** @description Other information to take into consideration */
      otherDetails?: string
      /** @description Action list */
      actions: components['schemas']['Actions']
    }
    /** @description Document id */
    DocumentIdResponse: {
      /**
       * Format: int64
       * @description The document id
       */
      documentId: number
    }
    InterviewDetails: {
      /**
       * Format: int64
       * @description Interview Id
       */
      id: number
      /** @description Person being interviewed */
      interviewee: string
      /**
       * Format: date
       * @description date of interview
       */
      date: string
      /** @description Why the incident occurred */
      role: components['schemas']['CodeDescription']
      /** @description Additional data regarding the interview */
      comments?: string
      /**
       * Format: date-time
       * @description The date and time the interview was created
       */
      createDateTime: string
      /** @description The username of the person who created the interview */
      createdBy: string
      /**
       * Format: date-time
       * @description The date and time the interview was last updated
       */
      lastModifiedDateTime?: string
      /** @description The username of the person who last updated the interview */
      lastModifiedBy?: string
    }
    InvestigationDetails: {
      /** @description Staff involved in the incident */
      staffInvolved?: string
      /** @description Whether any evidence was secured */
      evidenceSecured?: string
      /** @description Why the incident occurred */
      reasonOccurred?: string
      /** @description Normal behaviour of the offender */
      usualBehaviour?: string
      /** @description Offender's trigger */
      trigger?: string
      /** @description Protective factors */
      protectiveFactors?: string
      /** @description Interview */
      interviews?: components['schemas']['InterviewDetails'][]
    }
    Offender: {
      /** @description NOMIS id */
      offenderNo: string
      /** @description First name of offender */
      firstName: string
      /** @description Last name of offender */
      lastName: string
    }
    Plan: {
      /**
       * Format: int64
       * @description Plan Id
       */
      id: number
      /** @description Details of the need */
      identifiedNeed: string
      /** @description Intervention plan */
      intervention: string
      /** @description Information regarding progression of plan */
      progression?: string
      /** @description The person reporting - free text */
      referredBy?: string
      /**
       * Format: date
       * @description When created
       */
      createdDate: string
      /**
       * Format: date
       * @description Target date of plan
       */
      targetDate: string
      /**
       * Format: date
       * @description Plan closed date
       */
      closedDate?: string
      /**
       * Format: date-time
       * @description The date and time the plan was created
       */
      createDateTime: string
      /** @description The username of the person who created the plan */
      createdBy: string
      /**
       * Format: date-time
       * @description The date and time the plan was last updated
       */
      lastModifiedDateTime?: string
      /** @description The username of the person who last updated the plan */
      lastModifiedBy?: string
    }
    /** @description The list of CSIPs held against a prisoner */
    PrisonerCSIPsResponse: {
      offenderCSIPs: components['schemas']['CSIPResponse'][]
    }
    ReportDetails: {
      /**
       * Format: date
       * @description Date the offender is released
       */
      releaseDate?: string
      /** @description How the offender was involved */
      involvement?: components['schemas']['CodeDescription']
      /** @description Concern description */
      concern?: string
      /** @description Contributory factors */
      factors: components['schemas']['CSIPFactorResponse'][]
      /** @description known reasons for the involvement */
      knownReasons?: string
      /** @description Additional information */
      otherInformation?: string
      /** @description If the safer custody team were informed */
      saferCustodyTeamInformed: boolean
      /** @description If the referral has been completed */
      referralComplete: boolean
      /** @description Who completed the referral */
      referralCompletedBy?: string
      /** @description Real name of the person who completed the referral */
      referralCompletedByDisplayName?: string
      /**
       * Format: date
       * @description Date the referral was completed
       */
      referralCompletedDate?: string
    }
    Review: {
      /**
       * Format: int64
       * @description Review Id
       */
      id: number
      /**
       * Format: int32
       * @description Sequence number
       */
      reviewSequence: number
      /** @description Attendees to the review */
      attendees: components['schemas']['Attendee'][]
      /** @description Whether to remain on CSIP */
      remainOnCSIP: boolean
      /** @description If the csip has been updated */
      csipUpdated: boolean
      /** @description If a case note was added */
      caseNote: boolean
      /** @description If the csip is closed */
      closeCSIP: boolean
      /** @description Whether people were informed */
      peopleInformed: boolean
      /** @description Summary details */
      summary?: string
      /**
       * Format: date
       * @description Next Review date
       */
      nextReviewDate?: string
      /**
       * Format: date
       * @description Review closed date
       */
      closeDate?: string
      /**
       * Format: date
       * @description The date the review was created
       */
      recordedDate: string
      /** @description The username of the person who recorded the review */
      recordedBy: string
      /** @description Real name of who recorded the review */
      recordedByDisplayName?: string
      /**
       * Format: date-time
       * @description The date and time the review was created
       */
      createDateTime: string
      /** @description The username of the person who created the review */
      createdBy: string
      /**
       * Format: date-time
       * @description The date and time the review was last updated
       */
      lastModifiedDateTime?: string
      /** @description The username of the person who last updated the review */
      lastModifiedBy?: string
    }
    SaferCustodyScreening: {
      /** @description Result of the Safer Custody Screening */
      outcome?: components['schemas']['CodeDescription']
      /** @description The username of the person who recorded the data */
      recordedBy?: string
      /** @description Real name of who recorded the data */
      recordedByDisplayName?: string
      /**
       * Format: date
       * @description When the the SCS occurred
       */
      recordedDate?: string
      /** @description Why the decision was made */
      reasonForDecision?: string
    }
    /** @description The data held in NOMIS about a person's contact with a prisoner */
    ContactForPerson: {
      /**
       * Format: int64
       * @description Unique NOMIS Id of person associated with the prisoner
       */
      personId: number
      /**
       * @description Last name of the person
       * @example Smith
       */
      lastName: string
      /**
       * @description First name of the person
       * @example John
       */
      firstName: string
    }
    /** @description The data held in NOMIS about a person's restriction with a prisoner */
    ContactRestriction: {
      /**
       * Format: int64
       * @description Unique NOMIS Id of the restriction
       */
      id: number
      /** @description Restriction type */
      type: components['schemas']['CodeDescription']
      /** @description Free format comment text */
      comment?: string
      /**
       * Format: date
       * @description Date restriction became active
       */
      effectiveDate: string
      /**
       * Format: date
       * @description Date restriction is no longer active
       */
      expiryDate?: string
      /** @description Staff member who created the restriction */
      enteredStaff: components['schemas']['ContactRestrictionEnteredStaff']
      /** @description Audit data associated with the records */
      audit: components['schemas']['NomisAudit']
    }
    ContactRestrictionEnteredStaff: {
      /**
       * Format: int64
       * @description NOMIS staff id
       */
      staffId: number
      /** @description username for staff member. For staff with multiple accounts this will be the general account username. */
      username: string
    }
    /** @description The data held in NOMIS about a prisoner's contact with a person */
    PrisonerContact: {
      /**
       * Format: int64
       * @description Unique NOMIS sequence for the identifier for this contact
       */
      id: number
      /**
       * Format: int64
       * @description Unique NOMIS Id of booking associated with the contact
       */
      bookingId: number
      /**
       * Format: int64
       * @description Booking sequence this contact is related to. When 1 this indicates contact is for current term
       */
      bookingSequence: number
      /** @description The contact type */
      contactType: components['schemas']['CodeDescription']
      /** @description The relationship type */
      relationshipType: components['schemas']['CodeDescription']
      /** @description True if active */
      active: boolean
      /**
       * Format: date
       * @description Date contact is no longer active
       */
      expiryDate?: string
      /** @description True if approved to visit the prisoner */
      approvedVisitor: boolean
      /** @description True if next of kin to the prisoner */
      nextOfKin: boolean
      /** @description True if emergency contact for the prisoner */
      emergencyContact: boolean
      /** @description Free format comment text */
      comment?: string
      /** @description The person this prisoner is a contact for */
      person: components['schemas']['ContactForPerson']
      /** @description List of restrictions specifically between the prisoner and this contact */
      restrictions: components['schemas']['ContactRestriction'][]
      /** @description Audit data associated with the records */
      audit: components['schemas']['NomisAudit']
    }
    PrisonerWithContacts: {
      /** @description List of contacts for this prisoner */
      contacts: components['schemas']['PrisonerContact'][]
    }
    CaseNoteAmendment: {
      /** @description Free format text body of amendment */
      text: string
      /** @description Author login name of person or department that added the amendment */
      authorUsername: string
      /**
       * Format: int64
       * @description Author STAFF_ID
       */
      authorStaffId?: number
      /** @description Author first name */
      authorFirstName?: string
      /** @description Author last name */
      authorLastName?: string
      /**
       * Format: date-time
       * @description Amendment created timestamp
       */
      createdDateTime: string
      /**
       * @description Which system (Nomis or DPS) created the amendment
       * @example DPS
       * @enum {string}
       */
      sourceSystem: 'DPS' | 'NOMIS'
    }
    /** @description The data held in NOMIS about a case note associated with a prisoner */
    CaseNoteResponse: {
      /**
       * Format: int64
       * @description The primary key
       */
      caseNoteId: number
      /**
       * Format: int64
       * @description The prisoner's bookingId related to this case note
       */
      bookingId: number
      /** @description The case note type */
      caseNoteType: components['schemas']['CodeDescription']
      /** @description The case note subtype */
      caseNoteSubType: components['schemas']['CodeDescription']
      /**
       * @description Whether system-generated
       * @enum {string}
       */
      noteSourceCode?: 'AUTO' | 'EXT' | 'INST'
      /**
       * Format: date-time
       * @description Datetime case note occurred
       */
      occurrenceDateTime?: string
      /**
       * Format: date-time
       * @description Datetime case note was created by user
       */
      creationDateTime?: string
      /**
       * Format: int64
       * @description Author STAFF_ID
       */
      authorStaffId: number
      /** @description Author username or login name */
      authorUsername: string
      /** @description Author first name */
      authorFirstName?: string
      /** @description Author last name */
      authorLastName: string
      /** @description List of all usernames for authorStaffId */
      authorUsernames?: string[]
      /** @description Prison id */
      prisonId?: string
      /** @description Free format text body of case note */
      caseNoteText: string
      /** @description Amendments to the text */
      amendments: components['schemas']['CaseNoteAmendment'][]
      /**
       * Format: date-time
       * @description Created DB timestamp
       */
      createdDatetime: string
      /** @description Created DB username */
      createdUsername: string
      /**
       * @description Which screen (or DPS) created the case note
       * @example OIDABCDE
       */
      auditModuleName?: string
      /**
       * @description Which system (Nomis or DPS) created the case note
       * @example DPS
       * @enum {string}
       */
      sourceSystem: 'DPS' | 'NOMIS'
    }
    /** @description The list of case notes held against a booking */
    PrisonerCaseNotesResponse: {
      caseNotes: components['schemas']['CaseNoteResponse'][]
    }
    /** @description ID of previous booking */
    PreviousBookingId: {
      /**
       * Format: int64
       * @description The NOMIS booking ID
       * @example 1234567
       */
      bookingId: number
      /**
       * Format: int64
       * @description The NOMIS booking sequence
       * @example 3
       */
      bookingSequence: number
    }
    /** @description The list of unique alerts held against a prisoner */
    PrisonerAlertsResponse: {
      latestBookingAlerts: components['schemas']['AlertResponse'][]
    }
    PagePrisonerIds: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['PrisonerIds'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Prisoner identifiers */
    PrisonerIds: {
      /**
       * Format: int64
       * @description Latest booking id
       * @example 12345
       */
      bookingId: number
      /**
       * @description The NOMIS reference AKA prisoner number
       * @example A1234AA
       */
      offenderNo: string
    }
    PagePrisonerId: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['PrisonerId'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Prisoner identifier */
    PrisonerId: {
      /**
       * @description The NOMIS reference AKA prisoner number
       * @example A1234AA
       */
      offenderNo: string
    }
    PrisonerNosWithLast: {
      prisonerIds: components['schemas']['PrisonerId'][]
      /** Format: int64 */
      lastOffenderId: number
    }
    /** @description Key date adjustment */
    KeyDateAdjustmentResponse: {
      /**
       * Format: int64
       * @description The key date adjustment id
       */
      id: number
      /**
       * Format: int64
       * @description The booking id
       */
      bookingId: number
      /**
       * Format: int32
       * @description The booking sequence
       */
      bookingSequence: number
      /** @description Indicates whether for this booking the prisoner has been released */
      hasBeenReleased: boolean
      /** @description Current prison or OUT */
      prisonId: string
      /** @description The offender number, aka nomsId, prisonerId */
      offenderNo: string
      /** @description Adjustment type */
      adjustmentType: components['schemas']['SentencingAdjustmentType']
      /**
       * Format: date
       * @description Date adjustment is applied
       */
      adjustmentDate?: string
      /**
       * Format: date
       * @description Start of the period which contributed to the adjustment
       */
      adjustmentFromDate?: string
      /**
       * Format: date
       * @description End of the period which contributed to the adjustment
       */
      adjustmentToDate?: string
      /**
       * Format: int64
       * @description Number of days for the adjustment
       */
      adjustmentDays: number
      /** @description Comment */
      comment?: string
      /** @description Flag to indicate if the adjustment is being applied */
      active: boolean
    }
    /** @description Sentencing adjustment */
    SentencingAdjustmentsResponse: {
      keyDateAdjustments: components['schemas']['KeyDateAdjustmentResponse'][]
      sentenceAdjustments: components['schemas']['SentenceAdjustmentResponse'][]
    }
    /** @description ADA summary */
    ADASummary: {
      /**
       * Format: int64
       * @description Parent adjudication number that lead to this award
       */
      adjudicationNumber: number
      /**
       * Format: int32
       * @description Key to this sanction
       */
      sanctionSequence: number
      /**
       * Format: int32
       * @description Number of days awards
       */
      days: number
      /**
       * Format: date
       * @description Date of award
       */
      effectiveDate: string
      /** @description ADA status */
      sanctionStatus: components['schemas']['CodeDescription']
    }
    /** @description Summary of adjudication for a booking */
    AdjudicationADAAwardSummaryResponse: {
      /**
       * Format: int64
       * @description Booking id for the summary
       */
      bookingId: number
      /** @description Prisoner number related to booking */
      offenderNo: string
      /** @description List of ADAs awarded during this booking period */
      adaSummaries: components['schemas']['ADASummary'][]
    }
    /** @description The list of alerts held against a booking */
    BookingAlertsResponse: {
      alerts: components['schemas']['AlertResponse'][]
    }
    /** @description The data held in NOMIS about a person's contact with a prisoner */
    ContactForPrisoner: {
      /**
       * Format: int64
       * @description Unique NOMIS Id of booking associated with the prisoner
       */
      bookingId: number
      /**
       * Format: int64
       * @description Booking sequence this contact is related to. WHen 1 this indicates contact is for current term
       */
      bookingSequence: number
      /**
       * @description Offender no aka prisoner number
       * @example A1234AA
       */
      offenderNo: string
      /**
       * @description Last name of the prisoner
       * @example Smith
       */
      lastName: string
      /**
       * @description First name of the prisoner
       * @example John
       */
      firstName: string
    }
    /** @description The data held in NOMIS about a person who is a contact for a prisoner */
    ContactPerson: {
      /**
       * Format: int64
       * @description The person id
       */
      personId: number
      /** @description First name of the person */
      firstName: string
      /** @description Surname name of the person */
      lastName: string
      /** @description Middle name of the person */
      middleName?: string
      /**
       * Format: date
       * @description Date of birth of the person
       */
      dateOfBirth?: string
      /** @description Gender of the person */
      gender?: components['schemas']['CodeDescription']
      /** @description Title of the person */
      title?: components['schemas']['CodeDescription']
      /** @description Language of the person */
      language?: components['schemas']['CodeDescription']
      /** @description True if the person requires an interpreter */
      interpreterRequired: boolean
      /** @description Domestic aka marital status of the person */
      domesticStatus?: components['schemas']['CodeDescription']
      /**
       * Format: date
       * @description Date the person dies
       */
      deceasedDate?: string
      /** @description True if a staff member */
      isStaff?: boolean
      /** @description Set to true when person created via finance remitter page */
      isRemitter?: boolean
      /** @description Audit data associated with the records */
      audit: components['schemas']['NomisAudit']
      /** @description List of phone numbers for the person */
      phoneNumbers: components['schemas']['PersonPhoneNumber'][]
      /** @description List of addresses for the person */
      addresses: components['schemas']['PersonAddress'][]
      /** @description List of email addresses for the person */
      emailAddresses: components['schemas']['PersonEmailAddress'][]
      /** @description List of employments for the person */
      employments: components['schemas']['PersonEmployment'][]
      /** @description List of identifiers for the person */
      identifiers: components['schemas']['PersonIdentifier'][]
      /** @description List of prisoner contacts this person is related to */
      contacts: components['schemas']['PersonContact'][]
      /** @description List of restrictions between all prisoners and this person */
      restrictions: components['schemas']['ContactRestriction'][]
    }
    /** @description The data held in NOMIS about a address number */
    PersonAddress: {
      /**
       * Format: int64
       * @description Unique NOMIS Id of number
       */
      addressId: number
      /** @description Address type */
      type?: components['schemas']['CodeDescription']
      /**
       * @description Flat name or number
       * @example Apartment 3
       */
      flat?: string
      /**
       * @description Premise
       * @example 22
       */
      premise?: string
      /**
       * @description Street
       * @example West Street
       */
      street?: string
      /**
       * @description Locality
       * @example Keighley
       */
      locality?: string
      /**
       * @description Post code
       * @example MK15 2ST
       */
      postcode?: string
      /** @description City */
      city?: components['schemas']['CodeDescription']
      /** @description County */
      county?: components['schemas']['CodeDescription']
      /** @description Country */
      country?: components['schemas']['CodeDescription']
      /** @description List of phone numbers for the address */
      phoneNumbers: components['schemas']['PersonPhoneNumber'][]
      /** @description true if address validated by Post Office Address file?? */
      validatedPAF: boolean
      /** @description true if address not fixed. for example homeless */
      noFixedAddress?: boolean
      /** @description true if this is the person's primary address */
      primaryAddress: boolean
      /** @description true if this is used for mail */
      mailAddress: boolean
      /** @description Free format comment about the address */
      comment?: string
      /**
       * Format: date
       * @description Date address was valid from
       */
      startDate?: string
      /**
       * Format: date
       * @description Date address was valid to
       */
      endDate?: string
      /** @description Audit data associated with the records */
      audit: components['schemas']['NomisAudit']
    }
    /** @description The data held in NOMIS about a person's contact with a prisoner */
    PersonContact: {
      /**
       * Format: int64
       * @description Unique NOMIS sequence for the identifier for this contact
       */
      id: number
      /** @description The contact type */
      contactType: components['schemas']['CodeDescription']
      /** @description The relationship type */
      relationshipType: components['schemas']['CodeDescription']
      /** @description True if active */
      active: boolean
      /**
       * Format: date
       * @description Date contact is no longer active
       */
      expiryDate?: string
      /** @description True if approved to visit the prisoner */
      approvedVisitor: boolean
      /** @description True if next of kin to the prisoner */
      nextOfKin: boolean
      /** @description True if emergency contact for the prisoner */
      emergencyContact: boolean
      /** @description Free format comment text */
      comment?: string
      /** @description The prisoner this person is a contact for */
      prisoner: components['schemas']['ContactForPrisoner']
      /** @description List of restrictions specifically between the prisoner and this contact */
      restrictions: components['schemas']['ContactRestriction'][]
      /** @description Audit data associated with the records */
      audit: components['schemas']['NomisAudit']
    }
    /** @description The data held in NOMIS about a email address */
    PersonEmailAddress: {
      /**
       * Format: int64
       * @description Unique NOMIS Id of email address
       */
      emailAddressId: number
      /**
       * @description The email address
       * @example john.smith@internet.co.uk
       */
      email: string
      /** @description Audit data associated with the records */
      audit: components['schemas']['NomisAudit']
    }
    /** @description The data held in NOMIS about a person's employment */
    PersonEmployment: {
      /**
       * Format: int64
       * @description Unique NOMIS sequence for this employment for this person
       */
      sequence: number
      /** @description The entity the person is employed by */
      corporate: components['schemas']['PersonEmploymentCorporate']
      /** @description True is employment is active */
      active: boolean
      /** @description Audit data associated with the records */
      audit: components['schemas']['NomisAudit']
    }
    /** @description The data held in NOMIS about a corporate entity */
    PersonEmploymentCorporate: {
      /**
       * Format: int64
       * @description Unique NOMIS Id of corporate address
       */
      id: number
      /**
       * @description The corporate name
       * @example Police
       */
      name: string
    }
    /** @description The data held in NOMIS about a person's identifiers */
    PersonIdentifier: {
      /**
       * Format: int64
       * @description Unique NOMIS sequence for this identifier for this person
       */
      sequence: number
      /** @description The identifier type */
      type: components['schemas']['CodeDescription']
      /**
       * @description The identifier value
       * @example NE121212T
       */
      identifier: string
      /**
       * @description The issued authority
       * @example Police
       */
      issuedAuthority?: string
      /** @description Audit data associated with the records */
      audit: components['schemas']['NomisAudit']
    }
    /** @description The data held in NOMIS about a phone number */
    PersonPhoneNumber: {
      /**
       * Format: int64
       * @description Unique NOMIS Id of number
       */
      phoneId: number
      /** @description The number */
      number: string
      /** @description Extension */
      extension?: string
      /** @description Phone type */
      type: components['schemas']['CodeDescription']
      /** @description Audit data associated with the records */
      audit: components['schemas']['NomisAudit']
    }
    PagePersonIdResponse: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['PersonIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    PersonIdResponse: {
      /**
       * Format: int64
       * @description The person Id
       */
      personId: number
    }
    /** @description Appointment information */
    NonAssociationResponse: {
      /**
       * @description Noms id of the prisoner
       * @example A1234DF
       */
      offenderNo: string
      /**
       * @description Noms id of the other prisoner
       * @example A1234EG
       */
      nsOffenderNo: string
      /**
       * Format: int32
       * @description Sequence number
       * @example 1
       */
      typeSequence: number
      /**
       * @description Reason code of the first prisoner, domain NON_ASSO_RSN
       * @example VIC
       */
      reason: string
      /**
       * @description Reason code of the other prisoner, domain NON_ASSO_RSN
       * @example PER
       */
      recipReason: string
      /**
       * @description Type code, domain NON_ASSO_TYP
       * @example WING
       */
      type: string
      /**
       * @description Free text name of staff member
       * @example Joe Bloggs
       */
      authorisedBy?: string
      /**
       * @description Last updated by
       * @example JSMITH_GEN
       */
      updatedBy: string
      /**
       * Format: date
       * @description Effective date
       * @example 2022-08-12
       */
      effectiveDate: string
      /**
       * Format: date
       * @description Expiry date, open if null
       * @example 2022-08-12
       */
      expiryDate?: string
      /**
       * @description Comment
       * @example Some comment
       */
      comment?: string
    }
    /** @description Non association id */
    NonAssociationIdResponse: {
      /** @description The 1st offender */
      offenderNo1: string
      /** @description The 2nd offender */
      offenderNo2: string
    }
    PageNonAssociationIdResponse: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['NonAssociationIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    AmendmentResponse: {
      /**
       * Format: date-time
       * @description Amended timestamp
       * @example 2024-12-31T23:59:59
       */
      amendDateTime: string
      /**
       * @description Which value was changed
       * @example Sequence
       */
      columnName?: string
      /** @description Original value */
      oldValue?: string
      /** @description New value */
      newValue?: string
      /**
       * @description Username of the person who made the change
       * @example NQP44X
       */
      amendedBy: string
    }
    /** @description Location request returned data */
    LocationResponse: {
      /**
       * Format: int64
       * @description The location id
       * @example 1234567
       */
      locationId: number
      /**
       * @description Whether certified for use
       * @default false
       * @example true
       */
      certified: boolean
      /**
       * @description Whether a CELL, VISIT room, Kitchen etc (Ref type ILOC_TYPE)
       * @example LAND
       */
      locationType: string
      /**
       * @description Prison code of the location
       * @example LEI
       */
      prisonId: string
      /**
       * Format: int64
       * @description The containing location id
       * @example 1234567
       */
      parentLocationId?: number
      /**
       * @description The containing location id's key (Nomis description field)
       * @example WWI-B-2
       */
      parentKey?: string
      /**
       * Format: int32
       * @description Max capacity subject to resources
       * @example 43
       */
      operationalCapacity?: number
      /**
       * Format: int32
       * @description Certified Normal Accommodation capacity
       * @example 44
       */
      cnaCapacity?: number
      /**
       * @description Description of location
       * @example Some description
       */
      userDescription?: string
      /**
       * @description Constructed full code of location
       * @example WWI-B-2-004
       */
      description: string
      /** @description Usually a number for a cell, a letter for a wing or landing. Used to calculate description */
      locationCode: string
      /**
       * Format: int32
       * @description Physical maximum capacity
       * @example 45
       */
      capacity?: number
      /**
       * Format: int32
       * @description Defines the order within parent location
       * @example Joe Bloggs
       */
      listSequence?: number
      /**
       * @description Comment
       * @example Some comment
       */
      comment?: string
      /**
       * @description Housing unit type
       * @example NA
       * @enum {string}
       */
      unitType?: 'HC' | 'HOLC' | 'NA' | 'OU' | 'REC' | 'SEG' | 'SPLC'
      /**
       * @description Whether the location is active or has been deactivated
       * @example true
       */
      active: boolean
      /**
       * Format: date
       * @description The deactivation date, defaults to today
       * @example 2024-12-31
       */
      deactivateDate?: string
      /**
       * @description The reason code for deactivation, reference data 'LIV_UN_RSN'
       * @enum {string}
       */
      reasonCode?: 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L'
      /**
       * Format: date
       * @description The expected reactivation date if any
       * @example 2024-12-31
       */
      reactivateDate?: string
      /** @description Profiles */
      profiles?: components['schemas']['ProfileRequest'][]
      /** @description Usages */
      usages?: components['schemas']['UsageRequest'][]
      /** @description History */
      amendments?: components['schemas']['AmendmentResponse'][]
      /**
       * Format: date-time
       * @description Record created date
       */
      createDatetime: string
      /** @description Record created by */
      createUsername: string
      /** @description Record modified by */
      modifyUsername?: string
    }
    PageLocationIdResponse: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['LocationIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    History: {
      /**
       * Format: int64
       * @description The history questionnaire id for the incident
       */
      questionnaireId: number
      /** @description The questionnaire type */
      type: string
      /** @description The questionnaire description */
      description?: string
      /** @description Questions asked for the questionnaire */
      questions: components['schemas']['HistoryQuestion'][]
      /**
       * Format: date-time
       * @description When the questionnaire was changed
       */
      incidentChangeDateTime: string
      /** @description Who changed the questionnaire */
      incidentChangeStaff: components['schemas']['Staff']
      /**
       * Format: date-time
       * @description The date and time the historical incident questionnaire was created
       */
      createDateTime: string
      /** @description The username of the person who created the historical incident questionnaire */
      createdBy: string
    }
    HistoryQuestion: {
      /**
       * Format: int64
       * @description The sequence number of the response question for this incident
       */
      questionId: number
      /**
       * Format: int32
       * @description The sequence number of the question for this incident
       */
      sequence: number
      /** @description The Question being asked */
      question: string
      /** @description Historical list of Responses to this question */
      answers: components['schemas']['HistoryResponse'][]
    }
    HistoryResponse: {
      /**
       * Format: int64
       * @description The id of the questionnaire question answer
       */
      questionResponseId?: number
      /**
       * Format: int32
       * @description The sequence number of the response for this incident
       */
      responseSequence: number
      /** @description The answer text */
      answer?: string
      /** @description Comment added to the response by recording staff */
      comment?: string
      /**
       * Format: date
       * @description Response date added to the response by recording staff
       */
      responseDate?: string
      /** @description Recording staff */
      recordingStaff: components['schemas']['Staff']
    }
    /** @description Incident Details */
    IncidentResponse: {
      /**
       * Format: int64
       * @description The incident id
       */
      incidentId: number
      /**
       * Format: int64
       * @description The id of the questionnaire associated with this incident
       */
      questionnaireId: number
      /** @description A summary of the incident */
      title?: string
      /** @description The incident details */
      description?: string
      /** @description Agency where the incident occurred */
      agency: components['schemas']['CodeDescription']
      /** @description Status details */
      status: components['schemas']['IncidentStatus']
      /** @description The incident questionnaire type */
      type: string
      /** @description If the response is locked ie if the response is completed */
      lockedResponse: boolean
      /**
       * Format: date-time
       * @description The date and time of the incident
       */
      incidentDateTime: string
      /**
       * Format: date-time
       * @description The date and time the incident was created
       */
      createDateTime: string
      /** @description The username of the person who created the incident */
      createdBy: string
      /**
       * Format: date-time
       * @description The date and time the incident was last updated
       */
      lastModifiedDateTime?: string
      /** @description The username of the person who last updated the incident */
      lastModifiedBy?: string
      /**
       * Format: date
       * @description The follow up date for the incident
       */
      followUpDate?: string
      /** @description The staff member who reported the incident */
      reportingStaff: components['schemas']['Staff']
      /**
       * Format: date-time
       * @description The date and time the incident was reported
       */
      reportedDateTime: string
      /** @description Staff involved in the incident */
      staffParties: components['schemas']['StaffParty'][]
      /** @description Offenders involved in the incident */
      offenderParties: components['schemas']['OffenderParty'][]
      /** @description Requirements for completing the incident report */
      requirements: components['schemas']['Requirement'][]
      /** @description Questions asked for the incident */
      questions: components['schemas']['Question'][]
      /** @description Historical questionnaire details for the incident */
      history: components['schemas']['History'][]
    }
    IncidentStatus: {
      code: string
      description: string
      /** Format: int32 */
      listSequence?: number
      standardUser: boolean
      enhancedUser: boolean
    }
    OffenderParty: {
      /** @description Offender involved in the incident */
      offender: components['schemas']['Offender']
      /**
       * Format: int32
       * @description The sequence number of the offender party for this incident
       */
      sequence: number
      /** @description Offender role in the incident */
      role: components['schemas']['CodeDescription']
      /** @description The outcome of the incident */
      outcome?: components['schemas']['CodeDescription']
      /** @description General information about the incident */
      comment?: string
      /**
       * Format: date-time
       * @description The date and time the offender party was created
       */
      createDateTime: string
      /** @description The username of the person who created the offender party */
      createdBy: string
      /**
       * Format: date-time
       * @description The date and time the offender party was last updated
       */
      lastModifiedDateTime?: string
      /** @description The username of the person who last updated the offender party */
      lastModifiedBy?: string
    }
    Question: {
      /**
       * Format: int64
       * @description The questionnaire question id
       */
      questionId: number
      /**
       * Format: int32
       * @description The sequence number of the question for this incident
       */
      sequence: number
      /** @description The Question being asked */
      question: string
      /** @description List of Responses to this question */
      answers: components['schemas']['Response'][]
      /**
       * Format: date-time
       * @description The date and time the question was created
       */
      createDateTime: string
      /** @description The username of the person who created the question */
      createdBy: string
    }
    Requirement: {
      /** @description The update required to the incident report */
      comment?: string
      /**
       * Format: int32
       * @description The sequence number of the requirement for this incident
       */
      sequence: number
      /**
       * Format: date
       * @description Date the requirement was recorded
       */
      date: string
      /** @description The staff member who made the requirement request */
      staff: components['schemas']['Staff']
      /** @description The reporting agency of the staff */
      agencyId: string
      /**
       * Format: date-time
       * @description The date and time the requirement was created
       */
      createDateTime: string
      /** @description The username of the person who created the requirement */
      createdBy: string
      /**
       * Format: date-time
       * @description The date and time the requirement was last updated
       */
      lastModifiedDateTime?: string
      /** @description The username of the person who last updated the requirement */
      lastModifiedBy?: string
    }
    Response: {
      /**
       * Format: int64
       * @description The id of the questionnaire question answer
       */
      questionResponseId?: number
      /**
       * Format: int32
       * @description The sequence number of the response for this incident
       */
      sequence: number
      /** @description The answer text */
      answer?: string
      /** @description Comment added to the response by recording staff */
      comment?: string
      /**
       * Format: date
       * @description Response date added to the response by recording staff
       */
      responseDate?: string
      /** @description Recording staff */
      recordingStaff: components['schemas']['Staff']
      /**
       * Format: date-time
       * @description The date and time the response was created
       */
      createDateTime: string
      /** @description The username of the person who created the response */
      createdBy: string
      /**
       * Format: date-time
       * @description The date and time the response was last updated
       */
      lastModifiedDateTime?: string
      /** @description The username of the person who last updated the response */
      lastModifiedBy?: string
    }
    StaffParty: {
      /** @description Staff involved in the incident */
      staff: components['schemas']['Staff']
      /**
       * Format: int32
       * @description The sequence number of the staff party for this incident
       */
      sequence: number
      /** @description Staff role in the incident */
      role: components['schemas']['CodeDescription']
      /** @description General information about the incident */
      comment?: string
      /**
       * Format: date-time
       * @description The date and time the staff party was created
       */
      createDateTime: string
      /** @description The username of the person who created the staff party */
      createdBy: string
      /**
       * Format: date-time
       * @description The date and time the staff party was last updated
       */
      lastModifiedDateTime?: string
      /** @description The username of the person who last updated the staff party */
      lastModifiedBy?: string
    }
    /** @description Incident id */
    IncidentIdResponse: {
      /**
       * Format: int64
       * @description The incident id
       */
      incidentId: number
    }
    PageIncidentIdResponse: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['IncidentIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description A count for incidents at an agency */
    IncidentsCount: {
      /**
       * Format: int64
       * @description A count for the number of open incidents i.e. all incidents that are not closed or duplicates
       * @example 4
       */
      openIncidents: number
      /**
       * Format: int64
       * @description A count for the number of closed or duplicate incidents
       * @example 2
       */
      closedIncidents: number
    }
    /** @description Incidents reconciliation count response */
    IncidentsReconciliationResponse: {
      /**
       * @description The agency we checked the incidents for
       * @example BXI
       */
      agencyId: string
      /** @description All open and closed incidents counts */
      incidentCount: components['schemas']['IncidentsCount']
    }
    /** @description Incident Agency Id */
    IncidentAgencyId: {
      /**
       * @description The agency id
       * @example BXI
       */
      agencyId: string
    }
    /** @description Incentive id */
    IncentiveIdResponse: {
      /**
       * Format: int64
       * @description The booking id
       */
      bookingId: number
      /**
       * Format: int64
       * @description The sequence of the incentive within this booking
       */
      sequence: number
    }
    PageIncentiveIdResponse: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['IncentiveIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Incentive information */
    IncentiveResponse: {
      /** @description The offender number, aka nomsId, prisonerId */
      offenderNo: string
      /**
       * Format: int64
       * @description The booking id
       */
      bookingId: number
      /**
       * Format: int64
       * @description The sequence of the incentive within this booking
       */
      incentiveSequence: number
      /** @description Comment for Incentive level */
      commentText?: string
      /**
       * Format: date-time
       * @description Date and time of Incentive level creation
       */
      iepDateTime: string
      /** @description Prison where the Incentive level was created */
      prisonId: string
      /** @description IEP level code and description */
      iepLevel: components['schemas']['CodeDescription']
      /** @description User id of user creating prisoner incentive level */
      userId?: string
      /** @description Is this IEP the current IEP for the booking? */
      currentIep: boolean
      /**
       * @description The NOMIS module that created this IEP
       * @enum {string}
       */
      auditModule: 'OCUWARNG' | 'PRISON_API' | 'OIDADMIS' | 'MERGE' | 'OIDOIEPS' | 'OIDITRAN' | 'OSIOSEAR'
      /**
       * Format: date-time
       * @description date and time of creation
       */
      whenCreated: string
      /**
       * Format: date-time
       * @description date and time of last update
       */
      whenUpdated?: string
    }
    /** @description CSIP id */
    CSIPIdResponse: {
      /**
       * Format: int64
       * @description The csip id
       */
      csipId: number
    }
    PageCSIPIdResponse: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['CSIPIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description court case id */
    CourtCaseIdResponse: {
      /**
       * Format: int64
       * @description Court case Id
       */
      caseId: number
    }
    PageCourtCaseIdResponse: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['CourtCaseIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description The data held in NOMIS about an address */
    CorporateAddress: {
      /**
       * Format: int64
       * @description Unique NOMIS Id of number
       */
      id: number
      /** @description Address type */
      type?: components['schemas']['CodeDescription']
      /**
       * @description Flat name or number
       * @example Apartment 3
       */
      flat?: string
      /**
       * @description Premise
       * @example 22
       */
      premise?: string
      /**
       * @description Street
       * @example West Street
       */
      street?: string
      /**
       * @description Locality
       * @example Keighley
       */
      locality?: string
      /**
       * @description Post code
       * @example MK15 2ST
       */
      postcode?: string
      /** @description City */
      city?: components['schemas']['CodeDescription']
      /** @description County */
      county?: components['schemas']['CodeDescription']
      /** @description Country */
      country?: components['schemas']['CodeDescription']
      /** @description List of phone numbers for the address */
      phoneNumbers: components['schemas']['CorporatePhoneNumber'][]
      /** @description true if address validated by Post Office Address file?? */
      validatedPAF: boolean
      /** @description true if address not fixed. for example homeless */
      noFixedAddress?: boolean
      /** @description true if this is the corporate's primary address */
      primaryAddress: boolean
      /** @description true if this is used for mail */
      mailAddress: boolean
      /** @description Free format comment about the address */
      comment?: string
      /**
       * Format: date
       * @description Date address was valid from
       */
      startDate?: string
      /**
       * Format: date
       * @description Date address was valid to
       */
      endDate?: string
      /** @description True if this is a service organisation */
      isServices: boolean
      /** @description Business hours */
      businessHours?: string
      /** @description Contact person */
      contactPersonName?: string
      /** @description Audit data associated with the records */
      audit: components['schemas']['NomisAudit']
    }
    /** @description The data held in NOMIS about a internet address */
    CorporateInternetAddress: {
      /**
       * Format: int64
       * @description Unique NOMIS Id of internet address
       */
      id: number
      /**
       * @description The internet address
       * @example john.smith@internet.co.uk
       */
      internetAddress: string
      /** @description Type of address */
      type: string
      /** @description Audit data associated with the records */
      audit: components['schemas']['NomisAudit']
    }
    /** @description The data held in NOMIS about a corporate entity */
    CorporateOrganisation: {
      /**
       * Format: int64
       * @description Unique NOMIS Id of corporate
       */
      id: number
      /**
       * @description The corporate name
       * @example Boots
       */
      name: string
      /** @description The associated caseload e.g COOKHAM WOOD (HMP) */
      caseload?: components['schemas']['CodeDescription']
      /** @description User comment */
      comment?: string
      /** @description Programme number */
      programmeNumber?: string
      /** @description VAT number */
      vatNumber?: string
      /** @description Is active */
      active: boolean
      /**
       * Format: date
       * @description Date made inactive
       */
      expiryDate?: string
      /** @description List of types this organisation is associated with, for instance ACCOM - Accommodation Provider */
      types: components['schemas']['CorporateOrganisationType'][]
      /** @description List of phone numbers for the corporate */
      phoneNumbers: components['schemas']['CorporatePhoneNumber'][]
      /** @description List of addresses for the corporate */
      addresses: components['schemas']['CorporateAddress'][]
      /** @description List of internet addresses for the corporate */
      internetAddresses: components['schemas']['CorporateInternetAddress'][]
      /** @description Audit data associated with the records */
      audit: components['schemas']['NomisAudit']
    }
    /** @description The data held in NOMIS about a corporate entity */
    CorporateOrganisationType: {
      /** @description The type of corporate, for instance ACCOM - Accommodation Provider  */
      type: components['schemas']['CodeDescription']
      /** @description Audit data associated with the records */
      audit: components['schemas']['NomisAudit']
    }
    /** @description The data held in NOMIS about a phone number */
    CorporatePhoneNumber: {
      /**
       * Format: int64
       * @description Unique NOMIS Id of number
       */
      id: number
      /** @description The number */
      number: string
      /** @description Extension */
      extension?: string
      /** @description Phone type */
      type: components['schemas']['CodeDescription']
      /** @description Audit data associated with the records */
      audit: components['schemas']['NomisAudit']
    }
    CorporateOrganisationIdResponse: {
      /**
       * Format: int64
       * @description The corporate Id
       */
      corporateId: number
    }
    PageCorporateOrganisationIdResponse: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['CorporateOrganisationIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description The data held in NOMIS for an offender. */
    CoreOffender: {
      /**
       * Format: int64
       * @description The offender id
       */
      offenderId: number
      /** @description Title of this offender record */
      title?: components['schemas']['CodeDescription']
      /** @description First name of this offender record */
      firstName: string
      /** @description Middle name of this offender record */
      middleName1?: string
      /** @description Second middle name of this offender record */
      middleName2?: string
      /** @description Surname name of this offender record */
      lastName: string
      /**
       * Format: date
       * @description Date of birth of this offender record
       */
      dateOfBirth?: string
      /** @description Birth place of this offender record */
      birthPlace?: string
      /** @description Birth country of this offender record */
      birthCountry?: components['schemas']['CodeDescription']
      /** @description Race of this offender record */
      ethnicity?: components['schemas']['CodeDescription']
      /** @description Sex of this offender record */
      sex?: components['schemas']['CodeDescription']
      /** @description Name type of this offender record */
      nameType?: components['schemas']['CodeDescription']
      /**
       * Format: date
       * @description Date this offender record was created. This is separate from the CREATE_DATETIME audit column.
       */
      createDate?: string
      /** @description The offender record associated with the current booking */
      workingName: boolean
      /** @description List of identifiers for the offender */
      identifiers: components['schemas']['Identifier'][]
    }
    /** @description The data held in NOMIS for an offender */
    CorePerson: {
      /** @description The prison number */
      prisonNumber: string
      /**
       * @description In/Out Status
       * @example IN, OUT, TRN
       */
      inOutStatus?: string
      /** @description Indicates that the person is currently in prison */
      activeFlag: boolean
      /** @description List of offender records for the person */
      offenders?: components['schemas']['CoreOffender'][]
      /** @description List of distinct sentence start dates */
      sentenceStartDates?: string[]
      /** @description List of addresses for the person */
      addresses?: components['schemas']['OffenderAddress'][]
      /** @description List of phone numbers for the person */
      phoneNumbers?: components['schemas']['OffenderPhoneNumber'][]
      /** @description List of email addresses for the person */
      emailAddresses?: components['schemas']['OffenderEmailAddress'][]
      /** @description List of nationalities for the person */
      nationalities?: components['schemas']['OffenderNationality'][]
      /** @description List of nationality details for the person */
      nationalityDetails?: components['schemas']['OffenderNationalityDetails'][]
      /** @description List of sexual orientations for the person */
      sexualOrientations?: components['schemas']['OffenderSexualOrientation'][]
      /** @description List of disabilities for the person */
      disabilities?: components['schemas']['OffenderDisability'][]
      /** @description List of disabilities for the person */
      interestsToImmigration?: components['schemas']['OffenderInterestToImmigration'][]
      /** @description Current belief and history of all beliefs for the person */
      beliefs?: components['schemas']['OffenderBelief'][]
    }
    /** @description The data held in NOMIS for an offender's identifiers */
    Identifier: {
      /**
       * Format: int64
       * @description Unique NOMIS sequence for this identifier for this person
       */
      sequence: number
      /** @description The identifier type */
      type: components['schemas']['CodeDescription']
      /**
       * @description The identifier value
       * @example NE121212T
       */
      identifier: string
      /**
       * @description The issued authority
       * @example Police
       */
      issuedAuthority?: string
      /**
       * Format: date
       * @description The issued date
       */
      issuedDate?: string
      /** @description Verified */
      verified: boolean
    }
    /** @description The data held in NOMIS about a address number */
    OffenderAddress: {
      /**
       * Format: int64
       * @description Unique NOMIS Id of number
       */
      addressId: number
      /**
       * @description Flat name or number
       * @example Apartment 3
       */
      flat?: string
      /**
       * @description Premise
       * @example 22
       */
      premise?: string
      /**
       * @description Street
       * @example West Street
       */
      street?: string
      /**
       * @description Locality
       * @example Keighley
       */
      locality?: string
      /**
       * @description Post code
       * @example MK15 2ST
       */
      postcode?: string
      /** @description City */
      city?: components['schemas']['CodeDescription']
      /** @description County */
      county?: components['schemas']['CodeDescription']
      /** @description Country */
      country?: components['schemas']['CodeDescription']
      /** @description List of phone numbers for the address */
      phoneNumbers?: components['schemas']['OffenderPhoneNumber'][]
      /** @description true if address validated by Post Office Address file?? */
      validatedPAF: boolean
      /** @description true if address not fixed. for example homeless */
      noFixedAddress?: boolean
      /** @description true if this is the person's primary address */
      primaryAddress: boolean
      /** @description true if this is used for mail */
      mailAddress: boolean
      /** @description Free format comment about the address */
      comment?: string
      /**
       * Format: date
       * @description Date address was valid from
       */
      startDate?: string
      /**
       * Format: date
       * @description Date address was valid to
       */
      endDate?: string
      /** @description Usages for the address, also known as types */
      usages?: components['schemas']['OffenderAddressUsage'][]
    }
    /** @description Offender address usage */
    OffenderAddressUsage: {
      /**
       * Format: int64
       * @description Offender belief id
       * @example 1123456
       */
      addressId: number
      /** @description Address usage */
      usage: components['schemas']['CodeDescription']
      /** @description Whether the address usage is active */
      active: boolean
    }
    /** @description Offender beliefs */
    OffenderBelief: {
      /**
       * Format: int64
       * @description Offender belief id
       * @example 1123456
       */
      beliefId: number
      /**
       * @description Belief
       * @example SCIE
       */
      belief: components['schemas']['CodeDescription']
      /**
       * Format: date
       * @description Date the belief started
       * @example 2024-01-01
       */
      startDate: string
      /**
       * Format: date
       * @description Date the belief ended
       * @example 2024-12-12
       */
      endDate?: string
      /** @description Was a reason given for change of belief? */
      changeReason?: boolean
      /** @description Comments describing reason for change of belief */
      comments?: string
      /** @description Verified flag */
      verified: boolean
      /** @description Audit data associated with the records */
      audit: components['schemas']['NomisAudit']
    }
    /** @description Disability details held against a booking */
    OffenderDisability: {
      /**
       * Format: int64
       * @description The booking's unique identifier
       * @example 1234567
       */
      bookingId: number
      /** @description The value of the profile info */
      disability: boolean
      /**
       * Format: date-time
       * @description The start date of the booking
       * @example 2020-07-17T12:34:56
       */
      startDateTime: string
      /**
       * Format: date-time
       * @description The end date of the booking, or null if the booking is still active
       * @example 2021-07-16T12:34:56
       */
      endDateTime?: string
      /**
       * @description Whether this is the latest booking or not. Note that latest does not imply active.
       * @example true
       */
      latestBooking: boolean
    }
    /** @description The data held in NOMIS about a email address */
    OffenderEmailAddress: {
      /**
       * Format: int64
       * @description Unique NOMIS Id of email address
       */
      emailAddressId: number
      /**
       * @description The email address
       * @example john.smith@internet.co.uk
       */
      email: string
    }
    /** @description Interest to immigration details held against a booking */
    OffenderInterestToImmigration: {
      /**
       * Format: int64
       * @description The booking's unique identifier
       * @example 1234567
       */
      bookingId: number
      /** @description The value of the profile info */
      interestToImmigration: boolean
      /**
       * Format: date-time
       * @description The start date of the booking
       * @example 2020-07-17T12:34:56
       */
      startDateTime: string
      /**
       * Format: date-time
       * @description The end date of the booking, or null if the booking is still active
       * @example 2021-07-16T12:34:56
       */
      endDateTime?: string
      /**
       * @description Whether this is the latest booking or not. Note that latest does not imply active.
       * @example true
       */
      latestBooking: boolean
    }
    /** @description Nationality details held against a booking */
    OffenderNationality: {
      /**
       * Format: int64
       * @description The booking's unique identifier
       * @example 1234567
       */
      bookingId: number
      /** @description The value of the profile info */
      nationality: components['schemas']['CodeDescription']
      /**
       * Format: date-time
       * @description The start date of the booking
       * @example 2020-07-17T12:34:56
       */
      startDateTime: string
      /**
       * Format: date-time
       * @description The end date of the booking, or null if the booking is still active
       * @example 2021-07-16T12:34:56
       */
      endDateTime?: string
      /**
       * @description Whether this is the latest booking or not. Note that latest does not imply active.
       * @example true
       */
      latestBooking: boolean
    }
    /** @description Further nationality details held against a booking */
    OffenderNationalityDetails: {
      /**
       * Format: int64
       * @description The booking's unique identifier
       * @example 1234567
       */
      bookingId: number
      /** @description Details on the nationality */
      details: string
      /**
       * Format: date-time
       * @description The start date of the booking
       * @example 2020-07-17T12:34:56
       */
      startDateTime: string
      /**
       * Format: date-time
       * @description The end date of the booking, or null if the booking is still active
       * @example 2021-07-16T12:34:56
       */
      endDateTime?: string
      /**
       * @description Whether this is the latest booking or not. Note that latest does not imply active.
       * @example true
       */
      latestBooking: boolean
    }
    /** @description The data held in NOMIS about a phone number */
    OffenderPhoneNumber: {
      /**
       * Format: int64
       * @description Unique NOMIS Id of number
       */
      phoneId: number
      /** @description The number */
      number: string
      /** @description Extension */
      extension?: string
      /** @description Phone type */
      type: components['schemas']['CodeDescription']
    }
    /** @description Sexual orientation details held against a booking */
    OffenderSexualOrientation: {
      /**
       * Format: int64
       * @description The booking's unique identifier
       * @example 1234567
       */
      bookingId: number
      /** @description The value of the profile info */
      sexualOrientation: components['schemas']['CodeDescription']
      /**
       * Format: date-time
       * @description The start date of the booking
       * @example 2020-07-17T12:34:56
       */
      startDateTime: string
      /**
       * Format: date-time
       * @description The end date of the booking, or null if the booking is still active
       * @example 2021-07-16T12:34:56
       */
      endDateTime?: string
      /**
       * @description Whether this is the latest booking or not. Note that latest does not imply active.
       * @example true
       */
      latestBooking: boolean
    }
    BookingIdsWithLast: {
      prisonerIds: components['schemas']['PrisonerIds'][]
      /** Format: int64 */
      lastBookingId: number
    }
    /** @description Attendance reconciliation check response */
    AttendanceReconciliationResponse: {
      /**
       * @description The prison we checked the attendance for
       * @example BXI
       */
      prisonId: string
      /**
       * Format: date
       * @description Date of the attendance check
       * @example 2021-01-01
       */
      date: string
      /**
       * @description All active bookings and their attendance count
       * @example [ { bookingId: 1234567, count: 2 } ]
       */
      bookings: components['schemas']['BookingCount'][]
    }
    /** @description A count for an offender booking */
    BookingCount: {
      /**
       * Format: int64
       * @description The offender booking id
       * @example 1234567
       */
      bookingId: number
      /**
       * Format: int64
       * @description The count for the offender booking
       * @example 2
       */
      count: number
    }
    /** @description Appointment information */
    AppointmentResponse: {
      /**
       * Format: int64
       * @description The booking id
       */
      bookingId: number
      /** @description The offender number, aka nomsId, prisonerId */
      offenderNo: string
      /** @description Prison where the appointment occurs */
      prisonId: string
      /**
       * Format: int64
       * @description NOMIS room id
       */
      internalLocation: number
      /**
       * Format: date-time
       * @description Start date and time
       */
      startDateTime: string
      /**
       * Format: date-time
       * @description End date and time
       */
      endDateTime: string
      /** @description Comment */
      comment?: string
      /** @description Event subtype */
      subtype: string
      /** @description Status */
      status: string
      /**
       * Format: date-time
       * @description Record created date
       */
      createdDate: string
      /** @description Record created by */
      createdBy: string
      /**
       * Format: date-time
       * @description Record modified date
       */
      modifiedDate?: string
      /** @description Record modified by */
      modifiedBy?: string
    }
    /** @description Event id */
    AppointmentIdResponse: {
      /**
       * Format: int64
       * @description The event id
       */
      eventId: number
    }
    PageAppointmentIdResponse: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['AppointmentIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Appointment counts */
    AppointmentCountsResponse: {
      /** @description The prison id */
      prisonId: string
      /** @description The event sub type */
      eventSubType: string
      /** @description Future appointments? */
      future: boolean
      /**
       * Format: int64
       * @description The count
       */
      count: number
    }
    /** @description Allocation to an activity */
    GetAllocationResponse: {
      /**
       * @description Prison ID
       * @example BXI
       */
      prisonId: string
      /**
       * Format: int64
       * @description Nomis Course Activity ID
       * @example 1234
       */
      courseActivityId: number
      /**
       * @description Nomis ID
       * @example A1234BC
       */
      nomisId: string
      /**
       * Format: int64
       * @description ID of the active booking
       * @example 12345
       */
      bookingId: number
      /**
       * Format: date
       * @description Date allocated to the course
       * @example 2023-03-12
       */
      startDate: string
      /**
       * Format: date
       * @description Date deallocated from the course
       * @example 2023-05-26
       */
      endDate?: string
      /**
       * @description Deallocation comment
       * @example Removed due to schedule clash
       */
      endComment?: string
      /**
       * @description Nomis reason code for ending (reference code domain PS_END_RSN)
       * @example WDRAWN
       */
      endReasonCode?: string
      /**
       * @description Whether the prisoner is currently suspended from the course
       * @example false
       */
      suspended: boolean
      /**
       * @description Pay band
       * @example 1
       */
      payBand?: string
      /**
       * @description Cell description (can be null if OUT or being transferred)
       * @example RSI-A-1-001
       */
      livingUnitDescription?: string
      /** @description Sessions excluded from the allocation during which period attendances will not be generated */
      exclusions: components['schemas']['AllocationExclusion'][]
      /** @description Rules for creating schedules - days and times */
      scheduleRules: components['schemas']['ScheduleRulesResponse'][]
      /**
       * Format: date
       * @description The start date of the activity
       * @example 2023-03-12
       */
      activityStartDate: string
    }
    /** @description Activity Schedule Rules */
    ScheduleRulesResponse: {
      /**
       * Format: partial-time
       * @description Course start time
       * @example 09:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description Course end time
       * @example 11:00
       */
      endTime: string
      /**
       * @description Runs on Mondays
       * @example true
       */
      monday: boolean
      /**
       * @description Runs on Tuesdays
       * @example true
       */
      tuesday: boolean
      /**
       * @description Runs on Wednesdays
       * @example true
       */
      wednesday: boolean
      /**
       * @description Runs on Thursdays
       * @example true
       */
      thursday: boolean
      /**
       * @description Runs on Fridays
       * @example true
       */
      friday: boolean
      /**
       * @description Runs on Saturdays
       * @example true
       */
      saturday: boolean
      /**
       * @description Runs on Sundays
       * @example true
       */
      sunday: boolean
      /**
       * @description Time slot
       * @example AM
       */
      slotCategoryCode: string
    }
    /** @description Find suspended prisoners from active allocations */
    FindSuspendedAllocationsResponse: {
      /**
       * @description NOMIS offender number
       * @example A1234BC
       */
      offenderNo: string
      /**
       * Format: int64
       * @description Course Activity ID
       * @example 1234567
       */
      courseActivityId: number
      /**
       * @description Course description
       * @example Kitchens AM
       */
      courseActivityDescription: string
    }
    /** @description Allocation reconciliation check response */
    AllocationReconciliationResponse: {
      /**
       * @description The prison we checked the allocations for
       * @example BXI
       */
      prisonId: string
      /**
       * @description All active bookings and their allocation count
       * @example [ { bookingId: 1234567, count: 2 } ]
       */
      bookings: components['schemas']['BookingCount'][]
    }
    /** @description Find active allocations with missing pay bands */
    FindAllocationsMissingPayBandsResponse: {
      /**
       * @description NOMIS offender number
       * @example A1234BC
       */
      offenderNo: string
      /**
       * @description NOMIS incentive level
       * @example STD
       */
      incentiveLevel: string
      /**
       * Format: int64
       * @description Course Activity ID
       * @example 1234567
       */
      courseActivityId: number
      /**
       * @description Course description
       * @example Kitchens AM
       */
      courseActivityDescription: string
    }
    /** @description Find active allocation ids response */
    FindActiveAllocationIdsResponse: {
      /**
       * Format: int64
       * @description Allocation id
       * @example 1
       */
      allocationId: number
    }
    PageFindActiveAllocationIdsResponse: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['FindActiveAllocationIdsResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Adjustment id */
    AdjustmentIdResponse: {
      /**
       * Format: int64
       * @description The adjustment id
       */
      adjustmentId: number
      /** @description SENTENCE or KEY_DATE */
      adjustmentCategory: string
    }
    PageAdjustmentIdResponse: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['AdjustmentIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description adjudication id */
    AdjudicationChargeIdResponse: {
      /**
       * Format: int64
       * @description The adjudication number
       */
      adjudicationNumber: number
      /**
       * Format: int32
       * @description The adjudication charge sequence
       */
      chargeSequence: number
      /** @description The prisoner number */
      offenderNo: string
    }
    PageAdjudicationChargeIdResponse: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['AdjudicationChargeIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description The requested adjudication charge and associated adjudication details. Note: the adjudication may have other charges associated with it */
    AdjudicationChargeResponse: {
      /**
       * Format: int32
       * @description The adjudication/party sequence, part of the composite key with adjudicationIncidentId
       */
      adjudicationSequence: number
      /** @description The offender number, aka nomsId, prisonerId */
      offenderNo: string
      /**
       * Format: int64
       * @description The id of the booking associated with the adjudication
       */
      bookingId: number
      /**
       * Format: int64
       * @description The adjudication number (business key)
       */
      adjudicationNumber: number
      /** @description Gender recorded in NOMIS */
      gender: components['schemas']['CodeDescription']
      /** @description Current prison or null if OUT */
      currentPrison?: components['schemas']['CodeDescription']
      /**
       * Format: date
       * @description Date Prisoner was added to the adjudication ????
       */
      partyAddedDate: string
      /** @description Adjudication comments */
      comment?: string
      /** @description Associated incident details */
      incident: components['schemas']['AdjudicationIncident']
      /** @description requested charge details.  Note that this adjudication may have other charges associated with it */
      charge: components['schemas']['AdjudicationCharge']
      /** @description Investigator that gathers evidence. Used in NOMIS in a small percentage of cases */
      investigations: components['schemas']['Investigation'][]
      /** @description hearings associated with this adjudication */
      hearings: components['schemas']['Hearing'][]
      /** @description indicates if this charge was part of a larger multi-charge adjudication in NOMIS */
      hasMultipleCharges: boolean
    }
    /** @description Activity details */
    GetActivityResponse: {
      /**
       * Format: int64
       * @description Activity id
       * @example 1
       */
      courseActivityId: number
      /**
       * @description Program service code
       * @example INDUCTION
       */
      programCode: string
      /**
       * @description Prison code
       * @example RSI
       */
      prisonId: string
      /**
       * Format: date
       * @description Date course started
       * @example 2020-04-11
       */
      startDate: string
      /**
       * Format: date
       * @description Date course ended
       * @example 2023-11-15
       */
      endDate?: string
      /**
       * Format: int64
       * @description Course internal location
       * @example 1234
       */
      internalLocationId?: number
      /**
       * @description Course internal location code
       * @example KITCH
       */
      internalLocationCode?: string
      /**
       * @description Course internal location description
       * @example RSI-WORK_IND-KITCH
       */
      internalLocationDescription?: string
      /**
       * Format: int32
       * @description Course capacity
       * @example 10
       */
      capacity: number
      /**
       * @description Course description
       * @example Kitchen work
       */
      description: string
      /**
       * @deprecated
       * @description The minimum incentive level allowed on the course
       * @example BAS
       */
      minimumIncentiveLevel?: string
      /**
       * @description Whether the course runs on bank holidays
       * @example false
       */
      excludeBankHolidays: boolean
      /**
       * @description Half or Full day (H or F)
       * @example H
       */
      payPerSession: string
      /** @description Rules for creating schedules - days and times */
      scheduleRules: components['schemas']['ScheduleRulesResponse'][]
      /** @description Pay rates available */
      payRates: components['schemas']['PayRatesResponse'][]
      /**
       * @description Outside work flag
       * @example false
       */
      outsideWork: boolean
    }
    /** @description Activity Pay Rates */
    PayRatesResponse: {
      /**
       * @description Incentive level code
       * @example BAS
       */
      incentiveLevelCode: string
      /**
       * @description Pay band
       * @example 1
       */
      payBand: string
      /**
       * @description rate
       * @example 3.2
       */
      rate: number
    }
    /** @description Active activities with allocations but no schedule rules */
    FindActivitiesWithoutScheduleRulesResponse: {
      /**
       * Format: int64
       * @description Course Activity ID
       * @example 1234567
       */
      courseActivityId: number
      /**
       * @description Course description
       * @example Kitchens AM
       */
      courseActivityDescription: string
    }
    /** @description Find activities with a pay rate with unknown incentive level */
    FindPayRateWithUnknownIncentiveResponse: {
      /**
       * @description Course description
       * @example Kitchens AM
       */
      courseActivityDescription: string
      /**
       * Format: int64
       * @description Course Activity ID
       * @example 1234567
       */
      courseActivityId: number
      /**
       * @description Pay band code
       * @example 5
       */
      payBandCode: string
      /**
       * @description Incentive level
       * @example STD
       */
      incentiveLevelCode: string
    }
    /** @description Find active activity ids response */
    FindActiveActivityIdsResponse: {
      /**
       * Format: int64
       * @description Activity id
       * @example 1
       */
      courseActivityId: number
    }
    PageFindActiveActivityIdsResponse: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['FindActiveActivityIdsResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description A list of Hearing result awards deleted (aka punishment) as a side effect of deleting a hearing result */
    DeleteHearingResultResponse: {
      /** @description a list of awards that were deleted */
      awardsDeleted: components['schemas']['HearingResultAwardResponse'][]
    }
    /** @description A list of Hearing result awards deleted (aka punishment) */
    DeleteHearingResultAwardResponses: {
      /** @description a list of awards that were deleted */
      awardsDeleted: components['schemas']['HearingResultAwardResponse'][]
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  getSentenceAdjustment: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Sentence adjustment id
         * @example 12345
         */
        adjustmentId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description the sentence adjustment details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SentenceAdjustmentResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Adjustment not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateSentenceAdjustment: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Sentence adjustment id
         * @example 12345
         */
        adjustmentId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSentenceAdjustmentRequest']
      }
    }
    responses: {
      /** @description the sentence adjustment has been updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Supplied data is invalid, for instance missing required fields or invalid values. See schema for details */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteSentenceAdjustment: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Sentence adjustment id
         * @example 12345
         */
        adjustmentId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description the sentence adjustment has been deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  upsertAttendance: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Course schedule id */
        courseScheduleId: number
        /** @description Booking id */
        bookingId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpsertAttendanceRequest']
      }
    }
    responses: {
      /** @description Attendance updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UpsertAttendanceResponse']
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteAttendance: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Course schedule id */
        courseScheduleId: number
        /** @description Booking id */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Attendance deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateVisit: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender Noms Id
         * @example A1234ZZ
         */
        offenderNo: string
        /**
         * @description Nomis visit Id
         * @example 123456
         */
        visitId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateVisitRequest']
      }
    }
    responses: {
      /** @description Visit information updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Person ids do not exist */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description offenderNo or visits id does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  cancelVisit: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender Noms Id
         * @example A1234ZZ
         */
        offenderNo: string
        /** @description Nomis Visit Id */
        visitId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CancelVisitRequest']
      }
    }
    responses: {
      /** @description Visit cancelled */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid cancellation reason */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description VSIP visit id not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateCourtAppearance: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender no
         * @example AB1234A
         */
        offenderNo: string
        /**
         * @description Case Id
         * @example 34565
         */
        caseId: number
        /**
         * @description Case appearance Id
         * @example 34565
         */
        eventId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CourtAppearanceRequest']
      }
    }
    responses: {
      /** @description Court Appearance updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UpdateCourtAppearanceResponse']
        }
      }
      /** @description Supplied data is invalid, for instance missing required fields or invalid values. See schema for details */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Court appearance does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteCourtAppearance: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender no
         * @example AB1234A
         */
        offenderNo: string
        /**
         * @description Case Id
         * @example 34565
         */
        caseId: number
        /**
         * @description Case appearance Id
         * @example 34565
         */
        eventId: number
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['CourtAppearanceRequest']
      }
    }
    responses: {
      /** @description Court Appearance deleted */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateCharge: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender no
         * @example AB1234A
         */
        offenderNo: string
        /**
         * @description Case Id
         * @example 34565
         */
        caseId: number
        /**
         * @description Charge Id
         * @example 34565
         */
        chargeId: number
        /**
         * @description Court event Id
         * @example 34565
         */
        courtEventId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OffenderChargeRequest']
      }
    }
    responses: {
      /** @description Offender Charge updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Supplied data is invalid, for instance missing required fields or invalid values. See schema for details */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Court case does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getProfileDetails: {
    parameters: {
      query?: {
        /**
         * @description Profile types
         * @example HAIR
         */
        profileTypes?: string[]
        /**
         * @description Booking ID
         * @example 12345
         */
        bookingId?: number
        /**
         * @description Latest booking only?
         * @example true
         */
        latestBookingOnly?: boolean
      }
      header?: never
      path: {
        /**
         * @description Offender number
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Profile Details Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerProfileDetailsResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prisoner does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  upsertPhysicalAttributes: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender number
         * @example A1234AA
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpsertProfileDetailsRequest']
      }
    }
    responses: {
      /** @description Physical Attributes Updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UpsertProfileDetailsResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prisoner does not exist or has no bookings */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderSentence: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender no
         * @example AA668EC
         */
        offenderNo: string
        /**
         * @description Case Id
         * @example 4565456
         */
        caseId: number
        /**
         * @description Sentence sequence
         * @example 1
         */
        sequence: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description the sentence details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SentenceResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Offender booking not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateSentence: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender no
         * @example AA668EC
         */
        offenderNo: string
        /**
         * @description Case Id
         * @example 4565456
         */
        caseId: number
        /**
         * @description Sentence sequence
         * @example 1
         */
        sequence: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateSentenceRequest']
      }
    }
    responses: {
      /** @description Sentence updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Supplied data is invalid, for instance missing required fields or invalid values. See schema for details */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Sentence does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteSentence: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender no
         * @example AA668EC
         */
        offenderNo: string
        /**
         * @description Case Id
         * @example 4565456
         */
        caseId: number
        /**
         * @description Sentence sequence
         * @example 1
         */
        sequence: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description the sentence has been deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAlert: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Booking Id
         * @example 12345
         */
        bookingId: number
        /**
         * @description Alert sequence
         * @example 3
         */
        alertSequence: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Alert Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AlertResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Alert does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateAlert: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Booking id
         * @example 1234567
         */
        bookingId: number
        /**
         * @description Alert sequence
         * @example 3
         */
        alertSequence: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAlertRequest']
      }
    }
    responses: {
      /** @description Alert Updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AlertResponse']
        }
      }
      /** @description One or more fields in the request contains invalid data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Alert does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteAlert: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Booking Id
         * @example 12345
         */
        bookingId: number
        /**
         * @description Alert sequence
         * @example 3
         */
        alertSequence: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Alert Deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPerson: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Person Id
         * @example 12345
         */
        personId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ContactPerson']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Person does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updatePerson: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Person Id
         * @example 12345
         */
        personId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePersonRequest']
      }
    }
    responses: {
      /** @description Person Updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deletePerson: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Person Id
         * @example 12345
         */
        personId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person Deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updatePersonRestriction: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Person Id
         * @example 12345
         */
        personId: number
        /**
         * @description Person restrictions Id
         * @example 12345
         */
        personRestrictionId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateContactPersonRestrictionRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The request contains bad data for example restriction type does not exist */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Restriction or Person does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deletePersonRestriction: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Person Id
         * @example 12345
         */
        personId: number
        /**
         * @description Person restrictions Id
         * @example 12345
         */
        personRestrictionId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Restrictions exists but not for this person */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updatePersonPhone: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Person Id
         * @example 12345
         */
        personId: number
        /**
         * @description Phone Id
         * @example 35355
         */
        phoneId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePersonPhoneRequest']
      }
    }
    responses: {
      /** @description Person Phone ID Updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request data, e.g type is not valid */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Person or phone does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deletePersonPhone: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Person Id
         * @example 12345
         */
        personId: number
        /**
         * @description Phone Id
         * @example 35355
         */
        phoneId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person Phone ID Deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Phone exists but not for this person */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updatePersonIdentifier: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Person Id
         * @example 12345
         */
        personId: number
        /**
         * @description Identifier sequence
         * @example 4
         */
        sequence: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePersonIdentifierRequest']
      }
    }
    responses: {
      /** @description Person Identifier updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request data, e.g type is not valid */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Person or identifier does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deletePersonIdentifier: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Person Id
         * @example 12345
         */
        personId: number
        /**
         * @description Identifier sequence
         * @example 4
         */
        sequence: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person Identifier deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Person does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updatePersonEmployment: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Person Id
         * @example 12345
         */
        personId: number
        /**
         * @description Employment sequence
         * @example 4
         */
        sequence: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePersonEmploymentRequest']
      }
    }
    responses: {
      /** @description Person Employment updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request data, e.g type is not valid */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Person or employment does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deletePersonEmployment: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Person Id
         * @example 12345
         */
        personId: number
        /**
         * @description Employment sequence
         * @example 4
         */
        sequence: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person Employment deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Person does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updatePersonEmail: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Person Id
         * @example 12345
         */
        personId: number
        /**
         * @description Email address Id
         * @example 76554
         */
        emailAddressId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePersonEmailRequest']
      }
    }
    responses: {
      /** @description Person Email ID aka InternetAddressId Update */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Person or email address does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deletePersonEmail: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Person Id
         * @example 12345
         */
        personId: number
        /**
         * @description Email address Id
         * @example 76554
         */
        emailAddressId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person Email ID aka InternetAddressId Delete */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The email exist but not for this person */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Person or email address does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updatePersonContact: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Person Id
         * @example 12345
         */
        personId: number
        /**
         * @description Contact Id
         * @example 75675
         */
        contactId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePersonContactRequest']
      }
    }
    responses: {
      /** @description Person Contact Updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The request contains bad for example prisoner does not exist or contact / relationship types do not exist */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Person or contact does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Contact with the specified relationship and type already exists for this prisoner's latest booking */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deletePersonContact: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Person Id
         * @example 12345
         */
        personId: number
        /**
         * @description Contact Id
         * @example 75675
         */
        contactId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person Contact Updated, returned if in contact does not exist */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Contact does belong to person */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updatePersonContactRestriction: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Person Id
         * @example 12345
         */
        personId: number
        /**
         * @description Contact Id
         * @example 67899
         */
        contactId: number
        /**
         * @description Restriction Id
         * @example 38383
         */
        contactRestrictionId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateContactPersonRestrictionRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The request contains bad data for example restriction type does not exist */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Person or contact or restriction does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deletePersonContactRestriction: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Person Id
         * @example 12345
         */
        personId: number
        /**
         * @description Contact Id
         * @example 67899
         */
        contactId: number
        /**
         * @description Restriction Id
         * @example 38383
         */
        contactRestrictionId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The personId, ContactId or restrictionId exist but on other relationships */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updatePersonAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Person Id
         * @example 12345
         */
        personId: number
        /**
         * @description Address Id
         * @example 47474
         */
        addressId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePersonAddressRequest']
      }
    }
    responses: {
      /** @description Person Address Updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The request contains bad for example type code does not exist */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Person or address does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deletePersonAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Person Id
         * @example 12345
         */
        personId: number
        /**
         * @description Address Id
         * @example 47474
         */
        addressId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person Address Deleted */
      202: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The address exist but not for this person */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updatedPersonAddressPhone: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Person Id
         * @example 12345
         */
        personId: number
        /**
         * @description Address Id
         * @example 56789
         */
        addressId: number
        /**
         * @description Phone Id
         * @example 585850
         */
        phoneId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdatePersonPhoneRequest']
      }
    }
    responses: {
      /** @description Person Phone ID Updates */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request data, e.g type is not valid */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Person or address does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deletedPersonAddressPhone: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Person Id
         * @example 12345
         */
        personId: number
        /**
         * @description Address Id
         * @example 56789
         */
        addressId: number
        /**
         * @description Phone Id
         * @example 585850
         */
        phoneId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person Phone ID Deletes */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Phone exists but not for this address or address exists but not for this person */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateNonAssociation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender
         * @example A3456GH
         */
        offenderNo: string
        /**
         * @description Non-association offender
         * @example A4578ED
         */
        nsOffenderNo: string
        /**
         * @description Sequence number. Amend this specific detail record
         * @example 1
         */
        typeSequence: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateNonAssociationRequest']
      }
    }
    responses: {
      /** @description Successfully amended non-association */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid data such as reason or type do not exist etc. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_NON_ASSOCIATIONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Non-association does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteNonAssociation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender
         * @example A3456GH
         */
        offenderNo: string
        /**
         * @description Non-association offender
         * @example A4578ED
         */
        nsOffenderNo: string
        /**
         * @description Sequence number. Close this specific detail record
         * @example 2
         */
        typeSequence: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_NON_ASSOCIATIONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Non-association does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  closeNonAssociation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender
         * @example A3456GH
         */
        offenderNo: string
        /**
         * @description Non-association offender
         * @example A4578ED
         */
        nsOffenderNo: string
        /**
         * @description Sequence number. Close this specific detail record
         * @example 2
         */
        typeSequence: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Non-association is already closed */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_NON_ASSOCIATIONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Non-association does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateLocation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS location Id
         * @example 1234567
         */
        locationId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateLocationRequest']
      }
    }
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid data such as location or subtype do not exist etc. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, correct role not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location id does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  reactivateLocation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS location Id
         * @example 1234567
         */
        locationId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Location was already active */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, correct role not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location id does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deactivateLocation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS location Id
         * @example 1234567
         */
        locationId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['DeactivateRequest']
      }
    }
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Reason code does not exist, or already deactivated */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, correct role not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location id does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateCertification: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS location Id
         * @example 1234567
         */
        locationId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCertificationRequest']
      }
    }
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, correct role not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location id does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateCapacity: {
    parameters: {
      query?: {
        /** @description If true leave the operational capacity unchanged */
        ignoreOperationalCapacity?: boolean
      }
      header?: never
      path: {
        /**
         * @description NOMIS location Id
         * @example 1234567
         */
        locationId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCapacityRequest']
      }
    }
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, correct role not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location id does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getKeyDateAdjustment: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Key date adjustment id
         * @example 12345
         */
        adjustmentId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description the key date adjustment details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['KeyDateAdjustmentResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Adjustment not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateKeyDateAdjustment: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Key date adjustment id
         * @example 12345
         */
        adjustmentId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateKeyDateAdjustmentRequest']
      }
    }
    responses: {
      /** @description the key date adjustment has been updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Supplied data is invalid, for instance missing required fields or invalid values. See schema for details */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Adjustment not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteKeyDateAdjustment: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Key date adjustment id
         * @example 12345
         */
        adjustmentId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description the key date adjustment has been deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getGlobalIncentiveLevel: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Incentive reference code
         * @example STD
         */
        code: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description return the Global Incentive level */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReferenceCode']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Global Incentive Level does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateGlobalIncentiveLevel: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Incentive reference code
         * @example STD
         */
        code: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateIncentiveRequest']
      }
    }
    responses: {
      /** @description Updated Global Incentive level */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReferenceCode']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Global incentive level not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonIncentiveLevel: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Prison id
         * @example MDI
         */
        prison: string
        /**
         * @description Incentive level code
         * @example STD
         */
        code: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description return the Prison Incentive level */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonIncentiveLevelDataResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prison Incentive Level does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updatePrisonIncentiveLevelData: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Prison Id
         * @example MDI
         */
        prison: string
        /**
         * @description Incentive level code
         * @example STD
         */
        code: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePrisonIncentiveRequest']
      }
    }
    responses: {
      /** @description Prison Incentive level data updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonIncentiveLevelDataResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  upsertCSIP: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpsertCSIPRequest']
      }
    }
    responses: {
      /** @description CSIP Updated or created */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UpsertCSIPResponse']
        }
      }
      /** @description One or more fields in the request contains invalid data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CSIP */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCorporateById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Corporate Id
         * @example 12345
         */
        corporateId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Corporate Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CorporateOrganisation']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Corporate does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateCorporate: {
    parameters: {
      query?: never
      header?: never
      path: {
        corporateId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCorporateOrganisationRequest']
      }
    }
    responses: {
      /** @description Corporate updated */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Caseload does not exist */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Corporate does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteCorporate: {
    parameters: {
      query?: never
      header?: never
      path: {
        corporateId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Corporate deleted or did not exist */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateCorporateWebAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        corporateId: number
        webAddressId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCorporateWebAddressRequest']
      }
    }
    responses: {
      /** @description Corporate web address updated */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Corporate or web address does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteCorporateWebAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        corporateId: number
        webAddressId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Corporate web address deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The web address exists but not for the supplied corporate */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateCorporateTypes: {
    parameters: {
      query?: never
      header?: never
      path: {
        corporateId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCorporateTypesRequest']
      }
    }
    responses: {
      /** @description Corporate types updated */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description One or more of the type codes are not valid */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Corporate does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createCorporateType: {
    parameters: {
      query?: never
      header?: never
      path: {
        corporateId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCorporateTypeRequest']
      }
    }
    responses: {
      /** @description Corporate type created (or already exists) */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Type code is not valid */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Corporate does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateCorporatePhone: {
    parameters: {
      query?: never
      header?: never
      path: {
        corporateId: number
        phoneId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCorporatePhoneRequest']
      }
    }
    responses: {
      /** @description Corporate phone updated */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The request contains bad data for example type code does not exist */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Corporate or phone does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteCorporatePhone: {
    parameters: {
      query?: never
      header?: never
      path: {
        corporateId: number
        phoneId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Corporate phone deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The phone exists but not for the supplied corporate */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateCorporateEmail: {
    parameters: {
      query?: never
      header?: never
      path: {
        corporateId: number
        emailId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCorporateEmailRequest']
      }
    }
    responses: {
      /** @description Corporate email updated */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Corporate or email does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteCorporateEmail: {
    parameters: {
      query?: never
      header?: never
      path: {
        corporateId: number
        emailId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Corporate email deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The email exists but not for the supplied corporate */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateCorporateAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        corporateId: number
        addressId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCorporateAddressRequest']
      }
    }
    responses: {
      /** @description Corporate address updated */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The request contains bad data for example type code does not exist */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Corporate or address does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteCorporateAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        corporateId: number
        addressId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Corporate address deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The address exists but not for the supplied corporate */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateCorporateAddressPhone: {
    parameters: {
      query?: never
      header?: never
      path: {
        corporateId: number
        addressId: number
        phoneId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCorporatePhoneRequest']
      }
    }
    responses: {
      /** @description Corporate address phone updated */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The request contains bad data for example type code does not exist */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Corporate or address or phone does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteCorporateAddressPhone: {
    parameters: {
      query?: never
      header?: never
      path: {
        corporateId: number
        addressId: number
        phoneId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Corporate address phone deleted or does not exist */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The request params contains address or corporate that are not related with the phone */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCaseNote: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Id
         * @example 1234578
         */
        caseNoteId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description CaseNote Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CaseNoteResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CASENOTES */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description CaseNote does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateCaseNote: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Case note id
         * @example 1234567
         */
        caseNoteId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCaseNoteRequest']
      }
    }
    responses: {
      /** @description CaseNote Updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description One or more fields in the request contains invalid data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CASENOTES */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description CaseNote does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteCaseNote: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Case note id
         * @example 1234567
         */
        caseNoteId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description CaseNote Deleted */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CASENOTES */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description CaseNote does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateAppointment: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS event Id
         * @example 1234567
         */
        nomisEventId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAppointmentRequest']
      }
    }
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid data such as location or subtype do not exist etc. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_APPOINTMENTS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Event id does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteAppointment: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS event Id
         * @example 1234567
         */
        nomisEventId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Success */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_APPOINTMENTS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Event id does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  uncancelAppointment: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS event Id
         * @example 1234567
         */
        nomisEventId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_APPOINTMENTS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Event id does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  cancelAppointment: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS event Id
         * @example 1234567
         */
        nomisEventId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_APPOINTMENTS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Event id does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateAlertType: {
    parameters: {
      query?: never
      header?: never
      path: {
        code: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAlertType']
      }
    }
    responses: {
      /** @description Alert type updated */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description One or more fields in the request contains invalid data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Alert type does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  reactivateAlertType: {
    parameters: {
      query?: never
      header?: never
      path: {
        code: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Alert code reactivated */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Alert code does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deactivateAlertType: {
    parameters: {
      query?: never
      header?: never
      path: {
        code: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Alert type deactivated */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Alert type does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateAlertCode: {
    parameters: {
      query?: never
      header?: never
      path: {
        code: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAlertCode']
      }
    }
    responses: {
      /** @description Alert code updated */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description One or more fields in the request contains invalid data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Alert code does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  reactivateAlertCode: {
    parameters: {
      query?: never
      header?: never
      path: {
        code: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Alert code reactivated */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Alert code does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deactivateAlertCode: {
    parameters: {
      query?: never
      header?: never
      path: {
        code: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Alert code deactivated */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Alert code does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateRepairs: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateRepairsRequest']
      }
    }
    responses: {
      /** @description Repairs updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UpdateRepairsResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Adjudication does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateHearing: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: number
        /**
         * @description Hearing Id
         * @example 12345
         */
        hearingId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateHearingRequest']
      }
    }
    responses: {
      /** @description Updated Hearing Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UpdateHearingRequest']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Hearing does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteHearing: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: number
        /**
         * @description Hearing Id
         * @example 12345
         */
        hearingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Hearing deleted */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Adjudication does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateEvidence: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateEvidenceRequest']
      }
    }
    responses: {
      /** @description Evidence updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UpdateEvidenceResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Adjudication does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  unquashHearingResultAndAwards: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: number
        /**
         * @description Nomis charge sequence
         * @example 1
         */
        chargeSequence: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UnquashHearingResultAwardRequest']
      }
    }
    responses: {
      /** @description Hearing result award IDs created and awards deleted. These list should be empty unless there was a previous synchronisation issue that meant the NOMIS awards are not in the correct state */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UpdateHearingResultAwardResponses']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Charge does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  quashHearingResultAndAwards: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: number
        /**
         * @description Nomis charge sequence
         * @example 1
         */
        chargeSequence: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Hearing result and awards quashed */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Charge does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateCreateAndDeleteHearingResultAwards: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: number
        /**
         * @description Nomis charge sequence
         * @example 1
         */
        chargeSequence: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateHearingResultAwardRequest']
      }
    }
    responses: {
      /** @description Hearing result award IDs created and awards deleted */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UpdateHearingResultAwardResponses']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Charge does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createHearingResultAward: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: number
        /**
         * @description Nomis charge sequence
         * @example 1
         */
        chargeSequence: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateHearingResultAwardRequest']
      }
    }
    responses: {
      /** @description Hearing result award IDs created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateHearingResultAwardResponses']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Charge does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteHearingResultAwards: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: number
        /**
         * @description Nomis charge sequence
         * @example 1
         */
        chargeSequence: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Hearing result awards deleted */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DeleteHearingResultAwardResponses']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Charge does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getActivity: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Course activity id */
        courseActivityId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetActivityResponse']
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateActivity: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Course activity id */
        courseActivityId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateActivityRequest']
      }
    }
    responses: {
      /** @description Activity information */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateActivityResponse']
        }
      }
      /** @description Prison, location, program service or iep value do not exist */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Activity Not Found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteActivity: {
    parameters: {
      query?: never
      header?: never
      path: {
        courseActivityId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Activity is deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateCourseSchedule: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Course activity id */
        courseActivityId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CourseScheduleRequest']
      }
    }
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UpdateCourseScheduleResponse']
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The course schedule does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  endActivity: {
    parameters: {
      query?: {
        /** @description End comment */
        endComment?: string
      }
      header?: never
      path: {
        /** @description Course activity id */
        courseActivityId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Activity ended */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  upsertAllocation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Course activity id */
        courseActivityId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpsertAllocationRequest']
      }
    }
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['UpsertAllocationResponse']
        }
      }
      /** @description There was an error with the request, see the response for details */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  endActivities: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['EndActivitiesRequest']
      }
    }
    responses: {
      /** @description Activities ended */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  checkServicePrison: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The code of the service from the EXTERNAL_SERVICES table
         * @example ACTIVITY
         */
        serviceCode: string
        /**
         * @description The id of the prison
         * @example MDI
         */
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role SYNCHRONISATION_REPORTING */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not Found, the service is not turned on for the prison */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createServicePrison: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The code of the service from the EXTERNAL_SERVICES table
         * @example ACTIVITY
         */
        serviceCode: string
        /**
         * @description The id of the prison
         * @example MDI
         */
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role SYNCHRONISATION_REPORTING */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not Found, the service or prison do not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createVisit: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender Noms Id
         * @example A1234ZZ
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateVisitRequest']
      }
    }
    responses: {
      /** @description Visit information with created id */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateVisitResponse']
        }
      }
      /** @description Prison or person ids do not exist */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description offenderNo does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description visit already exists exist. The moreInfo contains the NOMIS visitId for the existing visit */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCourtCasesByOffender: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender No
         * @example AA12345
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description the list of court cases */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtCaseResponse'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Offender not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createCourtCase: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender No
         * @example AK1234B
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCourtCaseRequest']
      }
    }
    responses: {
      /** @description Created Court case */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateCourtCaseResponse']
        }
      }
      /** @description Supplied data is invalid, for instance missing required fields or invalid values. See schema for details */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Offender does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createCourtAppearance: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender no
         * @example AB1234A
         */
        offenderNo: string
        /**
         * @description Case Id
         * @example 34565
         */
        caseId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CourtAppearanceRequest']
      }
    }
    responses: {
      /** @description Created Court Appearance */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateCourtAppearanceResponse']
        }
      }
      /** @description Supplied data is invalid, for instance missing required fields or invalid values. See schema for details */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Court case does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createCourtCharge: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender No
         * @example AK1234B
         */
        offenderNo: string
        caseId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['OffenderChargeRequest']
      }
    }
    responses: {
      /** @description Created Charge */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderChargeIdResponse']
        }
      }
      /** @description Supplied data is invalid, for instance missing required fields or invalid values. See schema for details */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Offender does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  refreshCaseIdentifiers: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender no
         * @example AB1234A
         */
        offenderNo: string
        /**
         * @description Case Id
         * @example 34565
         */
        caseId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CaseIdentifierRequest']
      }
    }
    responses: {
      /** @description Case Identifiers Refreshed */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Supplied data is invalid, for instance missing required fields or invalid values. See schema for details */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Court case does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createSentence: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender number
         * @example AB1234K
         */
        offenderNo: string
        /**
         * @description Case Id
         * @example 4565456
         */
        caseId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateSentenceRequest']
      }
    }
    responses: {
      /** @description Created Sentence */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateSentenceResponse']
        }
      }
      /** @description Supplied data is invalid, for instance missing required fields or invalid values. See schema for details */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Offender does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCaseNotesForPrisoner: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender No AKA prisoner number
         * @example A3745XD
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Case notes Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerCaseNotesResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CASENOTES */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prisoner does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createCaseNote: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender no (aka prisoner number)
         * @example A1234AK
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCaseNoteRequest']
      }
    }
    responses: {
      /** @description CaseNote Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateCaseNoteResponse']
        }
      }
      /** @description One or more fields in the request contains invalid data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CASENOTES */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prisoner does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createAlert: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender no (aka prisoner number)
         * @example A1234AK
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAlertRequest']
      }
    }
    responses: {
      /** @description Alert Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateAlertResponse']
        }
      }
      /** @description One or more fields in the request contains invalid data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prisoner does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Active alert of this type already exists */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  resynchroniseAlerts: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender no (aka prisoner number)
         * @example A1234AK
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAlertRequest'][]
      }
    }
    responses: {
      /** @description Alerts replaces */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateAlertResponse'][]
        }
      }
      /** @description One or more fields in the request contains invalid data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prisoner does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createAdjudication: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender Noms Id
         * @example A1234ZZ
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAdjudicationRequest']
      }
    }
    responses: {
      /** @description Adjudication Created Returned */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AdjudicationResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prisoner does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Adjudication already exists */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonerBookings: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
    responses: {
      /** @description list of prisoner details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerDetails'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role SYNCHRONISATION_REPORTING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createSentenceAdjustment: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Booking Id
         * @example 12345
         */
        bookingId: number
        /**
         * @description Sentence sequence number
         * @example 1
         */
        sentenceSequence: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateSentenceAdjustmentRequest']
      }
    }
    responses: {
      /** @description Created Sentence adjustment id */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateAdjustmentResponse']
        }
      }
      /** @description Supplied data is invalid, for instance missing required fields or invalid values. See schema for details */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Booking or sentence sequence do not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createIncentive: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender Booking Id
         * @example 1234567
         */
        bookingId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateIncentiveRequest']
      }
    }
    responses: {
      /** @description Incentive information with created sequence */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateIncentiveResponse']
        }
      }
      /** @description Prison or iep value do not exist */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description booking does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  reorderCurrentIncentives: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender Booking Id
         * @example 1234567
         */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Incentives successfully reordered */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access this endpoint forbidden, incorrect role. Must have NOMIS_INCENTIVES */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description booking does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createKeyDateAdjustment: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Booking Id
         * @example 12345
         */
        bookingId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateKeyDateAdjustmentRequest']
      }
    }
    responses: {
      /** @description Created key date adjustment */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateAdjustmentResponse']
        }
      }
      /** @description Supplied data is invalid, for instance missing required fields or invalid values. See schema for details */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Booking does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createPerson: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePersonRequest']
      }
    }
    responses: {
      /** @description Person ID Returned */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreatePersonResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Person already exists with the same ID */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createPersonRestriction: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Person Id
         * @example 12345
         */
        personId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateContactPersonRestrictionRequest']
      }
    }
    responses: {
      /** @description Person Contact ID Returned */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateContactPersonRestrictionResponse']
        }
      }
      /** @description The request contains bad data for example restriction type does not exist */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Person does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createPersonPhone: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Person Id
         * @example 12345
         */
        personId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePersonPhoneRequest']
      }
    }
    responses: {
      /** @description Person Phone ID Returned */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreatePersonPhoneResponse']
        }
      }
      /** @description Invalid request data, e.g type is not valid */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Person does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createPersonIdentifier: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Person Id
         * @example 12345
         */
        personId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePersonIdentifierRequest']
      }
    }
    responses: {
      /** @description Person Identifier sequence returned */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreatePersonIdentifierResponse']
        }
      }
      /** @description Invalid request data, e.g type is not valid */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Person does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createPersonEmployment: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Person Id
         * @example 12345
         */
        personId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePersonEmploymentRequest']
      }
    }
    responses: {
      /** @description Person Employment sequence returned */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreatePersonEmploymentResponse']
        }
      }
      /** @description Invalid request data, e.g corporate is not valid */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Person does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createPersonEmail: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Person Id
         * @example 12345
         */
        personId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePersonEmailRequest']
      }
    }
    responses: {
      /** @description Person Email ID aka InternetAddressId Returned */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreatePersonEmailResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Person does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createPersonContact: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Person Id
         * @example 12345
         */
        personId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePersonContactRequest']
      }
    }
    responses: {
      /** @description Person Contact ID Returned */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreatePersonContactResponse']
        }
      }
      /** @description The request contains bad for example prisoner does not exist or contact / relationship types do not exist */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Person does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Contact with the specified relationship and type already exists for this prisoner's latest booking */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createPersonContactRestriction: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Person Id
         * @example 12345
         */
        personId: number
        /**
         * @description Contact Id
         * @example 67899
         */
        contactId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateContactPersonRestrictionRequest']
      }
    }
    responses: {
      /** @description Person Contact ID Returned */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateContactPersonRestrictionResponse']
        }
      }
      /** @description The request contains bad data for example restriction type does not exist */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Person or contact does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createPersonAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Person Id
         * @example 12345
         */
        personId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePersonAddressRequest']
      }
    }
    responses: {
      /** @description Person Address ID Returned */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreatePersonAddressResponse']
        }
      }
      /** @description The request contains bad for example type code does not exist */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Person does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createPersonAddressPhone: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Person Id
         * @example 12345
         */
        personId: number
        /**
         * @description Address Id
         * @example 56789
         */
        addressId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePersonPhoneRequest']
      }
    }
    responses: {
      /** @description Person Phone ID Returned */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreatePersonPhoneResponse']
        }
      }
      /** @description Invalid request data, e.g type is not valid */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Person or address does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createNonAssociation: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateNonAssociationRequest']
      }
    }
    responses: {
      /** @description Successfully created non-association */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateNonAssociationResponse']
        }
      }
      /** @description Invalid data such as booking or location do not exist etc. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_NON_ASSOCIATIONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createLocation: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateLocationRequest']
      }
    }
    responses: {
      /** @description Successfully created location with created id */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LocationIdResponse']
        }
      }
      /** @description Invalid data such as prison or parent do not exist etc. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, correct role not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createGlobalIncentiveLevel: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateIncentiveRequest']
      }
    }
    responses: {
      /** @description Global Incentive level */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ReferenceCode']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  reorderGlobalIncentiveLevels: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReorderRequest']
      }
    }
    responses: {
      /** @description Reorder successful */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createPrisonIncentiveLevelData: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Prison Id
         * @example MDI
         */
        prison: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePrisonIncentiveRequest']
      }
    }
    responses: {
      /** @description Prison Incentive level data created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonIncentiveLevelDataResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createCorporate: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCorporateOrganisationRequest']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Corporate creates */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Caseload does not exist */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createCorporateWebAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        corporateId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCorporateWebAddressRequest']
      }
    }
    responses: {
      /** @description Corporate web address created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateCorporateWebAddressResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Corporate does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createCorporatePhone: {
    parameters: {
      query?: never
      header?: never
      path: {
        corporateId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCorporatePhoneRequest']
      }
    }
    responses: {
      /** @description Corporate phone created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateCorporatePhoneResponse']
        }
      }
      /** @description The request contains bad data for example type code does not exist */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Corporate does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createCorporateEmail: {
    parameters: {
      query?: never
      header?: never
      path: {
        corporateId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCorporateEmailRequest']
      }
    }
    responses: {
      /** @description Corporate email created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateCorporateEmailResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Corporate does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createCorporateAddress: {
    parameters: {
      query?: never
      header?: never
      path: {
        corporateId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCorporateAddressRequest']
      }
    }
    responses: {
      /** @description Corporate address created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateCorporateAddressResponse']
        }
      }
      /** @description The request contains bad data for example type code does not exist */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Corporate does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createCorporateAddressPhone: {
    parameters: {
      query?: never
      header?: never
      path: {
        corporateId: number
        addressId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateCorporatePhoneRequest']
      }
    }
    responses: {
      /** @description Corporate address phone created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateCorporatePhoneResponse']
        }
      }
      /** @description The request contains bad data for example type code does not exist */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Corporate or address does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createAppointment: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAppointmentRequest']
      }
    }
    responses: {
      /** @description Appointment information with created id */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateAppointmentResponse']
        }
      }
      /** @description Invalid data such as booking or location do not exist etc. */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_APPOINTMENTS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createAlertType: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAlertType']
      }
    }
    responses: {
      /** @description Alert type Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description One or more fields in the request contains invalid data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Type already exits */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createAlertCode: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAlertCode']
      }
    }
    responses: {
      /** @description Alert code Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description One or more fields in the request contains invalid data */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Code already exits */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createHearing: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateHearingRequest']
      }
    }
    responses: {
      /** @description Hearing Created Returned */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateHearingResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Adjudication does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  upsertHearingResult: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: number
        /**
         * @description Nomis Hearing Id
         * @example 123
         */
        hearingId: number
        /**
         * @description Nomis charge sequence
         * @example 1
         */
        chargeSequence: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateHearingResultRequest']
      }
    }
    responses: {
      /** @description Hearing result created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateHearingResultResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Hearing does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteHearingResult: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: number
        /**
         * @description Hearing Id
         * @example 12345
         */
        hearingId: number
        /**
         * @description Nomis charge sequence
         * @example 1
         */
        chargeSequence: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Hearing result deleted */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DeleteHearingResultResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Adjudication does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createResultWithDummyHearing: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: number
        /**
         * @description Nomis charge sequence
         * @example 1
         */
        chargeSequence: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateHearingResultRequest']
      }
    }
    responses: {
      /** @description Result created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Adjudication does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteResult: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: number
        /**
         * @description Nomis charge sequence
         * @example 1
         */
        chargeSequence: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description result deleted */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Adjudication does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createActivity: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateActivityRequest']
      }
    }
    responses: {
      /** @description Activity information with created id */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CreateActivityResponse']
        }
      }
      /** @description Prison, location, program service or iep value do not exist */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getVisit: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Nomis Visit Id
         * @example 12345
         */
        visitId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Visit Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VisitResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description visit does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getVisitRoomCountsByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /**
         * @description Filter results by prison ids (returns all prisons if not specified)
         * @example ['MDI','LEI']
         */
        prisonIds?: string[]
        /**
         * @description Filter results by visitType (returns all types if not specified)
         * @example ['SCON','OFFI']
         */
        visitTypes?: string[]
        /**
         * @description Filter results by visits that were created on or after the given timestamp
         * @example 2021-11-03T09:00:00
         */
        fromDateTime?: string
        /**
         * @description Filter results by visits that were created on or before the given timestamp
         * @example 2021-11-03T09:00:00
         */
        toDateTime?: string
        /**
         * @description Filter results by restricting to future visit usage only
         * @example true
         */
        futureVisitsOnly?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description list of visit room and count is returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VisitRoomCountResponse'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getVisitsByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /**
         * @description Filter results by prison ids (returns all prisons if not specified)
         * @example ['MDI','LEI']
         */
        prisonIds?: string[]
        /**
         * @description Filter results by visitType (returns all types if not specified)
         * @example ['SCON','OFFI']
         */
        visitTypes?: string[]
        /**
         * @description Filter results by visits that were created on or after the given timestamp
         * @example 2021-11-03T09:00:00
         */
        fromDateTime?: string
        /**
         * @description Filter results by visits that were created on or before the given timestamp
         * @example 2021-11-03T09:00:00
         */
        toDateTime?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Pageable list of visit ids is returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageVisitIdResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getVisitBalanceAdjustment: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Visit balance adjustment id
         * @example 5
         */
        visitBalanceAdjustmentId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Visit balance adjustment returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VisitBalanceAdjustmentResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_VISIT_BALANCE */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Adjustment does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getVisitBalanceByIdToMigrate: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Visit balance (offender booking) id.
         * @example 12345
         */
        visitBalanceId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Visit balance returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerVisitBalanceResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_VISIT_BALANCE */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prisoner does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  findVisitBalanceIds: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /** @description Prison id */
        prisonId?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageVisitBalanceIdResponse']
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_VISIT_BALANCE */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getScreenConditions: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The name of the screen (module)
         * @example OIDINCRS
         */
        moduleName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SplashScreenDto']
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_SCREEN_ACCESS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getBlockedPrisons: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The name of the screen (module)
         * @example OIDINCRS
         */
        moduleName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonDto'][]
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_SCREEN_ACCESS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found if the screen (module) name does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getServicePrisons: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The code of the service from the EXTERNAL_SERVICES table */
        serviceCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonDetails'][]
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role SYNCHRONISATION_REPORTING */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMaxCourseScheduleId: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Max CRS_SCH_ID returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getQuestionnaire: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Incident Questionnaire id */
        questionnaireId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['QuestionnaireResponse']
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_INCIDENTS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getIdsByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /**
         * @description Filter results by those that were created on or after the given date
         * @example 2021-11-03
         */
        fromDate?: string
        /**
         * @description Filter results by those that were created on or before the given date
         * @example 2021-11-03
         */
        toDate?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Pageable list of ids are returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageQuestionnaireIdResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_INCIDENTS not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonIncentiveLevels: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The prison ID */
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['IncentiveLevel'][]
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role SYNCHRONISATION_REPORTING */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prison not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getVisitBalanceToMigrate: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Prison number aka Offender No.
         * @example A1234AK
         */
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Visit balance returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerVisitBalanceResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_VISIT_BALANCE */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prisoner does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonerDetails: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender Noms Id
         * @example A1234ZZ
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description prisoner details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerDetails']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_ALERTS not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prisoner not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffenderCharge: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender Charge id
         * @example 12345
         */
        offenderChargeId: number
        /**
         * @description Offender No
         * @example 12345
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description the court appearance details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['OffenderChargeResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Offender not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCourtCase: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Court case id
         * @example 12345
         */
        id: number
        /**
         * @description Offender No
         * @example 12345
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description the court case details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtCaseResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Offender not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteCourtCase: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Court case id
         * @example 12345
         */
        id: number
        /**
         * @description Offender No
         * @example AB2134
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description court case deleted */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCourtAppearance: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Court appearance id
         * @example 12345
         */
        id: number
        /**
         * @description Offender No
         * @example 12345
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description the court appearance details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtEventResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Offender not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCourtEventCharge: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender Charge id
         * @example 12345
         */
        chargeId: number
        /**
         * @description Event id
         * @example 12345
         */
        eventId: number
        /**
         * @description Offender No
         * @example AB12345
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description the court appearance details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtEventChargeResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Court Appearance not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonerMerges: {
    parameters: {
      query?: {
        /** @description The earliest date to search for merges from */
        fromDate?: string
      }
      header?: never
      path: {
        /**
         * @description Offender Noms Id
         * @example A1234ZZ
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description list of prisoner merges */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['MergeDetail'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role SYNCHRONISATION_REPORTING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCSIPsForPrisoner: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender No AKA prisoner number
         * @example A1234AK
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description CSIPs Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerCSIPsResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CSIP */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prisoner does not exist or has no csips */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonerWithContacts: {
    parameters: {
      query?: {
        /**
         * @description When true only return contacts that are active
         * @example false
         */
        'active-only'?: boolean
        /**
         * @description When true only return contacts that related to latest booking
         * @example false
         */
        'latest-booking-only'?: boolean
      }
      header?: never
      path: {
        /**
         * @description Offender No aka prisoner number
         * @example A1234KT
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Contacts Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerWithContacts']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCaseNotesForPrisonerForReconciliation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender No AKA prisoner number
         * @example A3745XD
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Case notes Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerCaseNotesResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CASENOTES */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prisoner does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPreviousBooking: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender Noms Id
         * @example A1234ZZ
         */
        offenderNo: string
        /**
         * @description Booking Id
         * @example 123
         */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Ids of booking */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PreviousBookingId']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_ALERTS not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Booking or prisoner does not exist or has no previous booking */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAlertsToMigrate: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender No AKA prisoner number
         * @example A1234AK
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Alerts Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerAlertsResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prisoner does not exist or has no bookings */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getActiveAlertsForReconciliation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender No AKA prisoner number
         * @example A1234AK
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Active Alerts Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerAlertsResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Prisoner does not exist or has no bookings */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonerIdentifiers: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /** @description When true only return active prisoners currently in prison else all prisoners that at some point has been in prison are returned */
        active?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description paged list of prisoner ids */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PagePrisonerIds']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role SYNCHRONISATION_REPORTING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAllPrisoners: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description paged list of prisoner ids */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PagePrisonerId']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role SYNCHRONISATION_REPORTING, 'ROLE_NOMIS_SENTENCING' or ROLE_NOMIS_ALERTS not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAllPrisonersFromId: {
    parameters: {
      query?: {
        /**
         * @description If supplied get offenders starting after this id
         * @example 1555999
         */
        offenderId?: number
        /** @description Number of offenders to get */
        pageSize?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description list of prisoner ids */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerNosWithLast']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role SYNCHRONISATION_REPORTING or ROLE_NOMIS_ALERTS not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getActivePrisonerIdentifiers: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description paged list of prisoner ids */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PagePrisonerIds']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role SYNCHRONISATION_REPORTING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getActiveAdjustments: {
    parameters: {
      query: {
        /** @description Indicate if should return just active adjustments */
        'active-only': boolean
      }
      header?: never
      path: {
        /**
         * @description NOMIS booking Id
         * @example 12345
         */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description the list of adjustments details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SentencingAdjustmentsResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAdjudicationHearingResultAward: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS booking Id
         * @example 12345
         */
        bookingId: number
        /**
         * @description Nomis sanction sequence
         * @example 1
         */
        sanctionSequence: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Hearing result award Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AdjudicationResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Hearing result award does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAdjudicationADASummary: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS booking Id
         * @example 12345
         */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description ADA Summary award Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AdjudicationADAAwardSummaryResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Booking does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAlertsByBookingId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Booking id
         * @example 12345
         */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Alerts Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BookingAlertsResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Booking does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPersonIds: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /**
         * @description Filter results by persons that were created on or after the given date
         * @example 2021-11-03
         */
        fromDate?: string
        /**
         * @description Filter results by persons that were created on or before the given date
         * @example 2021-11-03
         */
        toDate?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Page of person Ids */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PagePersonIdResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getNonAssociation: {
    parameters: {
      query?: {
        /**
         * @description Sequence number. If present, get this detail record, otherwise get the open record if there is one.
         * @example 2
         */
        typeSequence?: number
      }
      header?: never
      path: {
        /**
         * @description Offender
         * @example A3456GH
         */
        offenderNo: string
        /**
         * @description Non-association offender
         * @example A4578ED
         */
        nsOffenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Non-association information */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NonAssociationResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_NON_ASSOCIATIONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No open non-association exists for these offender numbers, or one of the offenders does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getNonAssociationDetails: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Offender
         * @example A3456GH
         */
        offenderNo: string
        /**
         * @description Non-association offender
         * @example A4578ED
         */
        nsOffenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description List of non-associations */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NonAssociationResponse'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_NON_ASSOCIATIONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Non-association does not exist, or one of the offenders does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getNonAssociationsByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Pageable list of composite ids are returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageNonAssociationIdResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_NON_ASSOCIATIONS not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getByBookingId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Booking ID
         * @example 12345
         */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description List of non-associations */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NonAssociationIdResponse'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_NON_ASSOCIATIONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No non-associations found for the given booking ID */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Location id
         * @example 12345678
         */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Location information */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LocationResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, correct role not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No location exists for this id */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocationByKey: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Location id
         * @example LEI-B-3-014
         */
        key: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Location information */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LocationResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, correct role not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No location exists for this id */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocationsByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Pageable list of ids is returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageLocationIdResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role ROLE_NOMIS_LOCATIONS not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getIncident: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Incident id */
        incidentId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['IncidentResponse']
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_INCIDENTS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOpenIncidentIdsForReconciliation: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
      }
      header?: never
      path: {
        /**
         * @description Agency Id
         * @example LEI
         */
        agencyId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Pageable list of reconciliation ids are returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageIncidentIdResponse']
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_INCIDENTS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getIncidentCountsForReconciliation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Agency Id
         * @example LEI
         */
        agencyId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Reconciliation data returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['IncidentsReconciliationResponse']
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_INCIDENTS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getIncidentAgencies: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['IncidentAgencyId'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getIdsByFilter_1: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /**
         * @description Filter results by those that were created on or after the given date
         * @example 2021-11-03
         */
        fromDate?: string
        /**
         * @description Filter results by those that were created on or before the given date
         * @example 2021-11-03
         */
        toDate?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Pageable list of ids are returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageIncidentIdResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_INCIDENTS not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getIncidentsForBooking: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description booking id */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['IncidentResponse'][]
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_INCIDENTS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getIncentivesByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /**
         * @description Filter results by incentives that were created on or after the given date
         * @example 2021-11-03
         */
        fromDate?: string
        /**
         * @description Filter results by incentives that were created on or before the given date
         * @example 2021-11-03
         */
        toDate?: string
        /**
         * @description if true only retrieve latest incentive for each prisoner
         * @example true
         */
        latestOnly?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Pageable list of composite ids are returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageIncentiveIdResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getIncentive: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS booking Id
         * @example 12345
         */
        bookingId: number
        /**
         * @description NOMIS Incentive sequence
         * @example 1
         */
        incentiveSequence: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description the incentive level details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['IncentiveResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCurrentIncentive: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS booking Id
         * @example 12345
         */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description the incentive level details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['IncentiveResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getDocument: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The document id */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/octet-stream': string
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_DOCUMENTS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Document not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getDocumentIds: {
    parameters: {
      query: {
        /**
         * @description The unique name of the template used for a document - this is a repeatable request parameter
         * @example CSIP_FAC
         */
        templateName: string[]
      }
      header?: never
      path: {
        /** @description The booking id */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DocumentIdResponse'][]
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_DOCUMENTS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCSIP: {
    parameters: {
      query?: {
        includeDocumentIds?: boolean
      }
      header?: never
      path: {
        /** @description CSIP id */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['CSIPResponse']
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_CSIP */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getIdsByFilter_2: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /**
         * @description Filter results by those that were created on or after the given date
         * @example 2021-11-03
         */
        fromDate?: string
        /**
         * @description Filter results by those that were created on or before the given date
         * @example 2021-11-03
         */
        toDate?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Pageable list of ids are returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PageCSIPIdResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_CSIP not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCSIPFactor: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description CSIP Factor id */
        csipFactorId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CSIPFactorResponse']
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_CSIP */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteCSIPFactor: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description CSIP Factor Id
         * @example 12345
         */
        csipFactorId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Csip factor Deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CSIP */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCSIPCount: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': number
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_CSIP */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCSIPIdsForBooking: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description booking id */
        bookingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['CSIPIdResponse'][]
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_CSIP */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCourtCaseForMigration: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Court case id
         * @example 12345
         */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description the court case details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtCaseResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Court case not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCourtCaseIdsByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /**
         * @description Filter results by court cases that were created on or after the given date
         * @example 2021-11-03
         */
        fromDate?: string
        /**
         * @description Filter results by court cases that were created on or before the given date
         * @example 2021-11-03
         */
        toDate?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Pageable list of ids are returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageCourtCaseIdResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role ROLE_NOMIS_SENTENCING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCorporateIds: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /**
         * @description Filter results by corporate that were created on or after the given date
         * @example 2021-11-03
         */
        fromDate?: string
        /**
         * @description Filter results by corporate that were created on or before the given date
         * @example 2021-11-03
         */
        toDate?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Page of corporate Ids */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageCorporateOrganisationIdResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getOffender: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Prison number aka noms id / offender id display
         * @example A1234BC
         */
        prisonNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Core person information returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CorePerson']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CORE_PERSON */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Offender does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAllLatestBookingsFromId: {
    parameters: {
      query?: {
        /**
         * @description If supplied get offenders starting after this id
         * @example 1555999
         */
        bookingId?: number
        /**
         * @description If supplied only return bookings that are still active
         * @example true
         */
        activeOnly?: boolean
        /** @description Number of bookings to get */
        pageSize?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description list of prisoner ids containing bookingId and offenderNo */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['BookingIdsWithLast']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role SYNCHRONISATION_REPORTING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAttendanceReconciliationSummary: {
    parameters: {
      query: {
        /** @description Date */
        date: string
      }
      header?: never
      path: {
        /** @description Prison id */
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Reconciliation data returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AttendanceReconciliationResponse']
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAppointmentById: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Event Id
         * @example 12345678
         */
        eventId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Appointment information with created id */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_APPOINTMENTS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Booking, location and timestamp combination does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAppointmentsByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /**
         * @description Filter results by prison ids
         * @example ['MDI','LEI']
         */
        prisonIds: string[]
        /**
         * @description Filter results by appointments that were created on or after the given date
         * @example 2021-11-03
         */
        fromDate?: string
        /**
         * @description Filter results by appointments that were created on or before the given date
         * @example 2022-04-11
         */
        toDate?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Pageable list of composite ids are returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageAppointmentIdResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAppointmentCounts: {
    parameters: {
      query: {
        /**
         * @description Filter results by prison ids
         * @example ['MDI','LEI']
         */
        prisonIds: string[]
        /**
         * @description Filter results by appointments that were created on or after the given date
         * @example 2021-11-03
         */
        fromDate?: string
        /**
         * @description Filter results by appointments that were created on or before the given date
         * @example 2022-04-11
         */
        toDate?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Appointment counts returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentCountsResponse'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAppointment: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS booking Id
         * @example 1234567
         */
        bookingId: number
        /**
         * @description Appointment room internal location Id
         * @example 1234567
         */
        locationId: number
        /**
         * @description Appointment date and start time
         * @example 2023-02-27T14:40
         */
        dateTime: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Appointment information with created id */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_APPOINTMENTS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Booking, location and timestamp combination does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAllocation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Allocation id */
        allocationId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['GetAllocationResponse']
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  findSuspendedAllocations: {
    parameters: {
      query: {
        /** @description Prison id */
        prisonId: string
        /** @description Course Activity ID */
        courseActivityId?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['FindSuspendedAllocationsResponse'][]
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAllocationReconciliationSummary: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Prison id */
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Reconciliation data returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AllocationReconciliationResponse']
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  findAllocationsWithMissingPayBands: {
    parameters: {
      query: {
        /** @description Prison id */
        prisonId: string
        /** @description Course Activity ID */
        courseActivityId?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['FindAllocationsMissingPayBandsResponse'][]
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  findActiveAllocations: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /** @description Prison id */
        prisonId: string
        /** @description Course Activity ID */
        courseActivityId?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageFindActiveAllocationIdsResponse']
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAdjustmentsByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /**
         * @description Filter results by adjustments that were created on or after the given date
         * @example 2021-11-03
         */
        fromDate?: string
        /**
         * @description Filter results by adjustments that were created on or before the given date
         * @example 2021-11-03
         */
        toDate?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Pageable list of ids are returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageAdjustmentIdResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAdjudicationHearing: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS Hearing Id
         * @example 12345
         */
        hearingId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Hearing Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AdjudicationResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Hearing does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAdjudicationHearingResult: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS Hearing Id
         * @example 12345
         */
        hearingId: number
        /**
         * @description Nomis charge sequence
         * @example 1
         */
        chargeSequence: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Hearing Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AdjudicationResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Hearing result does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAdjudicationChargeIdsByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /**
         * @description Filter results by adjudication charges that were created on or after the given date
         * @example 2021-11-03
         */
        fromDate?: string
        /**
         * @description Filter results by adjudication charges that were created on or before the given date
         * @example 2021-11-03
         */
        toDate?: string
        /**
         * @description Filter results by adjudication charges that were created in one of the given prisons
         * @example MDI
         */
        prisonIds?: string[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Pageable list of ids are returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageAdjudicationChargeIdResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint when role NOMIS_ADJUDICATIONS not present */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAdjudication: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Adjudication Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AdjudicationResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Adjudication does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAdjudicationByCharge: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: number
        /**
         * @description Charge sequence
         * @example 1
         */
        chargeSequence: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Adjudication with charge information returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AdjudicationChargeResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Adjudication or adjudication charge does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  findActivitiesWithoutScheduleRules: {
    parameters: {
      query: {
        /** @description Prison id */
        prisonId: string
        /** @description Course Activity ID */
        courseActivityId?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['FindActivitiesWithoutScheduleRulesResponse'][]
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  findRatesWithUnknownIncentiveLevel: {
    parameters: {
      query: {
        /** @description Prison id */
        prisonId: string
        /** @description Course Activity ID */
        courseActivityId?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['FindPayRateWithUnknownIncentiveResponse'][]
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  findActiveActivities: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /** @description Prison id */
        prisonId: string
        /** @description Course Activity ID */
        courseActivityId?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageFindActiveActivityIdsResponse']
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteIncident: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Incident deleted */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteCSIP: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description CSIP Factor Id
         * @example 12345
         */
        csipId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Csip report Deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CSIP */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteCorporateType: {
    parameters: {
      query?: never
      header?: never
      path: {
        corporateId: number
        typeCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Corporate type deleted (or did not exist) */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Corporate does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteAttendance_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        eventId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Attendance is deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteAllocation: {
    parameters: {
      query?: never
      header?: never
      path: {
        referenceId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Allocation is deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
