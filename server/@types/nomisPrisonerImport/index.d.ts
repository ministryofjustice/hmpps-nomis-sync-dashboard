/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/prisoners/{offenderNo}/visits/{visitId}/cancel': {
    put: operations['cancelVisit']
  }
  '/prisoners/{offenderNo}/visits': {
    /** Creates a new visit and decrements the visit balance. */
    post: operations['createVisit']
  }
  '/visits/{visitId}': {
    /** Retrieves a visit by id. */
    get: operations['getVisit']
  }
  '/visits/rooms/usage-count': {
    /** Retrieves a list of rooms with usage count for the (filtered) visits */
    get: operations['getVisitRoomCountsByFilter']
  }
  '/visits/ids': {
    /** Retrieves a paged list of visits by filter */
    get: operations['getVisitsByFilter']
  }
  '/incentives/ids': {
    /** Retrieves a paged list of incentive composite ids by filter. Requires ROLE_NOMIS_INCENTIVES. */
    get: operations['getIncentivesByFilter']
  }
  '/incentives/booking-id/{bookingId}/incentive-sequence/{incentiveSequence}': {
    /** Retrieves a created incentive level for a prisoner. Requires ROLE_NOMIS_INCENTIVES. */
    get: operations['getIncentive']
  }
}

export interface components {
  schemas: {
    ErrorResponse: {
      /** Format: int32 */
      status: number
      /** Format: int32 */
      errorCode?: number
      userMessage?: string
      developerMessage?: string
      moreInfo?: string
    }
    /** @description Visit cancellation */
    CancelVisitRequest: {
      /**
       * @description The cancellation reason
       * @enum {string}
       */
      outcome: 'VISCANC' | 'OFFCANC' | 'ADMIN' | 'NSHOW'
    }
    /** @description Visit creation request */
    CreateVisitRequest: {
      /**
       * @description Visit start date and time
       * @example 2021-07-05T10:35:17
       */
      startDateTime: string
      /**
       * @description Visit end time
       * @example 14:30
       */
      endTime: string
      /** @description Prison where the visit is to occur */
      prisonId: string
      /** @description Visitors */
      visitorPersonIds: number[]
      /** @description Whether visit is a privileged one */
      privileged: boolean
      /**
       * @description Visit type, whether social or official
       * @enum {string}
       */
      visitType: 'SCON' | 'OFFI'
      /**
       * Format: date
       * @description Issue date
       */
      issueDate: string
      /** @description Comment to be added to visit */
      visitComment: string
      /** @description Comment to be added to visit order (if one is created) */
      visitOrderComment: string
      /** @description Name of the real world room where visit will take place */
      room: string
      /**
       * @description Whether visit is restricted to a closed session
       * @enum {string}
       */
      openClosedStatus: 'OPEN' | 'CLOSED'
    }
    /** @description Visit creation response */
    CreateVisitResponse: {
      /**
       * Format: int64
       * @description The created Nomis visit id
       */
      visitId: number
    }
    /** @description NOMIS room */
    CodeDescription: {
      code: string
      description: string
    }
    /** @description the lead visitor */
    LeadVisitor: {
      /**
       * Format: int64
       * @description visitor NOMIS person Id
       */
      personId: number
      /** @description full name of visitor */
      fullName: string
      /** @description Ordered list of telephone numbers for contact with latest first */
      telephones: string[]
    }
    /** @description Visit information */
    VisitResponse: {
      /**
       * Format: int64
       * @description The visit id
       */
      visitId: number
      /** @description The offender number, aka nomsId, prisonerId */
      offenderNo: string
      /**
       * @description Visit start date and time
       * @example 2021-07-05T10:35:17
       */
      startDateTime: string
      /**
       * @description Visit end date and time
       * @example 2021-07-05T10:35:17
       */
      endDateTime: string
      /** @description Prison where the visit is to occur */
      prisonId: string
      /** @description Visitors */
      visitors: components['schemas']['Visitor'][]
      leadVisitor?: components['schemas']['LeadVisitor']
      visitType: components['schemas']['CodeDescription']
      visitStatus: components['schemas']['CodeDescription']
      visitOutcome?: components['schemas']['CodeDescription']
      agencyInternalLocation?: components['schemas']['CodeDescription']
      /** @description Visit comments */
      commentText?: string
      /** @description Visitor concerns text */
      visitorConcernText?: string
    }
    /** @description Visitors */
    Visitor: {
      /**
       * Format: int64
       * @description visitor NOMIS person Id
       */
      personId: number
      /** @description Indicates lead visitor for the visit */
      leadVisitor: boolean
    }
    Pageable: {
      /** Format: int32 */
      page?: number
      /** Format: int32 */
      size?: number
      sort?: string[]
    }
    /** @description Visit id */
    VisitRoomCountResponse: {
      /** @description The internal location description */
      agencyInternalLocationDescription: string
      /**
       * Format: int64
       * @description The room usage count
       */
      count: number
      /** @description The prison id */
      prisonId: string
    }
    PageVisitIdResponse: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      size?: number
      content?: components['schemas']['VisitIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      first?: boolean
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      last?: boolean
      empty?: boolean
    }
    PageableObject: {
      /** Format: int64 */
      offset?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      pageSize?: number
      /** Format: int32 */
      pageNumber?: number
      paged?: boolean
      unpaged?: boolean
    }
    SortObject: {
      empty?: boolean
      sorted?: boolean
      unsorted?: boolean
    }
    /** @description Visit id */
    VisitIdResponse: {
      /**
       * Format: int64
       * @description The visit id
       */
      visitId: number
    }
    /** @description Incentive id */
    IncentiveIdResponse: {
      /**
       * Format: int64
       * @description The booking id
       */
      bookingId: number
      /**
       * Format: int64
       * @description The sequence of the incentive within this booking
       */
      sequence: number
    }
    PageIncentiveIdResponse: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      size?: number
      content?: components['schemas']['IncentiveIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      first?: boolean
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      last?: boolean
      empty?: boolean
    }
    /** @description Incentive information */
    IncentiveResponse: {
      /**
       * Format: int64
       * @description The booking id
       */
      bookingId: number
      /**
       * Format: int64
       * @description The sequence of the incentive within this booking
       */
      incentiveSequence: number
      /** @description Comment for Incentive level */
      commentText?: string
      /**
       * @description Date and time of Incentive level creation
       * @example 2021-07-05T10:35:17
       */
      iepDateTime: string
      /** @description Prison where the Incentive level was created */
      prisonId: string
      iepLevel: components['schemas']['CodeDescription']
      /** @description User id of user creating prisoner incentive level */
      userId?: string
    }
  }
}

export interface operations {
  cancelVisit: {
    parameters: {
      path: {
        /** Offender Noms Id */
        offenderNo: string
        /** Nomis Visit Id */
        visitId: string
      }
    }
    responses: {
      /** Visit cancelled */
      200: unknown
      /** Invalid cancellation reason */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** VSIP visit id not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CancelVisitRequest']
      }
    }
  }
  /** Creates a new visit and decrements the visit balance. */
  createVisit: {
    parameters: {
      path: {
        /** Offender Noms Id */
        offenderNo: string
      }
    }
    responses: {
      /** Visit information with created id */
      201: {
        content: {
          'application/json': components['schemas']['CreateVisitResponse']
        }
      }
      /** Prison or person ids do not exist */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** offenderNo does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateVisitRequest']
      }
    }
  }
  /** Retrieves a visit by id. */
  getVisit: {
    parameters: {
      path: {
        /** Nomis Visit Id */
        visitId: string
      }
    }
    responses: {
      /** Visit Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['VisitResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** visit does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieves a list of rooms with usage count for the (filtered) visits */
  getVisitRoomCountsByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /** Filter results by prison ids (returns all prisons if not specified) */
        prisonIds?: string[]
        /** Filter results by visitType (returns all types if not specified) */
        visitTypes?: string[]
        /** Filter results by visits that start on or after the given timestamp */
        fromDateTime?: string
        /** Filter results by visits that start on or before the given timestamp */
        toDateTime?: string
      }
    }
    responses: {
      /** list of visit room and count is returned */
      200: {
        content: {
          'application/json': components['schemas']['VisitRoomCountResponse'][]
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieves a paged list of visits by filter */
  getVisitsByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /** Filter results by prison ids (returns all prisons if not specified) */
        prisonIds?: string[]
        /** Filter results by visitType (returns all types if not specified) */
        visitTypes?: string[]
        /** Filter results by visits that start on or after the given timestamp */
        fromDateTime?: string
        /** Filter results by visits that start on or before the given timestamp */
        toDateTime?: string
        /** if true exclude visits without an associated room (visits created during the VSIP synchronisation process) */
        ignoreMissingRoom?: boolean
      }
    }
    responses: {
      /** Pageable list of visit ids is returned */
      200: {
        content: {
          'application/json': components['schemas']['PageVisitIdResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieves a paged list of incentive composite ids by filter. Requires ROLE_NOMIS_INCENTIVES. */
  getIncentivesByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /** Filter results by incentives that were assigned on or after the given date */
        fromDate?: string
        /** Filter results by incentives that were assigned on or before the given date */
        toDate?: string
        /** if true only retrieve latest incentive for each prisoner */
        latestOnly?: boolean
      }
    }
    responses: {
      /** Pageable list of composite ids are returned */
      200: {
        content: {
          'application/json': components['schemas']['PageIncentiveIdResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieves a created incentive level for a prisoner. Requires ROLE_NOMIS_INCENTIVES. */
  getIncentive: {
    parameters: {
      path: {
        /** NOMIS booking Id */
        bookingId: string
        /** NOMIS Incentive sequence */
        incentiveSequence: string
      }
    }
    responses: {
      /** the incentive level details */
      200: {
        content: {
          'application/json': components['schemas']['IncentiveResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
