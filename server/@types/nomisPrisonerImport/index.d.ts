/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/sentence-adjustments/{adjustmentId}': {
    /** Requires role NOMIS_SENTENCING. Retrieves a sentence adjustment by id */
    get: operations['getSentenceAdjustment']
    /** Requires role NOMIS_SENTENCING. Updates a sentence adjustment by id */
    put: operations['updateSentenceAdjustment']
    /** Requires role NOMIS_SENTENCING. Deletes a sentence adjustment by id */
    delete: operations['deleteSentenceAdjustment']
  }
  '/prisoners/{offenderNo}/visits/{visitId}': {
    /** Updates details of an existing visit such as the visitors and time slot */
    put: operations['updateVisit']
  }
  '/prisoners/{offenderNo}/visits/{visitId}/cancel': {
    put: operations['cancelVisit']
  }
  '/key-date-adjustments/{adjustmentId}': {
    /** Requires role NOMIS_SENTENCING. Retrieves a key date adjustment by id */
    get: operations['getKeyDateAdjustment']
    /** Requires role NOMIS_SENTENCING. Updates a sentence adjustment by id */
    put: operations['updateKeyDateAdjustment']
    /** Requires role NOMIS_SENTENCING. Deletes a key date adjustment by id */
    delete: operations['deleteKeyDateAdjustment']
  }
  '/incentives/reference-codes/{code}': {
    /** Gets a global incentive level by provided code and domain of IEP_LEVEL */
    get: operations['getGlobalIncentiveLevel']
    /** Updates an existing global incentive level, updateable fields are description and active */
    put: operations['updateGlobalIncentiveLevel']
  }
  '/incentives/prison/{prison}/code/{code}': {
    /** Gets prison incentive level data by provided code and prison */
    get: operations['getPrisonIncentiveLevel']
    /** Creates incentive level data associated with a Prison */
    put: operations['updatePrisonIncentiveLevelData']
  }
  '/appointments/{nomisEventId}': {
    /** Updates an existing appointment. Requires role NOMIS_APPOINTMENTS */
    put: operations['updateAppointment']
    /** Deletes an existing appointment by actually deleting from the table. Intended for appointments created in error. Requires role NOMIS_APPOINTMENTS */
    delete: operations['deleteAppointment']
  }
  '/appointments/{nomisEventId}/cancel': {
    /** Cancels an existing appointment. Requires role NOMIS_APPOINTMENTS */
    put: operations['cancelAppointment']
  }
  '/activities/{courseActivityId}': {
    /** Updates an activity and associated pay rates. Requires role NOMIS_ACTIVITIES */
    put: operations['updateActivity']
  }
  '/activities/{courseActivityId}/schedules': {
    /** Recreates schedules from tomorrow. Requires role NOMIS_ACTIVITIES */
    put: operations['updateSchedules']
  }
  '/activities/{courseActivityId}/schedule': {
    /** Updates a course schedule. Requires role NOMIS_ACTIVITIES */
    put: operations['updateCourseSchedule']
  }
  '/activities/{courseActivityId}/allocations': {
    /** Updates a prisoner's allocation to an activity. Requires role NOMIS_ACTIVITIES */
    put: operations['updateAllocation']
    /** Allocates a prisoner to an activity. Requires role NOMIS_ACTIVITIES */
    post: operations['createAllocation']
  }
  '/prisoners/{offenderNo}/visits': {
    /** Creates a new visit and decrements the visit balance. */
    post: operations['createVisit']
  }
  '/prisoners/booking-id/{bookingId}/sentences/{sentenceSequence}/adjustments': {
    /** Required role NOMIS_SENTENCING Creates a new sentence adjustment (aka Debit/Credit). Key dates will not be recalculated as a side effect of this operation */
    post: operations['createSentenceAdjustment']
  }
  '/prisoners/booking-id/{bookingId}/incentives': {
    /** Creates a new incentive using next sequence no. */
    post: operations['createIncentive']
  }
  '/prisoners/booking-id/{bookingId}/adjustments': {
    /** Required role NOMIS_SENTENCING Creates a new key date adjustment. Key dates will be recalculated as a side effect of this operation */
    post: operations['createKeyDateAdjustment']
  }
  '/incentives/reference-codes': {
    /** Creates a new global incentive level */
    post: operations['createGlobalIncentiveLevel']
  }
  '/incentives/reference-codes/reorder': {
    /** reorders all global incentive levels using provided list of Incentive codes, including inactive. 1-based index */
    post: operations['reorderGlobalIncentiveLevels']
  }
  '/incentives/prison/{prison}': {
    /** Creates incentive level data associated with a Prison */
    post: operations['createPrisonIncentiveLevelData']
  }
  '/appointments': {
    /** Creates a new appointment. Requires role NOMIS_APPOINTMENTS */
    post: operations['createAppointment']
  }
  '/activities': {
    /** Creates a new activity and associated pay rates. Requires role NOMIS_ACTIVITIES */
    post: operations['createActivity']
  }
  '/activities/{courseActivityId}/booking/{bookingId}/attendance': {
    /** Creates or updates an attendance for the booking and schedule. Requires role NOMIS_ACTIVITIES */
    post: operations['upsertAttendance']
  }
  '/activities/{courseActivityId}/booking/{bookingId}/attendance-status': {
    /** Returns the current event status of a Nomis attendance record. Requires role NOMIS_ACTIVITIES */
    post: operations['getAttendanceStatus']
  }
  '/visits/{visitId}': {
    /** Retrieves a visit by id. */
    get: operations['getVisit']
  }
  '/visits/rooms/usage-count': {
    /** Retrieves a list of rooms with usage count for the (filtered) visits. Only future visits are included */
    get: operations['getVisitRoomCountsByFilter']
  }
  '/visits/ids': {
    /** Retrieves a paged list of visits by filter */
    get: operations['getVisitsByFilter']
  }
  '/prisoners/ids': {
    /** Requires role SYNCHRONISATION_REPORTING. */
    get: operations['getPrisonerIdentifiers']
  }
  '/incentives/ids': {
    /** Retrieves a paged list of incentive composite ids by filter. Requires ROLE_NOMIS_INCENTIVES. */
    get: operations['getIncentivesByFilter']
  }
  '/incentives/booking-id/{bookingId}/incentive-sequence/{incentiveSequence}': {
    /** Retrieves a created incentive level for a prisoner. Requires ROLE_NOMIS_INCENTIVES. */
    get: operations['getIncentive']
  }
  '/incentives/booking-id/{bookingId}/current': {
    /** Retrieves the current incentive level (by booking) for a prisoner. Requires ROLE_NOMIS_INCENTIVES. */
    get: operations['getCurrentIncentive']
  }
  '/appointments/{eventId}': {
    /** Get an appointment given the unique event id. Requires role NOMIS_APPOINTMENTS */
    get: operations['getAppointmentById']
  }
  '/appointments/ids': {
    /** Retrieves a paged list of incentive composite ids by filter. Requires ROLE_NOMIS_APPOINTMENTS. */
    get: operations['getAppointmentsByFilter']
  }
  '/appointments/booking/{bookingId}/location/{locationId}/start/{dateTime}': {
    /** Get an appointment given the booking id, internal location, date and start time. Requires role NOMIS_APPOINTMENTS */
    get: operations['getAppointment']
  }
  '/adjustments/ids': {
    /** Retrieves a paged list of adjustment ids by filter. Requires ROLE_NOMIS_SENTENCING. */
    get: operations['getAdjustmentsByFilter']
  }
}

export interface components {
  schemas: {
    ErrorResponse: {
      /** Format: int32 */
      status: number
      /** Format: int32 */
      errorCode?: number
      userMessage?: string
      developerMessage?: string
      moreInfo?: string
    }
    /** @description Sentence adjustment update request */
    UpdateSentenceAdjustmentRequest: {
      /**
       * @description NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS
       * @example RX
       * @enum {string}
       */
      adjustmentTypeCode: 'RSR' | 'UR' | 'S240A' | 'RST' | 'RX'
      /**
       * Format: date
       * @description Date adjustment is applied
       */
      adjustmentDate?: string
      /**
       * Format: date
       * @description Start of the period which contributed to the adjustment
       */
      adjustmentFromDate?: string
      /**
       * Format: int64
       * @description Number of days for the adjustment
       */
      adjustmentDays: number
      /** @description Comment */
      comment?: string
      /**
       * @description Flag to indicate if the adjustment is being applied
       * @default true
       */
      active: boolean
    }
    /** @description Visit update request */
    UpdateVisitRequest: {
      /**
       * @description Visit start date and time
       * @example 2021-07-05T10:35:17
       */
      startDateTime: string
      /**
       * @description Visit end time
       * @example 14:30
       */
      endTime: string
      /** @description Visitors */
      visitorPersonIds: number[]
      /** @description Name of the real world room where visit will take place */
      room: string
      /**
       * @description Whether visit is restricted to a closed session
       * @enum {string}
       */
      openClosedStatus: 'OPEN' | 'CLOSED'
    }
    /** @description Visit cancellation */
    CancelVisitRequest: {
      /**
       * @description The cancellation reason
       * @enum {string}
       */
      outcome: 'VISCANC' | 'OFFCANC' | 'ADMIN' | 'NSHOW'
    }
    /** @description Key date adjustment update request */
    UpdateKeyDateAdjustmentRequest: {
      /**
       * @description NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS
       * @example ADA
       * @enum {string}
       */
      adjustmentTypeCode: 'LAL' | 'UAL' | 'RADA' | 'ADA' | 'SREM'
      /**
       * Format: date
       * @description Date adjustment is applied
       */
      adjustmentDate?: string
      /**
       * Format: date
       * @description Start of the period which contributed to the adjustment
       */
      adjustmentFromDate: string
      /**
       * Format: int64
       * @description Number of days for the adjustment
       */
      adjustmentDays: number
      /** @description Comment */
      comment?: string
      /**
       * @description Flag to indicate if the adjustment is being applied
       * @default true
       */
      active: boolean
    }
    /** @description IEP creation request */
    CreateIncentiveRequest: {
      /**
       * @description IEP Level
       * @example Standard
       */
      iepLevel: string
      /**
       * @description Review comments
       * @example A review took place
       */
      comments?: string
      /**
       * @description Date and time when last review took place
       * @example 2021-07-05T10:35:17
       */
      iepDateTime: string
      /**
       * @description Prison ID
       * @example MDI
       */
      prisonId: string
      /**
       * @description Username of the reviewer
       * @example AJONES
       */
      userId: string
    }
    ReferenceCode: {
      code: string
      domain: string
      description: string
      active: boolean
      /** Format: int32 */
      sequence?: number
      parentCode?: string
      /** Format: date */
      expiredDate?: string
      systemDataFlag: boolean
    }
    /** @description Prison Incentive level data create request */
    CreatePrisonIncentiveRequest: {
      /**
       * @description Incentive Level code
       * @example STD
       */
      levelCode: string
      /**
       * @description active status of the Global Incentive Level
       * @example true
       */
      active: boolean
      /**
       * @description default on admission
       * @example true
       */
      defaultOnAdmission: boolean
      /**
       * Format: int32
       * @description The number of weekday visits for a convicted prisoner per fortnight
       * @example 5500
       */
      visitOrderAllowance?: number
      /**
       * Format: int32
       * @description The number of privileged/weekend visits for a convicted prisoner per 4 weeks
       * @example 5500
       */
      privilegedVisitOrderAllowance?: number
      /**
       * Format: int32
       * @description The amount transferred weekly from the private cash account to the spends account for a remand prisoner to use
       * @example 5500
       */
      remandTransferLimitInPence?: number
      /**
       * Format: int32
       * @description The maximum amount allowed in the spends account for a remand prisoner
       * @example 5500
       */
      remandSpendLimitInPence?: number
      /**
       * Format: int32
       * @description The amount transferred weekly from the private cash account to the spends account for a convicted prisoner to use
       * @example 5500
       */
      convictedTransferLimitInPence?: number
      /**
       * Format: int32
       * @description The maximum amount allowed in the spends account for a convicted prisoner
       * @example 5500
       */
      convictedSpendLimitInPence?: number
    }
    /** @description Incentive information */
    PrisonIncentiveLevelDataResponse: {
      prisonId: string
      iepLevelCode: string
      /** Format: int32 */
      visitOrderAllowance?: number
      /** Format: int32 */
      privilegedVisitOrderAllowance?: number
      defaultOnAdmission: boolean
      /** Format: int32 */
      remandTransferLimitInPence?: number
      /** Format: int32 */
      remandSpendLimitInPence?: number
      /** Format: int32 */
      convictedTransferLimitInPence?: number
      /** Format: int32 */
      convictedSpendLimitInPence?: number
      active: boolean
      /** Format: date */
      expiryDate?: string
      visitAllowanceActive?: boolean
      /** Format: date */
      visitAllowanceExpiryDate?: string
    }
    /** @description Offender individual schedule creation request */
    CreateAppointmentRequest: {
      /**
       * Format: int64
       * @description Booking id of the prisoner
       * @example 1234567
       */
      bookingId: number
      /**
       * Format: date
       * @description Appointment date
       * @example 2022-08-12
       */
      eventDate: string
      /**
       * Format: partial-time
       * @description Appointment start time
       * @example 09:45
       */
      startTime: string
      /**
       * Format: partial-time
       * @description Activity end time
       * @example 15:20
       */
      endTime: string
      /**
       * Format: int64
       * @description Room where the appointment is to occur (in cell if null)
       * @example 112233
       */
      internalLocationId: number
      /**
       * @description Appointment event sub-type
       * @example MEOT
       */
      eventSubType: string
    }
    /** @description Course activity creation request pay rates */
    PayRateRequest: {
      /**
       * @description The incentive level
       * @example BAS
       */
      incentiveLevel: string
      /**
       * @description The pay band (1 TO 10)
       * @example 4
       */
      payBand: string
      /**
       * @description The half day rate
       * @example 0.5
       */
      rate: number
    }
    /** @description Course activity creation request schedule rules */
    ScheduleRuleRequest: {
      /**
       * Format: partial-time
       * @description Schedule start time in 24 hour clock
       * @example 08:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description Schedule end time in 24 hour clock
       * @example 11:00
       */
      endTime: string
      /**
       * @description Scheduled on Monday
       * @example true
       */
      monday: boolean
      /**
       * @description Scheduled on Tuesday
       * @example true
       */
      tuesday: boolean
      /**
       * @description Scheduled on Wednesday
       * @example true
       */
      wednesday: boolean
      /**
       * @description Scheduled on Thursday
       * @example true
       */
      thursday: boolean
      /**
       * @description Scheduled on Friday
       * @example true
       */
      friday: boolean
      /**
       * @description Scheduled on Saturday
       * @example false
       */
      saturday: boolean
      /**
       * @description Scheduled on Sunday
       * @example false
       */
      sunday: boolean
    }
    /** @description Course activity update request */
    UpdateActivityRequest: {
      /**
       * Format: date
       * @description Activity start date
       * @example 2022-08-12
       */
      startDate: string
      /**
       * Format: date
       * @description Activity end date
       * @example 2022-08-12
       */
      endDate?: string
      /**
       * Format: int64
       * @description Room where the activity is to occur (from activity schedule)
       */
      internalLocationId?: number
      /**
       * Format: int32
       * @description Capacity of activity (from activity schedule)
       */
      capacity: number
      /** @description Pay rates */
      payRates: components['schemas']['PayRateRequest'][]
      /** @description Description from concatenated activity and activity schedule */
      description: string
      /** @description Minimum Incentive Level */
      minimumIncentiveLevelCode: string
      /**
       * @description Half or Full day (H or F)
       * @example H
       * @enum {string}
       */
      payPerSession: 'F' | 'H'
      /** @description Schedule rules */
      scheduleRules: components['schemas']['ScheduleRuleRequest'][]
      /** @description Exclude bank holidays? */
      excludeBankHolidays: boolean
    }
    /** @description Course activity creation request schedules */
    SchedulesRequest: {
      /**
       * Format: date
       * @description Schedule date
       * @example 2022-08-12
       */
      date: string
      /**
       * Format: partial-time
       * @description Schedule start time in 24 hour clock
       * @example 08:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description Schedule end time in 24 hour clock
       * @example 11:00
       */
      endTime: string
    }
    /** @description Course schedule update update request */
    UpdateCourseScheduleRequest: {
      /**
       * Format: date
       * @description The date of the course schedule
       * @example 2023-04-03
       */
      date: string
      /**
       * Format: partial-time
       * @description The time of the course schedule
       * @example 10:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The time the course schedule ends
       * @example 11:00
       */
      endTime: string
      /**
       * @description Whether the course schedule has been cancelled
       * @example true
       */
      cancelled: boolean
    }
    /** @description Course schedule update update response */
    UpdateCourseScheduleResponse: {
      /**
       * Format: int64
       * @description The id of the course schedule
       * @example 123456
       */
      courseScheduleId: number
    }
    /** @description Course activity update allocation request */
    UpdateAllocationRequest: {
      /**
       * Format: int64
       * @description Booking id of the prisoner currently allocated to the activity
       * @example 1234567
       */
      bookingId: number
      /**
       * Format: date
       * @description Activity end date
       * @example 2022-08-12
       */
      endDate: string
      /**
       * @description Activity end reason (from domain PS_END_RSN)
       * @example REL
       */
      endReason?: string
      /** @description Activity end comment */
      endComment?: string
    }
    /** @description OffenderProgramProfile creation response */
    CreateAllocationResponse: {
      /**
       * Format: int64
       * @description The created OffenderProgramProfile id
       * @example 12345678
       */
      offenderProgramReferenceId: number
    }
    /** @description Visit creation request */
    CreateVisitRequest: {
      /**
       * @description Visit start date and time
       * @example 2021-07-05T10:35:17
       */
      startDateTime: string
      /**
       * @description Visit end time
       * @example 14:30
       */
      endTime: string
      /** @description Prison where the visit is to occur */
      prisonId: string
      /** @description Visitors */
      visitorPersonIds: number[]
      /**
       * @description Visit type, whether social or official
       * @enum {string}
       */
      visitType: 'SCON' | 'OFFI'
      /**
       * Format: date
       * @description Issue date
       */
      issueDate: string
      /** @description Comment to be added to visit */
      visitComment: string
      /** @description Comment to be added to visit order (if one is created) */
      visitOrderComment: string
      /** @description Name of the real world room where visit will take place */
      room: string
      /**
       * @description Whether visit is restricted to a closed session
       * @enum {string}
       */
      openClosedStatus: 'OPEN' | 'CLOSED'
    }
    /** @description Visit creation response */
    CreateVisitResponse: {
      /**
       * Format: int64
       * @description The created Nomis visit id
       */
      visitId: number
    }
    /** @description Sentence adjustment create request */
    CreateSentenceAdjustmentRequest: {
      /**
       * @description NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS
       * @example RX
       * @enum {string}
       */
      adjustmentTypeCode: 'RSR' | 'UR' | 'S240A' | 'RST' | 'RX'
      /**
       * Format: date
       * @description Date adjustment is applied
       */
      adjustmentDate?: string
      /**
       * Format: date
       * @description Start of the period which contributed to the adjustment
       */
      adjustmentFromDate?: string
      /**
       * Format: int64
       * @description Number of days for the adjustment
       */
      adjustmentDays: number
      /** @description Comment */
      comment?: string
      /**
       * @description Flag to indicate if the adjustment is being applied
       * @default true
       */
      active: boolean
    }
    /** @description Create adjustment response */
    CreateAdjustmentResponse: {
      /** Format: int64 */
      id: number
    }
    /** @description Incentive creation response */
    CreateIncentiveResponse: {
      /**
       * Format: int64
       * @description The created Nomis booking and sequence
       */
      bookingId: number
      /** Format: int64 */
      sequence: number
    }
    /** @description Key date adjustment create request */
    CreateKeyDateAdjustmentRequest: {
      /**
       * @description NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS
       * @example ADA
       * @enum {string}
       */
      adjustmentTypeCode: 'LAL' | 'UAL' | 'RADA' | 'ADA' | 'SREM'
      /**
       * Format: date
       * @description Date adjustment is applied
       */
      adjustmentDate?: string
      /**
       * Format: date
       * @description Start of the period which contributed to the adjustment
       */
      adjustmentFromDate: string
      /**
       * Format: int64
       * @description Number of days for the adjustment
       */
      adjustmentDays: number
      /** @description Comment */
      comment?: string
      /**
       * @description Flag to indicate if the adjustment is being applied
       * @default true
       */
      active: boolean
    }
    ReorderRequest: {
      codeList: string[]
    }
    /** @description Course activity creation request */
    CreateActivityRequest: {
      /** @description Code generated from the activity and schedule ids and mapped */
      code: string
      /**
       * Format: date
       * @description Activity start date
       * @example 2022-08-12
       */
      startDate: string
      /**
       * Format: date
       * @description Activity end date
       * @example 2022-08-12
       */
      endDate?: string
      /** @description Prison where the activity is to occur */
      prisonId: string
      /**
       * Format: int64
       * @description Room where the activity is to occur (from activity schedule)
       */
      internalLocationId?: number
      /**
       * Format: int32
       * @description Capacity of activity (from activity schedule)
       */
      capacity: number
      /** @description Pay rates */
      payRates: components['schemas']['PayRateRequest'][]
      /** @description Description from concatenated activity and activity schedule */
      description: string
      /** @description Minimum Incentive Level */
      minimumIncentiveLevelCode: string
      /** @description Program Service code (from activity category) */
      programCode: string
      /**
       * @description Half or Full day (H or F)
       * @example H
       * @enum {string}
       */
      payPerSession: 'F' | 'H'
      /** @description Schedules */
      schedules: components['schemas']['SchedulesRequest'][]
      /** @description Schedule rules */
      scheduleRules: components['schemas']['ScheduleRuleRequest'][]
      /** @description Exclude bank holidays? */
      excludeBankHolidays: boolean
    }
    /** @description Activity creation response */
    CreateActivityResponse: {
      /**
       * Format: int64
       * @description The created course activity id
       */
      courseActivityId: number
    }
    /** @description Course activity create/update request */
    UpsertAttendanceRequest: {
      /**
       * Format: date
       * @description The date of the course schedule
       * @example 2023-04-03
       */
      scheduleDate: string
      /**
       * Format: partial-time
       * @description The time of the course schedule
       * @example 10:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The time the course schedule ends
       * @example 11:00
       */
      endTime: string
      /**
       * @description The status of the attendance
       * @example SCH
       */
      eventStatusCode: string
      /**
       * @description The outcome code for a completed attendance
       * @example ATT
       */
      eventOutcomeCode?: string
      /**
       * @description Comments relating to the attendance
       * @example Disruptive
       */
      comments?: string
      /**
       * @description Whether the absence is excused
       * @default false
       * @example true
       */
      unexcusedAbsence: boolean
      /**
       * @description Whether the absence is authorised
       * @default false
       * @example true
       */
      authorisedAbsence: boolean
      /**
       * @description Whether the attendance is to be paid
       * @default false
       * @example true
       */
      paid: boolean
      /**
       * @description Any bonus pay for the attendance
       * @example 1.5
       */
      bonusPay?: number
    }
    /** @description Attendance create/update response */
    UpsertAttendanceResponse: {
      /**
       * Format: int64
       * @description The attendance event id
       */
      eventId: number
      /**
       * Format: int64
       * @description The course schedule id for the attendance
       */
      courseScheduleId: number
      /** @description Whether or the attendance was created */
      created: boolean
    }
    /** @description Get attendance status request */
    GetAttendanceStatusRequest: {
      /**
       * Format: date
       * @description The date of the course schedule
       * @example 2023-04-03
       */
      scheduleDate: string
      /**
       * Format: partial-time
       * @description The time of the course schedule
       * @example 10:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The time the course schedule ends
       * @example 11:00
       */
      endTime: string
    }
    /** @description Attendance status response */
    GetAttendanceStatusResponse: {
      /** @description The event status for the attendance */
      eventStatus: string
    }
    /** @description Course activity allocation request */
    CreateAllocationRequest: {
      /**
       * Format: int64
       * @description Booking id of the prisoner to be allocated to the activity
       * @example 1234567
       */
      bookingId: number
      /**
       * Format: date
       * @description Activity start date
       * @example 2022-08-12
       */
      startDate: string
      /**
       * Format: date
       * @description Activity end date
       * @example 2022-08-12
       */
      endDate?: string
      /**
       * @description The prisoner's pay band
       * @example 2
       */
      payBandCode: string
    }
    /** @description NOMIS room */
    CodeDescription: {
      code: string
      description: string
    }
    /** @description the lead visitor */
    LeadVisitor: {
      /**
       * Format: int64
       * @description visitor NOMIS person Id
       */
      personId: number
      /** @description full name of visitor */
      fullName: string
      /** @description Ordered list of telephone numbers for contact with latest first */
      telephones: string[]
    }
    /** @description Visit information */
    VisitResponse: {
      /**
       * Format: int64
       * @description The visit id
       */
      visitId: number
      /** @description The offender number, aka nomsId, prisonerId */
      offenderNo: string
      /**
       * @description Visit start date and time
       * @example 2021-07-05T10:35:17
       */
      startDateTime: string
      /**
       * @description Visit end date and time
       * @example 2021-07-05T10:35:17
       */
      endDateTime: string
      /** @description Prison where the visit is to occur */
      prisonId: string
      /** @description Visitors */
      visitors: components['schemas']['Visitor'][]
      leadVisitor?: components['schemas']['LeadVisitor']
      visitType: components['schemas']['CodeDescription']
      visitStatus: components['schemas']['CodeDescription']
      visitOutcome: components['schemas']['CodeDescription']
      agencyInternalLocation: components['schemas']['CodeDescription']
      /** @description Visit comments */
      commentText?: string
      /** @description Visitor concerns text */
      visitorConcernText?: string
      /**
       * @description date and time of creation
       * @example 2021-07-05T10:35:17
       */
      whenCreated: string
      /**
       * @description date and time of last update
       * @example 2021-07-05T10:35:17
       */
      whenUpdated?: string
      /** @description User id for visit creation */
      createUserId: string
      /** @description User id for last visit update */
      modifyUserId?: string
    }
    /** @description Visitors */
    Visitor: {
      /**
       * Format: int64
       * @description visitor NOMIS person Id
       */
      personId: number
      /** @description Indicates lead visitor for the visit */
      leadVisitor: boolean
    }
    Pageable: {
      /** Format: int32 */
      page?: number
      /** Format: int32 */
      size?: number
      sort?: string[]
    }
    /** @description Visit id */
    VisitRoomCountResponse: {
      /** @description The internal location description */
      agencyInternalLocationDescription: string
      /**
       * Format: int64
       * @description The room usage count
       */
      count: number
      /** @description The prison id */
      prisonId: string
    }
    PageVisitIdResponse: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      size?: number
      content?: components['schemas']['VisitIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      first?: boolean
      /** Format: int32 */
      numberOfElements?: number
      last?: boolean
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    PageableObject: {
      /** Format: int64 */
      offset?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      pageSize?: number
      /** Format: int32 */
      pageNumber?: number
      paged?: boolean
      unpaged?: boolean
    }
    SortObject: {
      empty?: boolean
      sorted?: boolean
      unsorted?: boolean
    }
    /** @description Visit id */
    VisitIdResponse: {
      /**
       * Format: int64
       * @description The visit id
       */
      visitId: number
    }
    /** @description Sentence adjustment */
    SentenceAdjustmentResponse: {
      /**
       * Format: int64
       * @description The sentence adjustment id
       */
      id: number
      /**
       * Format: int64
       * @description The booking id
       */
      bookingId: number
      /** @description The offender number, aka nomsId, prisonerId */
      offenderNo: string
      /**
       * Format: int64
       * @description The sequence of the sentence within this booking
       */
      sentenceSequence: number
      adjustmentType: components['schemas']['SentencingAdjustmentType']
      /**
       * Format: date
       * @description Date adjustment is applied
       */
      adjustmentDate?: string
      /**
       * Format: date
       * @description Start of the period which contributed to the adjustment
       */
      adjustmentFromDate?: string
      /**
       * Format: date
       * @description End of the period which contributed to the adjustment
       */
      adjustmentToDate?: string
      /**
       * Format: int64
       * @description Number of days for the adjustment
       */
      adjustmentDays: number
      /** @description Comment */
      comment?: string
      /** @description Flag to indicate if the adjustment is being applied */
      active: boolean
      /** @description Flag to indicate the adjustment is hidden from end users. This is true when it was created as part of a key date adjustment */
      hiddenFromUsers: boolean
    }
    /** @description Adjustment type */
    SentencingAdjustmentType: {
      /**
       * @description code
       * @example RX
       */
      code: string
      /**
       * @description description
       * @example Remand
       */
      description: string
    }
    PagePrisonerId: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      size?: number
      content?: components['schemas']['PrisonerId'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      first?: boolean
      /** Format: int32 */
      numberOfElements?: number
      last?: boolean
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    PrisonerId: {
      /** Format: int64 */
      bookingId: number
      offenderNo: string
    }
    /** @description Key date adjustment */
    KeyDateAdjustmentResponse: {
      /**
       * Format: int64
       * @description The key date adjustment id
       */
      id: number
      /**
       * Format: int64
       * @description The booking id
       */
      bookingId: number
      /** @description The offender number, aka nomsId, prisonerId */
      offenderNo: string
      adjustmentType: components['schemas']['SentencingAdjustmentType']
      /**
       * Format: date
       * @description Date adjustment is applied
       */
      adjustmentDate?: string
      /**
       * Format: date
       * @description Start of the period which contributed to the adjustment
       */
      adjustmentFromDate?: string
      /**
       * Format: date
       * @description End of the period which contributed to the adjustment
       */
      adjustmentToDate?: string
      /**
       * Format: int64
       * @description Number of days for the adjustment
       */
      adjustmentDays: number
      /** @description Comment */
      comment?: string
      /** @description Flag to indicate if the adjustment is being applied */
      active: boolean
    }
    /** @description Incentive id */
    IncentiveIdResponse: {
      /**
       * Format: int64
       * @description The booking id
       */
      bookingId: number
      /**
       * Format: int64
       * @description The sequence of the incentive within this booking
       */
      sequence: number
    }
    PageIncentiveIdResponse: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      size?: number
      content?: components['schemas']['IncentiveIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      first?: boolean
      /** Format: int32 */
      numberOfElements?: number
      last?: boolean
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Incentive information */
    IncentiveResponse: {
      /** @description The offender number, aka nomsId, prisonerId */
      offenderNo: string
      /**
       * Format: int64
       * @description The booking id
       */
      bookingId: number
      /**
       * Format: int64
       * @description The sequence of the incentive within this booking
       */
      incentiveSequence: number
      /** @description Comment for Incentive level */
      commentText?: string
      /**
       * @description Date and time of Incentive level creation
       * @example 2021-07-05T10:35:17
       */
      iepDateTime: string
      /** @description Prison where the Incentive level was created */
      prisonId: string
      iepLevel: components['schemas']['CodeDescription']
      /** @description User id of user creating prisoner incentive level */
      userId?: string
      /** @description Is this IEP the current IEP for the booking? */
      currentIep: boolean
      /**
       * @description The NOMIS module that created this IEP
       * @enum {string}
       */
      auditModule: 'OCUWARNG' | 'PRISON_API' | 'OIDADMIS' | 'MERGE' | 'OIDOIEPS' | 'OIDITRAN' | 'OSIOSEAR'
      /**
       * @description date and time of creation
       * @example 2021-07-05T10:35:17
       */
      whenCreated: string
      /**
       * @description date and time of last update
       * @example 2021-07-05T10:35:17
       */
      whenUpdated?: string
    }
    /** @description Event id */
    AppointmentIdResponse: {
      /**
       * Format: int64
       * @description The event id
       */
      eventId: number
    }
    PageAppointmentIdResponse: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      size?: number
      content?: components['schemas']['AppointmentIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      first?: boolean
      /** Format: int32 */
      numberOfElements?: number
      last?: boolean
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Adjustment id */
    AdjustmentIdResponse: {
      /**
       * Format: int64
       * @description The adjustment id
       */
      adjustmentId: number
      /** @description SENTENCE or KEY_DATE */
      adjustmentCategory: string
    }
    PageAdjustmentIdResponse: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      size?: number
      content?: components['schemas']['AdjustmentIdResponse'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      first?: boolean
      /** Format: int32 */
      numberOfElements?: number
      last?: boolean
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
  }
}

export interface operations {
  /** Requires role NOMIS_SENTENCING. Retrieves a sentence adjustment by id */
  getSentenceAdjustment: {
    parameters: {
      path: {
        /** Sentence adjustment id */
        adjustmentId: string
      }
    }
    responses: {
      /** the sentence adjustment details */
      200: {
        content: {
          'application/json': components['schemas']['SentenceAdjustmentResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Adjustment not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Requires role NOMIS_SENTENCING. Updates a sentence adjustment by id */
  updateSentenceAdjustment: {
    parameters: {
      path: {
        /** Sentence adjustment id */
        adjustmentId: string
      }
    }
    responses: {
      /** the sentence adjustment has been updated */
      200: unknown
      /** Supplied data is invalid, for instance missing required fields or invalid values. See schema for details */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateSentenceAdjustmentRequest']
      }
    }
  }
  /** Requires role NOMIS_SENTENCING. Deletes a sentence adjustment by id */
  deleteSentenceAdjustment: {
    parameters: {
      path: {
        /** Sentence adjustment id */
        adjustmentId: string
      }
    }
    responses: {
      /** the sentence adjustment has been deleted */
      204: never
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Updates details of an existing visit such as the visitors and time slot */
  updateVisit: {
    parameters: {
      path: {
        /** Offender Noms Id */
        offenderNo: string
        /** Nomis visit Id */
        visitId: string
      }
    }
    responses: {
      /** Visit information updated */
      200: unknown
      /** Person ids do not exist */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** offenderNo or visits id does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateVisitRequest']
      }
    }
  }
  cancelVisit: {
    parameters: {
      path: {
        /** Offender Noms Id */
        offenderNo: string
        /** Nomis Visit Id */
        visitId: string
      }
    }
    responses: {
      /** Visit cancelled */
      200: unknown
      /** Invalid cancellation reason */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** VSIP visit id not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CancelVisitRequest']
      }
    }
  }
  /** Requires role NOMIS_SENTENCING. Retrieves a key date adjustment by id */
  getKeyDateAdjustment: {
    parameters: {
      path: {
        /** Key date adjustment id */
        adjustmentId: string
      }
    }
    responses: {
      /** the key date adjustment details */
      200: {
        content: {
          'application/json': components['schemas']['KeyDateAdjustmentResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Adjustment not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Requires role NOMIS_SENTENCING. Updates a sentence adjustment by id */
  updateKeyDateAdjustment: {
    parameters: {
      path: {
        /** Key date adjustment id */
        adjustmentId: string
      }
    }
    responses: {
      /** the key date adjustment has been updated */
      200: unknown
      /** Supplied data is invalid, for instance missing required fields or invalid values. See schema for details */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Adjustment not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateKeyDateAdjustmentRequest']
      }
    }
  }
  /** Requires role NOMIS_SENTENCING. Deletes a key date adjustment by id */
  deleteKeyDateAdjustment: {
    parameters: {
      path: {
        /** Key date adjustment id */
        adjustmentId: string
      }
    }
    responses: {
      /** the key date adjustment has been deleted */
      204: never
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Gets a global incentive level by provided code and domain of IEP_LEVEL */
  getGlobalIncentiveLevel: {
    parameters: {
      path: {
        /** Incentive reference code */
        code: string
      }
    }
    responses: {
      /** return the Global Incentive level */
      200: {
        content: {
          'application/json': components['schemas']['ReferenceCode']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Global Incentive Level does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Updates an existing global incentive level, updateable fields are description and active */
  updateGlobalIncentiveLevel: {
    parameters: {
      path: {
        /** Incentive reference code */
        code: string
      }
    }
    responses: {
      /** Updated Global Incentive level */
      200: {
        content: {
          'application/json': components['schemas']['ReferenceCode']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Global incentive level not found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateIncentiveRequest']
      }
    }
  }
  /** Gets prison incentive level data by provided code and prison */
  getPrisonIncentiveLevel: {
    parameters: {
      path: {
        /** Prison id */
        prison: string
        /** Incentive level code */
        code: string
      }
    }
    responses: {
      /** return the Prison Incentive level */
      200: {
        content: {
          'application/json': components['schemas']['PrisonIncentiveLevelDataResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Prison Incentive Level does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Creates incentive level data associated with a Prison */
  updatePrisonIncentiveLevelData: {
    parameters: {
      path: {
        /** Prison Id */
        prison: string
        /** Incentive level code */
        code: string
      }
    }
    responses: {
      /** Prison Incentive level data updated */
      200: {
        content: {
          'application/json': components['schemas']['PrisonIncentiveLevelDataResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePrisonIncentiveRequest']
      }
    }
  }
  /** Updates an existing appointment. Requires role NOMIS_APPOINTMENTS */
  updateAppointment: {
    parameters: {
      path: {
        /** NOMIS event Id */
        nomisEventId: string
      }
    }
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': components['schemas']['CreateAppointmentRequest']
        }
      }
      /** Invalid data such as location or subtype do not exist etc. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_APPOINTMENTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Event id does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAppointmentRequest']
      }
    }
  }
  /** Deletes an existing appointment by actually deleting from the table. Intended for appointments created in error. Requires role NOMIS_APPOINTMENTS */
  deleteAppointment: {
    parameters: {
      path: {
        /** NOMIS event Id */
        nomisEventId: string
      }
    }
    responses: {
      /** Success */
      204: never
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_APPOINTMENTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Event id does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Cancels an existing appointment. Requires role NOMIS_APPOINTMENTS */
  cancelAppointment: {
    parameters: {
      path: {
        /** NOMIS event Id */
        nomisEventId: string
      }
    }
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': components['schemas']['CreateAppointmentRequest']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_APPOINTMENTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Event id does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Updates an activity and associated pay rates. Requires role NOMIS_ACTIVITIES */
  updateActivity: {
    parameters: {
      path: {
        /** Course activity id */
        courseActivityId: string
      }
    }
    responses: {
      /** Activity information */
      200: unknown
      /** Prison, location, program service or iep value do not exist */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Activity Not Found */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateActivityRequest']
      }
    }
  }
  /** Recreates schedules from tomorrow. Requires role NOMIS_ACTIVITIES */
  updateSchedules: {
    parameters: {
      path: {
        /** Course activity id */
        courseActivityId: string
      }
    }
    responses: {
      /** Schedules updated */
      200: unknown
      /** There was an error with the request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SchedulesRequest'][]
      }
    }
  }
  /** Updates a course schedule. Requires role NOMIS_ACTIVITIES */
  updateCourseSchedule: {
    parameters: {
      path: {
        /** Course activity id */
        courseActivityId: string
      }
    }
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': components['schemas']['UpdateCourseScheduleResponse']
        }
      }
      /** Bad request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** The course schedule does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateCourseScheduleRequest']
      }
    }
  }
  /** Updates a prisoner's allocation to an activity. Requires role NOMIS_ACTIVITIES */
  updateAllocation: {
    parameters: {
      path: {
        /** Course activity id */
        courseActivityId: string
      }
    }
    responses: {
      /** Success */
      200: {
        content: {
          'application/json': components['schemas']['CreateAllocationResponse']
        }
      }
      /**
       * One or more of the following is true:<ul>
       *         <li>the prisoner is not allocated to the course,</li>
       *         <li>the course or prisoner does not exist,</li>
       *         <li>the end date is missing or invalid,</li>
       *         <li>the reason is invalid</li>
       *         </ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** The course activity or booking id do not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateAllocationRequest']
      }
    }
  }
  /** Allocates a prisoner to an activity. Requires role NOMIS_ACTIVITIES */
  createAllocation: {
    parameters: {
      path: {
        /** Course activity id */
        courseActivityId: string
      }
    }
    responses: {
      /** Offender program profile information with created id */
      201: {
        content: {
          'application/json': components['schemas']['CreateAllocationResponse']
        }
      }
      /**
       * One or more of the following is true:<ul>
       *         <li>the booking id does not exist,</li>
       *         <li>the prisoner is already allocated,</li>
       *         <li>the course is held at a different prison to the prisoner's location,</li>
       *         <li>the pay band code does not exist for the given course activity.</li></ul>
       */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** The course activity does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAllocationRequest']
      }
    }
  }
  /** Creates a new visit and decrements the visit balance. */
  createVisit: {
    parameters: {
      path: {
        /** Offender Noms Id */
        offenderNo: string
      }
    }
    responses: {
      /** Visit information with created id */
      201: {
        content: {
          'application/json': components['schemas']['CreateVisitResponse']
        }
      }
      /** Prison or person ids do not exist */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** offenderNo does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateVisitRequest']
      }
    }
  }
  /** Required role NOMIS_SENTENCING Creates a new sentence adjustment (aka Debit/Credit). Key dates will not be recalculated as a side effect of this operation */
  createSentenceAdjustment: {
    parameters: {
      path: {
        /** Booking Id */
        bookingId: string
        /** Sentence sequence number */
        sentenceSequence: string
      }
    }
    responses: {
      /** Created Sentence adjustment id */
      201: {
        content: {
          'application/json': components['schemas']['CreateAdjustmentResponse']
        }
      }
      /** Supplied data is invalid, for instance missing required fields or invalid values. See schema for details */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Booking or sentence sequence do not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateSentenceAdjustmentRequest']
      }
    }
  }
  /** Creates a new incentive using next sequence no. */
  createIncentive: {
    parameters: {
      path: {
        /** Offender Booking Id */
        bookingId: string
      }
    }
    responses: {
      /** Incentive information with created sequence */
      201: {
        content: {
          'application/json': components['schemas']['CreateIncentiveResponse']
        }
      }
      /** Prison or iep value do not exist */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** booking does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateIncentiveRequest']
      }
    }
  }
  /** Required role NOMIS_SENTENCING Creates a new key date adjustment. Key dates will be recalculated as a side effect of this operation */
  createKeyDateAdjustment: {
    parameters: {
      path: {
        /** Booking Id */
        bookingId: string
      }
    }
    responses: {
      /** Created key date adjustment */
      201: {
        content: {
          'application/json': components['schemas']['CreateAdjustmentResponse']
        }
      }
      /** Supplied data is invalid, for instance missing required fields or invalid values. See schema for details */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Booking does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateKeyDateAdjustmentRequest']
      }
    }
  }
  /** Creates a new global incentive level */
  createGlobalIncentiveLevel: {
    responses: {
      /** Global Incentive level */
      201: {
        content: {
          'application/json': components['schemas']['ReferenceCode']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateIncentiveRequest']
      }
    }
  }
  /** reorders all global incentive levels using provided list of Incentive codes, including inactive. 1-based index */
  reorderGlobalIncentiveLevels: {
    responses: {
      /** Reorder successful */
      200: unknown
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ReorderRequest']
      }
    }
  }
  /** Creates incentive level data associated with a Prison */
  createPrisonIncentiveLevelData: {
    parameters: {
      path: {
        /** Prison Id */
        prison: string
      }
    }
    responses: {
      /** Prison Incentive level data created */
      201: {
        content: {
          'application/json': components['schemas']['PrisonIncentiveLevelDataResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreatePrisonIncentiveRequest']
      }
    }
  }
  /** Creates a new appointment. Requires role NOMIS_APPOINTMENTS */
  createAppointment: {
    responses: {
      /** Appointment information with created id */
      201: {
        content: {
          'application/json': components['schemas']['CreateAppointmentRequest']
        }
      }
      /** Invalid data such as booking or location do not exist etc. */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_APPOINTMENTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateAppointmentRequest']
      }
    }
  }
  /** Creates a new activity and associated pay rates. Requires role NOMIS_ACTIVITIES */
  createActivity: {
    responses: {
      /** Activity information with created id */
      201: {
        content: {
          'application/json': components['schemas']['CreateActivityResponse']
        }
      }
      /** Prison, location, program service or iep value do not exist */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateActivityRequest']
      }
    }
  }
  /** Creates or updates an attendance for the booking and schedule. Requires role NOMIS_ACTIVITIES */
  upsertAttendance: {
    parameters: {
      path: {
        /** Course activity id */
        courseActivityId: string
        /** Booking id */
        bookingId: string
      }
    }
    responses: {
      /** Attendance updated */
      200: {
        content: {
          'application/json': components['schemas']['UpsertAttendanceResponse']
        }
      }
      /** Invalid request */
      400: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpsertAttendanceRequest']
      }
    }
  }
  /** Returns the current event status of a Nomis attendance record. Requires role NOMIS_ACTIVITIES */
  getAttendanceStatus: {
    parameters: {
      path: {
        /** Course activity id */
        courseActivityId: string
        /** Booking id */
        bookingId: string
      }
    }
    responses: {
      /** Attendance status found */
      200: {
        content: {
          'application/json': components['schemas']['GetAttendanceStatusResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_ACTIVITIES */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** The attendance record does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['GetAttendanceStatusRequest']
      }
    }
  }
  /** Retrieves a visit by id. */
  getVisit: {
    parameters: {
      path: {
        /** Nomis Visit Id */
        visitId: string
      }
    }
    responses: {
      /** Visit Information Returned */
      200: {
        content: {
          'application/json': components['schemas']['VisitResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** visit does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieves a list of rooms with usage count for the (filtered) visits. Only future visits are included */
  getVisitRoomCountsByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /** Filter results by prison ids (returns all prisons if not specified) */
        prisonIds?: string[]
        /** Filter results by visitType (returns all types if not specified) */
        visitTypes?: string[]
        /** Filter results by visits that were created on or after the given timestamp */
        fromDateTime?: string
        /** Filter results by visits that were created on or before the given timestamp */
        toDateTime?: string
        /** Filter results by restricting to future visit usage only */
        futureVisitsOnly?: boolean
      }
    }
    responses: {
      /** list of visit room and count is returned */
      200: {
        content: {
          'application/json': components['schemas']['VisitRoomCountResponse'][]
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieves a paged list of visits by filter */
  getVisitsByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /** Filter results by prison ids (returns all prisons if not specified) */
        prisonIds?: string[]
        /** Filter results by visitType (returns all types if not specified) */
        visitTypes?: string[]
        /** Filter results by visits that were created on or after the given timestamp */
        fromDateTime?: string
        /** Filter results by visits that were created on or before the given timestamp */
        toDateTime?: string
      }
    }
    responses: {
      /** Pageable list of visit ids is returned */
      200: {
        content: {
          'application/json': components['schemas']['PageVisitIdResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Requires role SYNCHRONISATION_REPORTING. */
  getPrisonerIdentifiers: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /** Only return active prisoners currently in prison */
        active?: boolean
      }
    }
    responses: {
      /** paged list of prisoner ids */
      200: {
        content: {
          'application/json': components['schemas']['PagePrisonerId']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role SYNCHRONISATION_REPORTING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieves a paged list of incentive composite ids by filter. Requires ROLE_NOMIS_INCENTIVES. */
  getIncentivesByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /** Filter results by incentives that were created on or after the given date */
        fromDate?: string
        /** Filter results by incentives that were created on or before the given date */
        toDate?: string
        /** if true only retrieve latest incentive for each prisoner */
        latestOnly?: boolean
      }
    }
    responses: {
      /** Pageable list of composite ids are returned */
      200: {
        content: {
          'application/json': components['schemas']['PageIncentiveIdResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieves a created incentive level for a prisoner. Requires ROLE_NOMIS_INCENTIVES. */
  getIncentive: {
    parameters: {
      path: {
        /** NOMIS booking Id */
        bookingId: string
        /** NOMIS Incentive sequence */
        incentiveSequence: string
      }
    }
    responses: {
      /** the incentive level details */
      200: {
        content: {
          'application/json': components['schemas']['IncentiveResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieves the current incentive level (by booking) for a prisoner. Requires ROLE_NOMIS_INCENTIVES. */
  getCurrentIncentive: {
    parameters: {
      path: {
        /** NOMIS booking Id */
        bookingId: string
      }
    }
    responses: {
      /** the incentive level details */
      200: {
        content: {
          'application/json': components['schemas']['IncentiveResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get an appointment given the unique event id. Requires role NOMIS_APPOINTMENTS */
  getAppointmentById: {
    parameters: {
      path: {
        /** Event Id */
        eventId: string
      }
    }
    responses: {
      /** Appointment information with created id */
      200: {
        content: {
          'application/json': components['schemas']['CreateAppointmentRequest']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_APPOINTMENTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Booking, location and timestamp combination does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieves a paged list of incentive composite ids by filter. Requires ROLE_NOMIS_APPOINTMENTS. */
  getAppointmentsByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /** Filter results by prison ids (returns all prisons if not specified) */
        prisonIds?: string[]
        /** Filter results by appointments that were created on or after the given date */
        fromDate?: string
        /** Filter results by appointments that were created on or before the given date */
        toDate?: string
      }
    }
    responses: {
      /** Pageable list of composite ids are returned */
      200: {
        content: {
          'application/json': components['schemas']['PageAppointmentIdResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_INCENTIVES not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Get an appointment given the booking id, internal location, date and start time. Requires role NOMIS_APPOINTMENTS */
  getAppointment: {
    parameters: {
      path: {
        /** NOMIS booking Id */
        bookingId: string
        /** Appointment room internal location Id */
        locationId: string
        /** Appointment date and start time */
        dateTime: string
      }
    }
    responses: {
      /** Appointment information with created id */
      200: {
        content: {
          'application/json': components['schemas']['CreateAppointmentRequest']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden, requires role NOMIS_APPOINTMENTS */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Booking, location and timestamp combination does not exist */
      404: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  /** Retrieves a paged list of adjustment ids by filter. Requires ROLE_NOMIS_SENTENCING. */
  getAdjustmentsByFilter: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
        /** Filter results by adjustments that were created on or after the given date */
        fromDate?: string
        /** Filter results by adjustments that were created on or before the given date */
        toDate?: string
      }
    }
    responses: {
      /** Pageable list of ids are returned */
      200: {
        content: {
          'application/json': components['schemas']['PageAdjustmentIdResponse']
        }
      }
      /** Unauthorized to access this endpoint */
      401: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** Forbidden to access this endpoint when role NOMIS_SENTENCING not present */
      403: {
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
