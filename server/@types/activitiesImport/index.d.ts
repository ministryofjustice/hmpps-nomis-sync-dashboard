/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/schedules/{scheduleId}/deallocate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Deallocate offenders
     * @description Deallocates offenders from an activity schedule on a future date.
     *
     *     Requires one of the following roles:
     *     * ACTIVITY_HUB
     *     * ACTIVITY_ADMIN
     */
    put: operations['deallocate']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/scheduled-instances/{instanceId}/uncancel': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Un-cancels a scheduled instance.
     * @description Un-cancels a previously cancelled scheduled instance.
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    put: operations['uncancelScheduledInstance']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/scheduled-instances/{instanceId}/cancel': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Cancel a scheduled instance
     * @description Cancels scheduled instance and associated attendance records
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    put: operations['cancelScheduledInstance']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/retry-dlq/{dlqName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** @description
     *
     *     Requires one of the following roles:
     *     * ACTIVITY_QUEUE_ADMIN */
    put: operations['retryDlq']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/retry-all-dlqs': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put: operations['retryAllDlqs']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/purge-queue/{queueName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /** @description
     *
     *     Requires one of the following roles:
     *     * ACTIVITY_QUEUE_ADMIN */
    put: operations['purgeQueue']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/attendances': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Updates attendance records.
     * @description Updates the given attendance records with the supplied update request details.
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    put: operations['markAttendances']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/appointments/{appointmentId}/uncancel': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Uncancel an appointment or series of appointments
     * @description
     *         Uncancel an appointment or series of appointments based on the applyTo property.
     *
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    put: operations['uncancelAppointment']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/appointments/{appointmentId}/cancel': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Cancel an appointment or series of appointments
     * @description
     *         Cancel an appointment or series of appointments based on the applyTo property.
     *
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    put: operations['cancelAppointment']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/appointments/{appointmentId}/attendance': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Mark the attendance for an appointment
     * @description
     *         Mark or update the attendance records for the attendees of an appointment. This sets the current attendance record
     *         for each supplied prison number, replacing any existing record. This supports both the initial recording of attendance
     *         and changing that attendance record. There are no restrictions on when attendance can be recorded. It can be done
     *         for past and future appointments.
     *
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    put: operations['markAttendance']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/appointments/updateAttendances': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Update the attendances for multiple appointments
     * @description
     *         Update the attendance records for attendees on multiple appointments. This sets the current attendance records
     *         for the supplied prison numbers, replacing any existing records. This supports both the initial recording of attendances
     *         and changing that attendance records. There are no restrictions on when attendances can be recorded. It can be done
     *         for past and future appointments.
     *
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    put: operations['markMultipleAttendances']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/waiting-list-applications/{prisonCode}/search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** @description Search waiting list applications
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     *     * ACTIVITIES_MANAGEMENT__RO */
    post: operations['searchWaitingLists']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/utility/publish-events': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Publish an event to the domain events SNS topic.
     * @description Can only be accessed from within the ingress. Requests from elsewhere will result in a 401 response code.
     */
    post: operations['publishDomainEvent']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/schedules/{scheduleId}/allocations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a list of activity schedule allocations
     * @description Returns zero or more activity schedule allocations.
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    get: operations['getAllocationsBy']
    put?: never
    /**
     * Allocate offender to schedule
     * @description Allocates the supplied offender allocation request to the activity schedule.
     *
     *     Requires one of the following roles:
     *     * ACTIVITY_HUB
     *     * ACTIVITY_ADMIN
     */
    post: operations['allocate']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/scheduled-instances': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Get scheduled instances by their ids
     * @description Returns a list of scheduled instances.
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     *     * NOMIS_ACTIVITIES
     */
    post: operations['getScheduledInstancesByIds']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/scheduled-events/prison/{prisonCode}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a list of scheduled events for a prison, prisoner, date range (max 3 months) and optional time slot.
     * @description
     *           Returns scheduled events for the prison, prisoner, date range (max 3 months) and optional time slot.
     *           Court hearings, adjudication hearings, transfers and visits come from NOMIS (via prison API).
     *           Activities and appointments come from either NOMIS or the local database depending on whether the prison is
     *           marked as active for appointments and/or activities.
     *           (Intended usage: Prisoner calendar / schedule)
     *
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    get: operations['getScheduledEventsForSinglePrisoner']
    put?: never
    /**
     * Get a list of scheduled events for a prison and list of prisoner numbers for a date and time slot
     * @description
     *           Returns scheduled events for the prison, prisoner numbers, single date and an optional time slot.
     *           Court hearings, adjudication hearings, transfers and visits come from NOMIS (via prison API).
     *           Activities and appointments come from either NOMIS or the local database depending on whether the prison is
     *           marked as rolled-out for activities and/or appointments.
     *           (Intended usage: Unlock list)
     *
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    post: operations['getScheduledEventsForMultiplePrisoners']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/scheduled-events/prison/{prisonCode}/locations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Get a list of scheduled events for a prison and list of internal location ids numbers for a date and optional time slot
     * @description
     *           Returns scheduled events for the prison, internal location ids, single date and an optional time slot.
     *           This endpoint only returns activities and appointments and these come from the local database.
     *           This endpoint supports the creation of movement lists.
     *           Note that activities are only scheduled 60 days in advance. Appointments may be scheduled for any date in the future.
     *
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    post: operations['getScheduledEventsForMultipleLocations']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/rollout/prison-regime/{agencyId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a prison regime for a given prison
     * @description If a regine exists it will overwrite it.  Called via migration dashboard only
     *
     *     Requires one of the following roles:
     *     * MIGRATE_ACTIVITIES
     */
    post: operations['setPrisonRegimeSlots']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisons/{prisonCode}/prisoner-allocations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Get all allocations for prisoners
     * @description Returns zero or more allocations for the supplied list of prisoners.
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     *     * ACTIVITIES_MANAGEMENT__RO
     */
    post: operations['prisonerAllocations']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prison/{prisonCode}/prison-pay-band': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create a pay band for a given prison
     * @description Returns the newly created pay band.
     *
     *     Requires one of the following roles:
     *     * MIGRATE_ACTIVITIES
     *     * ACTIVITY_ADMIN
     */
    post: operations['createPayBand']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate/allocation': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Migrate an allocation
     * @description Migrate an allocation from NOMIS.
     *
     *     Requires one of the following roles:
     *     * NOMIS_ACTIVITIES
     */
    post: operations['migrateAllocation']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate/activity': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Migrate an activity
     * @description Migrate an activity.
     *
     *     Requires one of the following roles:
     *     * NOMIS_ACTIVITIES
     */
    post: operations['migrateActivity']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate-appointment': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Migrate an appointment from NOMIS
     * @description
     *         Migrate an appointment creating an appointment series with one appointment that has the supplied prisoner allocated.
     *
     *
     *     Requires one of the following roles:
     *     * NOMIS_APPOINTMENTS
     */
    post: operations['migrateAppointment']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/job/purposeful-activity-reports': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Trigger the job to generate purposeful activity reports and upload to s3
     * @description
     *           Generates 3 csv reports which are uploaded to an s3 bucket for prison performance reporting team to process for
     *           purposeful activity generation purposes and to display on the prison regime dashboard in the performance hub.
     *
     *           Report 1) Details of attended purposeful-activity activities
     *           Report 2) Details of attended purposeful-activity appointments
     *           Report 3) Prison rollout table
     *
     *           Can only be accessed from within the ingress. Requests from elsewhere will result in a 401 response code.
     *
     */
    post: operations['triggerPurposefulActivityReportsJob']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/job/manage-attendance-records': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Trigger the job to manage attendance records in advance
     * @description Can only be accessed from within the ingress. Requests from elsewhere will result in a 401 response code.
     */
    post: operations['triggerManageAttendanceRecordsJob']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/job/manage-allocations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Trigger the job to manage allocations
     * @description
     *             One or more operations to trigger for managing allocations.
     *
     *             Can only be accessed from within the ingress. Requests from elsewhere will result in a 401 response code.
     *
     */
    post: operations['triggerManageAllocationsJob']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/job/fix-zero-pay': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Trigger the job fix zero pay activities
     * @description Can only be accessed from within the ingress. Requests from elsewhere will result in a 401 response code.
     */
    post: operations['triggerFixZeroPayJob']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/job/create-scheduled-instances': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Trigger the job to create the scheduled instances in advance for the active schedules on activities
     * @description Can only be accessed from within the ingress. Requests from elsewhere will result in a 401 response code.
     */
    post: operations['triggerCreateScheduledInstancesJob']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/job/appointments/manage-attendees': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Starts a job to manage appointment attendees
     * @description
     *           Job will retrieve all future appointments starting within the number of days defined by the days after now parameter.
     *           It will retrieve the attendees for these appointments and retrieve the associated prisoner records. The status, location and
     *           any other pertinent information for these prisoners will be used to determine whether the attendee records should be removed.
     *
     *           Can only be accessed from within the ingress. Requests from elsewhere will result in a 401 response code.
     *
     */
    post: operations['triggerManageAllocationsJob_1']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/job/appointments-metrics': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Trigger the job to generate appointments metrics
     * @description Can only be accessed from within the ingress. Requests from elsewhere will result in a 401 response code.
     */
    post: operations['triggerAppointmentsMetricsJob']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/job/activities-metrics': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Trigger the job to generate activity metrics
     * @description Can only be accessed from within the ingress. Requests from elsewhere will result in a 401 response code.
     */
    post: operations['triggerActivityMetricsJob']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/event-review/prison/{prison}/acknowledge': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Acknowledge a list of change of circumstance events in the prison.
     * @description Used to indicate that a subset of change events have been acknowledged.
     *
     *     Requires one of the following roles:
     *     * ACTIVITY_HUB
     *     * ACTIVITY_ADMIN
     */
    post: operations['acknowledgeEvents']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/audit/search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Search for audit records
     * @description Returns all records that match the search criteria.
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    post: operations['getAuditRecords']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/appointments/{prisonCode}/search': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Search for appointments within the specified prison
     * @description
     *         Uses the supplied prison code and search parameters to filter and return appointment search results.
     *
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    post: operations['searchAppointments']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/appointments/details': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Get the details of appointments for display purposes by their ids
     * @description Returns the displayable details of appointments by their unique identifiers.
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    post: operations['getAppointmentDetailsById']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/appointment-set': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create a set of appointments
     * @description
     *         Create a set of appointments that start on the same day and add the associated prisoner as the appointment attendee.
     *
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    post: operations['createAppointmentSet']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/appointment-series': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create an appointment series with one or more appointments
     * @description
     *         Create an appointment series with one or more appointments and add the supplied prisoner or prisoners as appointment attendees.
     *
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    post: operations['createAppointmentSeries']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/allocations/{prisonCode}/waiting-list-application': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Add a prisoner to an activity schedule waiting list
     * @description Adds the supplied waiting list creation request to the activity schedule.
     *
     *     Requires one of the following roles:
     *     * ACTIVITY_HUB
     *     * ACTIVITY_ADMIN
     */
    post: operations['addToWaitingList']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/allocations/{prisonCode}/unsuspend': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Suspend allocations
     * @description Add a suspension end date to a list of allocations
     *
     *     Requires one of the following roles:
     *     * ACTIVITY_HUB
     *     * ACTIVITY_ADMIN
     */
    post: operations['unsuspend']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/allocations/{prisonCode}/suspend': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Suspend allocations
     * @description Add a suspension start date to a list of allocations, accompanied by an optional case note.
     *
     *     Requires one of the following roles:
     *     * ACTIVITY_HUB
     *     * ACTIVITY_ADMIN
     */
    post: operations['suspend']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/activities': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create an activity
     * @description Create an activity
     *
     *     Requires one of the following roles:
     *     * ACTIVITY_HUB
     *     * ACTIVITY_ADMIN
     */
    post: operations['create']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/waiting-list-applications/{waitingListId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a waiting list application by its id
     * @description Returns a single waiting list application by its unique identifier.
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    get: operations['getWaitingListById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /** @description Update a waiting list application.
     *
     *     Requires one of the following roles:
     *     * ACTIVITY_HUB
     *     * ACTIVITY_ADMIN */
    patch: operations['updateWaitingList']
    trace?: never
  }
  '/prison/{prisonCode}/prison-pay-band/{prisonPayBandId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Update a pay band for a given prison
     * @description Returns the updated pay band.
     *
     *     Requires one of the following roles:
     *     * MIGRATE_ACTIVITIES
     *     * ACTIVITY_ADMIN
     */
    patch: operations['updatePayBand']
    trace?: never
  }
  '/appointments/{appointmentId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Update an appointment or series of appointments
     * @description
     *         Update an appointment or series of appointments based on the applyTo property.
     *
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    patch: operations['updateAppointment']
    trace?: never
  }
  '/allocations/{prisonCode}/allocationId/{allocationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Update an allocation
     * @description Update an allocation
     *
     *     Requires one of the following roles:
     *     * ACTIVITY_HUB
     *     * ACTIVITY_ADMIN
     */
    patch: operations['update']
    trace?: never
  }
  '/activities/{prisonCode}/activityId/{activityId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    /**
     * Update an activity
     * @description Update an activity
     *
     *     Requires one of the following roles:
     *     * ACTIVITY_HUB
     *     * ACTIVITY_ADMIN
     */
    patch: operations['update_1']
    trace?: never
  }
  '/synchronisation/reconciliation/attendances/{prisonId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieves attendance details for the sync reconciliation
     * @description Retrieves booking numbers and counts for paid attendances in the prison on the date
     *
     *     Requires one of the following roles:
     *     * NOMIS_ACTIVITIES
     */
    get: operations['getAttendanceReconciliation']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/synchronisation/reconciliation/allocations/{prisonId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieves allocation details for the sync reconciliation
     * @description Retrieves booking numbers and counts for allocations currently active in each prison
     *
     *     Requires one of the following roles:
     *     * NOMIS_ACTIVITIES
     */
    get: operations['getAllocationReconciliation']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/synchronisation/attendance/{attendanceId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieves Nomis synchronisation details
     * @description Retrieves all details required in order to synchronise an attendance with the Nomis database.
     *
     *     Requires one of the following roles:
     *     * NOMIS_ACTIVITIES
     */
    get: operations['getAttendanceSync']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/subject-access-request': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Provides content for a prisoner to satisfy the needs of a subject access request on their behalf
     * @description Requires role SAR_DATA_ACCESS or additional role as specified by hmpps.sar.additionalAccessRole configuration.
     *
     *     Requires one of the following roles:
     *     * SAR_DATA_ACCESS
     *     * SAR_DATA_ACCESS
     */
    get: operations['getSarContentByReference']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/schedules/{scheduleId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get an activity schedule by its id
     * @description Returns a single activity schedule by its unique identifier.
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     *     * NOMIS_ACTIVITIES
     */
    get: operations['getScheduleById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/schedules/{scheduleId}/waiting-list-applications': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a schedules waiting list applications
     * @description Returns zero or more activity schedule waiting list applications.
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    get: operations['getWaitingListApplicationsBy']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/schedules/{scheduleId}/suitability': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets the suitability details of a candidate for an activity
     * @description Returns candidate suitability details considering factors such as, workplace risk assessment, incentive level, education levels, earliest release date and non-associations
     *
     *     Requires one of the following roles:
     *     * ACTIVITY_HUB
     *     * ACTIVITY_ADMIN
     */
    get: operations['allocationSuitability']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/schedules/{scheduleId}/non-associations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get non-associations for a prisoner within an activity schedule
     * @description Returns a list of non-associations for the prisoner.
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    get: operations['getNonAssociations']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/schedules/{scheduleId}/candidates': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the suitable candidates for an activity
     * @description Returns a paginated view of the list of candidates suitable for a given activity schedule. Filterable by employment status, workplace risk assessment, and incentive level.
     *
     *     Requires one of the following roles:
     *     * ACTIVITY_HUB
     *     * ACTIVITY_ADMIN
     */
    get: operations['candidates']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/scheduled-instances/{instanceId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a scheduled instance by ID
     * @description Returns a scheduled instance.
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     *     * NOMIS_ACTIVITIES
     */
    get: operations['getScheduledInstanceById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/scheduled-instances/{instanceId}/scheduled-attendees': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a list of scheduled attendees for a scheduled instance
     * @description Returns a list of prisoners who are scheduled to attend a given scheduled instance.
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    get: operations['getScheduledAttendeesByScheduledInstance']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/scheduled-instances/attendance-summary': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Attendance summary of activity sessions for a given date
     * @description Attendance summary of activity sessions for a given date
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    get: operations['attendanceSummary']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/rollout': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all rollout prisons
     * @description Returns a list of all rolled out prisons.
     *
     *     Requires one of the following roles:
     *     * ACTIVITY_ADMIN
     */
    get: operations['getRolledOutPrisons']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/rollout/{prisonCode}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a prison's rollout plan by prison code
     * @description Returns a single prison and its activities management service rollout plan by its unique code.
     *
     *     Requires one of the following roles:
     *     * ACTIVITY_ADMIN
     */
    get: operations['getPrisonByCode']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/queue-admin/get-dlq-messages/{dlqName}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** @description
     *
     *     Requires one of the following roles:
     *     * ACTIVITY_QUEUE_ADMIN */
    get: operations['getDlqMessages']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prisons/{prisonCode}/scheduled-instances': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a list of scheduled instances for a prison, date range (max 3 months) and time slot (AM, PM or ED - optional)
     * @description Returns zero or more scheduled instances for a prison and date range (max 3 months).
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    get: operations['getActivityScheduleInstancesByDateRange']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prison/{prisonCode}/prison-pay-bands': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a list of pay bands at a given prison
     * @description Returns the pay bands at a given prison or a default list of values if none present.
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    get: operations['getPrisonPayBands']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prison/{prisonCode}/activities': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get list of activities running at a specified prison. Optionally and by default, only currently LIVE activities are returned
     * @description
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     *     * ACTIVITIES_MANAGEMENT__RO
     */
    get: operations['getActivities']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prison/prison-regime/{prisonCode}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a prison regime by its code
     * @description Returns a single prison regime and its details by its unique prison code.
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    get: operations['getPrisonRegimeByPrisonCode']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate-appointment/{prisonCode}/summary': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the list of appointment categories
     * @description
     *
     *     Requires one of the following roles:
     *     * NOMIS_APPOINTMENTS
     *     * MIGRATE_APPOINTMENTS
     */
    get: operations['migratedAppointmentsSummary']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/prison/{prisonCode}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of cell locations for a prison group supplied as a query parameter
     * @description List of cell locations for a prison group supplied as a query parameter
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    get: operations['getCellLocationsForGroup']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/prison/{prisonCode}/location-prefix': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the location prefix for a location group supplied as a query parameter
     * @description Get location prefix for a location group name supplied as a query parameter
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    get: operations['getLocationPrefixForGroup']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/prison/{prisonCode}/location-groups': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * List of all available location groups defined at a prison
     * @description List of all available location groups defined at a prison
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    get: operations['getLocationGroups']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/prison/{prisonCode}/events-summaries': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     *
     *           Get a list of internal locations that have events scheduled to take place on the specified date and optional time slot.
     *
     * @description
     *           Returns internal locations that have events scheduled to take place on the specified date and optional time slot.
     *           Will contain summary information about the events taking place at the location as well as the total number of
     *           prisoners due to arrive at the location. This endpoint supports the creation of movement lists allowing
     *           users to select from a sublist of only the internal locations that have events scheduled there.
     *           Note that activities are only scheduled 60 days in advance. Appointments may be scheduled for any date in the future.
     *
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    get: operations['getInternalLocationEventsSummary']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/event-review/prison/{prisonCode}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get events for a prison which may indicate that a change of circumstances affecting allocations had occurred
     * @description Returns events in the prison which match the search criteria provided.
     *
     *     Requires one of the following roles:
     *     * ACTIVITY_HUB
     *     * ACTIVITY_ADMIN
     */
    get: operations['getEventsForReview']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/attendances/{prisonCode}/{sessionDate}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get a daily list of attendances
     * @description Returns an attendance list.
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    get: operations['getAttendanceByDate']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/attendances/{prisonCode}/suspended': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * gets a list of suspended prisoner attendance activities for a given date
     * @description
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    get: operations['getAttendanceForSuspendedPrisoners']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/attendances/{attendanceId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get an attendance by ID
     * @description Returns an attendance.
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    get: operations['getAttendanceById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/attendance-reasons': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the list of attendance reasons
     * @description
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    get: operations['getAttendanceReasons']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/appointments/{prisonCode}/{status}/attendance': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     *
     *         Get a list of appointments scheduled to take place on the specified date by status
     *
     * @description
     *         Returns appointments scheduled to take place on the specified date by status
     *
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    get: operations['getAppointmentAttendanceByStatus']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/appointments/{prisonCode}/attendance-summaries': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     *
     *         Get a list of appointments scheduled to take place on the specified date along with the summary of their attendance.
     *
     * @description
     *         Returns appointments scheduled to take place on the specified date along with the summary of their attendance.
     *         Will contain summary information about the appointments taking place on the date as well as counts of attendees,
     *         counts of those marked attended and non attended and the count of attendees with no attendance marked.
     *         This endpoint supports management level views of appointment attendance and statistics.
     *
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    get: operations['getAppointmentAttendanceSummaries']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/appointments/{appointmentId}/details': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the details of an appointment for display purposes by its id
     * @description Returns the displayable details of an appointment by its unique identifier.
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    get: operations['getAppointmentDetailsById_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/appointment-set/{appointmentSetId}/details': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the details of an appointment set for display purposes by its id
     * @description Returns the displayable details of an appointment set by its unique identifier.
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    get: operations['getAppointmentSetDetailsById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/appointment-series/{appointmentSeriesId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get an appointment series by its id
     * @description Returns an appointment series with its properties and references to NOMIS by its unique identifier.
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    get: operations['getAppointmentSeriesById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/appointment-series/{appointmentSeriesId}/details': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the details of an appointment series for display purposes by its id
     * @description Returns the displayable details of an appointment series by its unique identifier.
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    get: operations['getAppointmentDetailsById_2']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/appointment-locations/{prisonCode}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the list of appointment locations
     * @description
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    get: operations['getAppointmentLocations']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/appointment-instances/{appointmentInstanceId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get an appointment instance by its id
     * @description Returns an appointment instance and its details by its unique identifier.
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     *     * NOMIS_ACTIVITIES
     */
    get: operations['getAppointmentInstanceById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/appointment-categories': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the list of appointment categories
     * @description
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    get: operations['getAppointmentCategories']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/allocations/id/{allocationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get an allocation by its id
     * @description Returns a single allocation and its details by its unique identifier.
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     *     * NOMIS_ACTIVITIES
     */
    get: operations['getAllocationById']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/allocations/deallocation-reasons': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the list of deallocation reasons
     * @description
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    get: operations['getDeallocationReasons']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/activity-categories': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the list of top-level activity categories
     * @description
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     *     * NOMIS_ACTIVITIES
     */
    get: operations['getCategories']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/activities/{activityId}/schedules': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the capacity and number of allocated slots in an activity
     * @description
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     */
    get: operations['getActivitySchedules']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/activities/{activityId}/filtered': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get an activity by its ID with limited instances (by date)
     * @description Returns a single activity by activity ID with limited instances.
     *
     *     Requires one of the following roles:
     *     * PRISON
     *     * ACTIVITY_ADMIN
     *     * NOMIS_ACTIVITIES
     */
    get: operations['getActivityByIdWithFilters']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate/delete-activity/prison/{prisonCode}/id/{activityId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Delete an activity with cascade.
     * @description
     *           Deletes an activity and all its child entities including schedule, slots, pay, instances, attendances and allocations.
     *           Only for use via by migration services to undo a failed migration.
     *
     *
     *     Requires one of the following roles:
     *     * NOMIS_ACTIVITIES
     */
    delete: operations['deleteActivity']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/migrate-appointment/{prisonCode}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     *
     *           Starts a job to delete migrated appointments taking place at the supplied prison code that start on or after the
     *           supplied start date and are assigned the optional category code.
     *
     * @description
     *           Migrated appointments matching the supplied criteria will be soft deleted in the database. An appointment instance
     *           deleted domain event used for syncing will be published for each deleted appointment. This will cause the mapped
     *           appointment in NOMIS to also be deleted.
     *
     *
     *     Requires one of the following roles:
     *     * NOMIS_APPOINTMENTS
     *     * ACTIVITY_ADMIN
     *     * MIGRATE_APPOINTMENTS
     */
    delete: operations['deleteMigratedAppointments']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /** @description Describes a case note to be added to a prisoner's profile */
    AddCaseNoteRequest: {
      /**
       * @description Case Note Type
       * @example GEN
       * @enum {string}
       */
      type: 'GEN' | 'NEG'
      /** @description The text which will appear on the case note. */
      text: string
    }
    /** @description The prisoner deallocation request details */
    PrisonerDeallocationRequest: {
      /** @description The prisoner or prisoners to be deallocated. Must be allocated to the schedule affected by the request. */
      prisonerNumbers: string[]
      /**
       * @description The reason code for the deallocation
       * @example RELEASED
       * @enum {string}
       */
      reasonCode:
        | 'OTHER'
        | 'PERSONAL'
        | 'PROBLEM'
        | 'REMOVED'
        | 'SECURITY'
        | 'UNACCEPTABLE_ATTENDANCE'
        | 'UNACCEPTABLE_BEHAVIOUR'
        | 'WITHDRAWN'
      /**
       * Format: date
       * @description The future date on which this allocation will end. Must not exceed the end date of the allocation, schedule or activity.
       * @example 2023-05-24
       */
      endDate: string
      caseNote?: components['schemas']['AddCaseNoteRequest']
      /**
       * Format: int64
       * @description The scheduled instance id required when de-allocation is a session later today
       */
      scheduleInstanceId?: number
    }
    ErrorResponse: {
      /** Format: int32 */
      status: number
      /** Format: int32 */
      errorCode?: number
      userMessage?: string
      developerMessage?: string
      moreInfo?: string
    }
    /** @description The uncancel request with the user details */
    UncancelScheduledInstanceRequest: {
      /**
       * @description The username of the user performing the unschedule operation
       * @example RJ56DDE
       */
      username: string
      /**
       * @description The displayName of the user performing the unschedule operation
       * @example Bob Adams
       */
      displayName: string
    }
    /** @description The scheduled instance cancellation request */
    ScheduleInstanceCancelRequest: {
      /**
       * @description The reason for cancelling the schedule instance
       * @example No tutor available
       */
      reason: string
      /**
       * @description The username of the user cancelling the schedule instance
       * @example RJ56DDE
       */
      username: string
      /**
       * @description A field for any additional comments
       * @example Resume tomorrow
       */
      comment?: string
    }
    RetryDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    PurgeQueueResult: {
      /** Format: int32 */
      messagesFoundCount: number
    }
    /** @description Request object for updating an attendance record */
    AttendanceUpdateRequest: {
      /**
       * Format: int64
       * @description The internally-generated ID for this attendance
       * @example 123456
       */
      id: number
      /**
       * @description The prison code
       * @example MDI
       */
      prisonCode: string
      /**
       * @description The status - WAITING, COMPLETED
       * @example WAITING
       * @enum {string}
       */
      status: 'WAITING' | 'COMPLETED'
      /**
       * @description The reason codes- SICK, REFUSED, NOT_REQUIRED, REST, CLASH, OTHER, SUSPENDED, CANCELLED, ATTENDED
       * @example ATTENDED
       */
      attendanceReason?: string
      /**
       * @description Comments such as more detail for SICK
       * @example Prisoner has COVID-19
       */
      comment?: string
      /**
       * @description Should payment be issued for SICK, REST or OTHER. Will be ignored if the activity is unpaid.
       * @example true
       */
      issuePayment?: boolean
      /**
       * @description Case note provided for REFUSED
       * @example Prisoner refused to attend the scheduled activity without reasonable excuse
       */
      caseNote?: string
      /**
       * @description Was an incentive level warning issued for REFUSED
       * @example true
       */
      incentiveLevelWarningIssued?: boolean
      /**
       * @description The absence reason for OTHER
       * @example Prisoner has another reason for missing the activity
       */
      otherAbsenceReason?: string
    }
    /** @description The uncancel request with the uncancellation details and how to apply the uncancellation */
    AppointmentUncancelRequest: {
      /**
       * @description
       *         Specifies which appointment or appointments this un-cancellation should apply to.
       *         Defaults to THIS_APPOINTMENT meaning the un-cancellation will be applied to the appointment specified by the
       *         supplied id only.
       *
       * @example THIS_APPOINTMENT
       * @enum {string}
       */
      applyTo: 'THIS_APPOINTMENT' | 'THIS_AND_ALL_FUTURE_APPOINTMENTS' | 'ALL_FUTURE_APPOINTMENTS'
    }
    /** @description
     *       Described on the UI as an "Appointment" and represents the scheduled event on a specific date and time.
     *       All updates and cancellations happen at this appointment level with the parent appointment series being immutable.
     *        */
    Appointment: {
      /**
       * Format: int64
       * @description The internally generated identifier for this appointment
       * @example 123456
       */
      id: number
      /**
       * Format: int32
       * @description The sequence number of this appointment within the appointment series
       * @example 3
       */
      sequenceNumber: number
      /**
       * @description The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS
       * @example SKI
       */
      prisonCode: string
      /**
       * @description The NOMIS REFERENCE_CODES.CODE (DOMAIN = 'INT_SCH_RSN') value for mapping to NOMIS
       * @example CHAP
       */
      categoryCode: string
      tier?: components['schemas']['EventTier']
      organiser?: components['schemas']['EventOrganiser']
      /**
       * @description
       *         Free text name further describing the appointment. Used as part of the appointment name with the
       *         format "Custom name (Category description) if specified.
       *
       * @example Meeting with the governor
       */
      customName?: string
      /**
       * Format: int64
       * @description
       *         The NOMIS AGENCY_INTERNAL_LOCATIONS.INTERNAL_LOCATION_ID value for mapping to NOMIS.
       *         Will be null if in cell = true
       *
       * @example 123
       */
      internalLocationId?: number
      /**
       * @description
       *         Flag to indicate if the location of the appointment is in cell rather than an internal prison location.
       *         Internal location id should be null if in cell = true
       *
       * @example false
       */
      inCell: boolean
      /**
       * Format: date
       * @description The date this appointment is taking place on
       */
      startDate: string
      /**
       * Format: partial-time
       * @description The starting time of this appointment
       * @example 13:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time of this appointment
       * @example 13:30
       */
      endTime?: string
      /**
       * @description
       *         Extra information for the prisoner or prisoners attending this appointment.
       *         Shown only on the appointments details page and on printed movement slips. Wing staff will be notified there is
       *         extra information via the unlock list.
       *
       * @example This appointment will help adjusting to life outside of prison
       */
      extraInformation?: string
      /**
       * Format: date-time
       * @description The date and time this appointment was created. Will not change
       */
      createdTime: string
      /**
       * @description
       *         The username of the user authenticated via HMPPS auth that created the appointment.
       *         Usually a NOMIS username
       *
       * @example AAA01U
       */
      createdBy: string
      /**
       * Format: date-time
       * @description
       *         The date and time this appointment was last changed.
       *         Will be null if this appointment has not been altered since it was created
       *
       */
      updatedTime?: string
      /**
       * @description
       *         The username of the user authenticated via HMPPS auth that edited this appointment.
       *         Will be null if this appointment has not been altered since it was created
       *
       * @example AAA01U
       */
      updatedBy?: string
      /**
       * Format: date-time
       * @description
       *         The date and time this appointment was cancelled.
       *         Will be null if this appointment has not been cancelled
       *
       */
      cancelledTime?: string
      /**
       * Format: int64
       * @description
       *         The id of the reason why this appointment was cancelled.
       *         Will be null if this appointment has not been cancelled
       *
       * @example 12345
       */
      cancellationReasonId?: number
      /**
       * @description
       *         The username of the user authenticated via HMPPS auth that cancelled this appointment.
       *         Will be null if this appointment has not been cancelled
       *
       * @example AAA01U
       */
      cancelledBy?: string
      /**
       * @description
       *         Indicates that this appointment has been deleted and removed from scheduled events.
       *
       * @example false
       */
      isDeleted: boolean
      /** @description
       *         The prisoner or prisoners attending this appointment. Single appointments such as medical will have one
       *         attendee. A group appointment e.g. gym or chaplaincy sessions will have more than one attendee.
       *         Attendees are at the appointment level supporting alteration of attendees in any future appointment.
       *          */
      attendees: components['schemas']['AppointmentAttendee'][]
      isCancelled: boolean
    }
    /** @description
     *       Described on the UI as an "Attendee". A prisoner attending a specific appointment in an appointment series or set.
     *        */
    AppointmentAttendee: {
      /**
       * Format: int64
       * @description
       *         The internally generated identifier for this prisoner attending a specific appointment in an appointment series or set.
       *         N.B. this is used as the appointment instance id due to there being a one to one relationship between an appointment
       *         attendee and appointment instances.
       *
       * @example 123456
       */
      id: number
      /**
       * @description The NOMIS OFFENDERS.OFFENDER_ID_DISPLAY value for mapping to a prisoner record in NOMIS
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description The NOMIS OFFENDER_BOOKINGS.OFFENDER_BOOK_ID value for mapping to a prisoner booking record in NOMIS
       * @example 456
       */
      bookingId: number
      /**
       * Format: date-time
       * @description
       *         The date and time this attendee was added appointment.
       *         Will be null if this attendee was part of the appointment when the appointment was created
       *
       */
      addedTime?: string
      /**
       * @description
       *         The username of the user authenticated via HMPPS auth that added this attendee to the appointment.
       *         Will be null if this attendee was part of the appointment when the appointment was created
       *
       * @example AAA01U
       */
      addedBy?: string
      /** @description
       *         Specifies whether the prisoner attended the specific appointment in an appointment series or set.
       *         A null value means that the prisoner's attendance has not been recorded yet.
       *          */
      attended?: boolean
      /**
       * Format: date-time
       * @description
       *         The latest date and time attendance was recorded. Note that attendance records can be updated and this is the most
       *         recent date and time it was recorded. A null value means that the prisoner's attendance has not been recorded yet.
       *
       */
      attendanceRecordedTime?: string
      /**
       * @description
       *         The username of the user authenticated via HMPPS auth that last recorded attendance. Note that attendance records
       *         can be updated and this is the most recent user that marked attendance. A null value means that the prisoner's
       *         attendance has not been recorded yet.
       *
       * @example AAA01U
       */
      attendanceRecordedBy?: string
      /**
       * Format: date-time
       * @description
       *         The date and time this attendee was removed from the appointment.
       *         Will be null if this attendee has not been removed from the appointment
       *
       */
      removedTime?: string
      /**
       * Format: int64
       * @description
       *         The id of the reason why this attendee was removed from the appointment.
       *         Will be null if this attendee has not been removed from the appointment
       *
       * @example 12345
       */
      removalReasonId?: number
      /**
       * @description
       *         The username of the user authenticated via HMPPS auth that removed this attendee from the appointment.
       *         Will be null if this attendee has not been removed from the appointment
       *
       * @example AAA01U
       */
      removedBy?: string
    }
    /** @description
     *       Described on the UI as an "Appointment series" and only shown for repeat appointments.
     *       The top level of the standard appointment hierarchy containing the initial property values common to all appointments
     *       in the series.
     *       Contains the collection of all the child appointments in the series plus the schedule definition if the appointment series repeats.
     *       The properties at this level cannot be changed via the API however the child appointment property values can be changed
     *       independently to support rescheduling, cancelling and altered attendee lists per appointment.
     *       N.B. there is no collection of attending prisoners at this top level as all attendees are per appointment. This is to
     *       support attendee modification for each scheduled appointment and to prevent altering the past by editing attendees
     *       in an appointment series where some appointments have past.
     *        */
    AppointmentSeries: {
      /**
       * Format: int64
       * @description The internally generated identifier for this appointment series
       * @example 12345
       */
      id: number
      /**
       * @description The appointment type (INDIVIDUAL or GROUP)
       * @example INDIVIDUAL
       * @enum {string}
       */
      appointmentType: 'INDIVIDUAL' | 'GROUP'
      /**
       * @description The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS
       * @example SKI
       */
      prisonCode: string
      /**
       * @description The NOMIS REFERENCE_CODES.CODE (DOMAIN = 'INT_SCH_RSN') value for mapping to NOMIS
       * @example CHAP
       */
      categoryCode: string
      tier?: components['schemas']['EventTier']
      organiser?: components['schemas']['EventOrganiser']
      /**
       * @description
       *         Free text name further describing the appointment series. Used as part of the appointment name with the
       *         format "Custom name (Category description) if specified.
       *
       * @example Meeting with the governor
       */
      customName?: string
      /**
       * Format: int64
       * @description
       *         The NOMIS AGENCY_INTERNAL_LOCATIONS.INTERNAL_LOCATION_ID value for mapping to NOMIS.
       *         Will be null if in cell = true
       *
       * @example 123
       */
      internalLocationId?: number
      /**
       * @description
       *         Flag to indicate if the location of the appointment series is in cell rather than an internal prison location.
       *         Internal location id should be null if in cell = true
       *
       * @example false
       */
      inCell: boolean
      /**
       * Format: date
       * @description The date of the first appointment in the series
       */
      startDate: string
      /**
       * Format: partial-time
       * @description The starting time of the appointment or appointments in the series
       * @example 09:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time of the appointment or appointments in the series
       * @example 10:30
       */
      endTime?: string
      schedule?: components['schemas']['AppointmentSeriesSchedule']
      /**
       * @description
       *         Extra information for the prisoner or prisoners attending the appointment or appointments in the series.
       *         Shown only on the appointments details page and on printed movement slips. Wing staff will be notified there is
       *         extra information via the unlock list.
       *
       * @example This appointment will help adjusting to life outside of prison
       */
      extraInformation?: string
      /**
       * Format: date-time
       * @description The date and time this appointment series was created. Will not change
       */
      createdTime: string
      /**
       * @description
       *         The username of the user authenticated via HMPPS auth that created the appointment series.
       *         Usually a NOMIS username
       *
       * @example AAA01U
       */
      createdBy: string
      /**
       * Format: date-time
       * @description
       *         The date and time one or more appointments in this series was last changed.
       *         Will be null if no appointments in the series have been altered since they were created
       *
       */
      updatedTime?: string
      /**
       * @description
       *         The username of the user authenticated via HMPPS auth that last edited one or more appointments in this series.
       *         Will be null if no appointments in the series have been altered since they were created
       *
       * @example AAA01U
       */
      updatedBy?: string
      /** @description
       *         The individual appointment or appointments in this series. Non recurring appointment series will have a single
       *         appointment containing the same property values as the parent appointment series. The same start date, time
       *         and end time. Recurring appointment series will have one or more appointments. The first in the series will also
       *         contain the same property values as the parent appointment series and subsequent appointments will have start dates
       *         following on from the original start date incremented as specified by the series' schedule. Each appointment
       *         can be edited independently of the parent. All properties of an appointment are separate to those of the parent
       *         appointment series. The full series of appointments specified by the schedule will have been created in advance.
       *          */
      appointments: components['schemas']['Appointment'][]
    }
    /** @description
     *       Describes the schedule of the appointment i.e. how the appointments in the series will repeat. The frequency of
     *       those appointments and how many appointments there will be in total in the series.
     *        */
    AppointmentSeriesSchedule: {
      /**
       * @description
       *         The frequency of the appointments in the repeating appointment series. When they will repeat and how often
       *
       * @example WEEKLY
       * @enum {string}
       */
      frequency: 'WEEKDAY' | 'DAILY' | 'WEEKLY' | 'FORTNIGHTLY' | 'MONTHLY'
      /**
       * Format: int32
       * @description
       *         The original total number of appointments in the appointment series i.e. the number that were created initially
       *         without excluding any that were subsequently cancelled or deleted
       *
       * @example 6
       */
      numberOfAppointments: number
    }
    /** @description An event organiser */
    EventOrganiser: {
      /**
       * Format: int64
       * @description The internally-generated ID for this event organiser
       * @example 1
       */
      id: number
      /**
       * @description The code for this event organiser
       * @example PRISON_STAFF
       */
      code: string
      /**
       * @description The detailed description for this event organiser
       * @example Prison staff
       */
      description: string
    }
    /** @description An event tier */
    EventTier: {
      /**
       * Format: int64
       * @description The internally-generated ID for this event tier
       * @example 1
       */
      id: number
      /**
       * @description The code for this event tier
       * @example TIER_1
       */
      code: string
      /**
       * @description The detailed description for this event tier
       * @example Work, education and maintenance
       */
      description: string
    }
    /** @description The cancel request with the cancellation details and how to apply the cancellation */
    AppointmentCancelRequest: {
      /**
       * Format: int64
       * @description
       *         Specifies the id of the reason for the cancellation. The cancellation reason, identified by this id, will determine
       *         whether the cancellation is also treated as a soft delete
       *
       * @example 1234
       */
      cancellationReasonId: number
      /**
       * @description
       *         Specifies which appointment or appointments this cancellation should apply to.
       *         Defaults to THIS_APPOINTMENT meaning the cancellation will be applied to the appointment specified by the
       *         supplied id only.
       *
       * @example THIS_APPOINTMENT
       * @enum {string}
       */
      applyTo: 'THIS_APPOINTMENT' | 'THIS_AND_ALL_FUTURE_APPOINTMENTS' | 'ALL_FUTURE_APPOINTMENTS'
    }
    /** @description The lists of prison numbers to mark as attended and non-attended */
    AppointmentAttendanceRequest: {
      /**
       * @description The prisoner or prisoners that attended the appointment
       * @example [
       *       "A1234BC"
       *     ]
       */
      attendedPrisonNumbers: string[]
      /**
       * @description The prisoner or prisoners that did not attended the appointment
       * @example [
       *       "A1234BC"
       *     ]
       */
      nonAttendedPrisonNumbers: string[]
    }
    /** @description
     *       Describes how to update attendances for multiple appointments.
     *        */
    MultipleAppointmentAttendanceRequest: {
      /**
       * Format: int64
       * @description The appointment id of the appointment which is being marked
       * @example 123
       */
      appointmentId: number
      /** @description The list of prisoner numbers to update */
      prisonerNumbers: string[]
    }
    /** @description Search filters */
    WaitingListSearchRequest: {
      /**
       * Format: date
       * @description Filter applications with a request date on or after provided date
       * @example 2023-06-20
       */
      applicationDateFrom?: string
      /**
       * Format: date
       * @description Filter applications with a request date on or before provided date
       * @example 2023-06-20
       */
      applicationDateTo?: string
      /**
       * Format: int64
       * @description The activity to return waiting list applications for.
       * @example 3
       */
      activityId?: number
      /**
       * @description The prisoner or prisoners to retrieve waiting list applications for.
       * @example [
       *       "A1234BC"
       *     ]
       */
      prisonerNumbers?: string[]
      /**
       * @description Filter by the status of the application. PENDING, APPROVED or DECLINED.
       * @example [
       *       "DECLINED",
       *       "PENDING"
       *     ]
       */
      status?: ('PENDING' | 'APPROVED' | 'DECLINED' | 'ALLOCATED' | 'REMOVED')[]
    }
    /** @description Summary of a prisoner's sentence and resulting earliest release date */
    EarliestReleaseDate: {
      /**
       * Format: date
       * @description The prisoner's earliest release date
       * @example 2027-09-20
       */
      releaseDate?: string
      /** @description The prisoner's earliest release date is the tariff date */
      isTariffDate: boolean
      /** @description The prisoner's sentence is indeterminate */
      isIndeterminateSentence: boolean
      /** @description The prisoner is an immigration detainee */
      isImmigrationDetainee: boolean
      /** @description The prisoner is convicted and unsentenced */
      isConvictedUnsentenced: boolean
      /** @description The prisoner is on remand */
      isRemand: boolean
    }
    PageableObject: {
      /** Format: int64 */
      offset?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      pageSize?: number
      unpaged?: boolean
      /** Format: int32 */
      pageNumber?: number
      paged?: boolean
    }
    PagedWaitingListApplication: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['WaitingListApplication'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    SortObject: {
      empty?: boolean
      sorted?: boolean
      unsorted?: boolean
    }
    /** @description Describes a single waiting list application for a prisoner who is waiting to be allocated to an activity. */
    WaitingListApplication: {
      /**
       * Format: int64
       * @description The internally-generated ID for this waiting list
       * @example 111111
       */
      id: number
      /**
       * Format: int64
       * @description The internally-generated ID for the associated activity
       * @example 1000
       */
      activityId: number
      /**
       * Format: int64
       * @description The internally-generated ID for the associated activity schedule
       * @example 222222
       */
      scheduleId: number
      /**
       * Format: int64
       * @description The internally-generated ID for the associated allocation
       * @example 333333
       */
      allocationId?: number
      /**
       * @description The prison code for this waiting list
       * @example PVI
       */
      prisonCode: string
      /**
       * @description The prisoner number (NOMIS ID) for this waiting list
       * @example A1234AA
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description The prisoner booking id (NOMIS ID) for this waiting list
       * @example 10001
       */
      bookingId: number
      /**
       * @description The status of this waiting list
       * @example PENDING
       * @enum {string}
       */
      status: 'PENDING' | 'APPROVED' | 'DECLINED' | 'ALLOCATED' | 'REMOVED'
      /**
       * Format: date-time
       * @description The date and time the waiting list status was last updated
       */
      statusUpdatedTime?: string
      /**
       * Format: date
       * @description The past or present date on which the waiting list was requested
       * @example 2023-06-23
       */
      requestedDate: string
      /**
       * @description The person who made the request for this waiting list
       * @example Fred Bloggs
       */
      requestedBy: string
      /**
       * @description Any particular comments related to this waiting list
       * @example The prisoner has specifically requested to attend this activity
       */
      comments?: string
      /**
       * @description The reason for the waiting list request to be declined (null if status is not declined)
       * @example The prisoner has specifically requested to attend this activity
       */
      declinedReason?: string
      /**
       * Format: date-time
       * @description The date and time the waiting list was first created
       */
      creationTime: string
      /**
       * @description The person who created the waiting list i.e the user at the time
       * @example Jon Doe
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The date and time the waiting list was last updated
       */
      updatedTime?: string
      /**
       * @description The person who last made changes to the waiting list
       * @example Jane Doe
       */
      updatedBy?: string
      earliestReleaseDate: components['schemas']['EarliestReleaseDate']
      /** @description Does the prisoner have non-associations? Null implies that non-associations could not be retrieved */
      nonAssociations?: boolean
    }
    /** @description Describes an event to be published to the domain events SNS topic */
    PublishEventUtilityModel: {
      /**
       * @description The outbound event to be published
       * @enum {string}
       */
      outboundEvent:
        | 'ACTIVITY_SCHEDULE_CREATED'
        | 'ACTIVITY_SCHEDULE_UPDATED'
        | 'ACTIVITY_SCHEDULED_INSTANCE_AMENDED'
        | 'PRISONER_ALLOCATED'
        | 'PRISONER_ALLOCATION_AMENDED'
        | 'PRISONER_ATTENDANCE_CREATED'
        | 'PRISONER_ATTENDANCE_AMENDED'
        | 'PRISONER_ATTENDANCE_DELETED'
        | 'PRISONER_ATTENDANCE_EXPIRED'
        | 'APPOINTMENT_INSTANCE_CREATED'
        | 'APPOINTMENT_INSTANCE_UPDATED'
        | 'APPOINTMENT_INSTANCE_DELETED'
        | 'APPOINTMENT_INSTANCE_CANCELLED'
        | 'APPOINTMENT_INSTANCE_UNCANCELLED'
      /**
       * @description A list of entity identifiers to be published with the event
       * @example [
       *       1,
       *       2
       *     ]
       */
      identifiers: number[]
    }
    /** @description The prisoner allocation request details */
    PrisonerAllocationRequest: {
      /**
       * @description The prisoner number (Nomis ID)
       * @example A1234AA
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description Where a prison uses pay bands to differentiate earnings, this is the pay band code given to this prisoner. Can be null for unpaid activities.
       * @example 1
       */
      payBandId?: number
      /**
       * Format: date
       * @description The date when the prisoner will start the activity
       * @example 2022-09-10
       */
      startDate: string
      /**
       * Format: date
       * @description The date when the prisoner will stop attending the activity
       * @example 2023-09-10
       */
      endDate?: string
      /** @description The days and times that the prisoner is excluded from this activity's schedule */
      exclusions?: components['schemas']['Slot'][]
      /**
       * Format: int64
       * @description The scheduled instance id required when allocation starts today
       */
      scheduleInstanceId?: number
    }
    /** @description
     *         Describes time slot and day (or days) the scheduled activity would run. At least one day must be specified.
     *
     *         e.g. 'AM, Monday, Wednesday and Friday' or 'PM Tuesday, Thursday, Sunday'
     *        */
    Slot: {
      /**
       * Format: int32
       * @description The week of the schedule this slot relates to
       * @example 1
       */
      weekNumber: number
      /**
       * @description The time slot of the activity schedule
       * @enum {string}
       */
      timeSlot: 'AM' | 'PM' | 'ED'
      monday: boolean
      tuesday: boolean
      wednesday: boolean
      thursday: boolean
      friday: boolean
      saturday: boolean
      sunday: boolean
      /** Format: partial-time */
      customStartTime?: string
      /** Format: partial-time */
      customEndTime?: string
      daysOfWeek: ('MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY')[]
    }
    /** @description Describes a top-level activity category */
    ActivityCategory: {
      /**
       * Format: int64
       * @description The internally-generated identifier for this activity category
       * @example 1
       */
      id: number
      /**
       * @description The activity category code
       * @example LEISURE_SOCIAL
       */
      code: string
      /**
       * @description The name of the activity category
       * @example Leisure and social
       */
      name: string
      /**
       * @description The description of the activity category
       * @example Such as association, library time and social clubs, like music or art
       */
      description?: string
    }
    /** @description Describes a top-level activity */
    ActivityLite: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity
       * @example 123456
       */
      id: number
      /**
       * @description The prison code where this activity takes place
       * @example PVI
       */
      prisonCode: string
      /**
       * @description Flag to indicate if attendance is required for this activity, e.g. gym induction might not be mandatory attendance
       * @example false
       */
      attendanceRequired: boolean
      /**
       * @description Flag to indicate if the location of the activity is in cell
       * @example false
       */
      inCell: boolean
      /**
       * @description Flag to indicate if the location of the activity is on wing
       * @example false
       */
      onWing: boolean
      /**
       * @description Flag to indicate if the location of the activity is off wing and not in a listed location
       * @example false
       */
      offWing: boolean
      /**
       * @description Flag to indicate if the activity is piece work
       * @example false
       */
      pieceWork: boolean
      /**
       * @description Flag to indicate if the activity carried out outside of the prison
       * @example false
       */
      outsideWork: boolean
      /**
       * @description Indicates whether the activity session is a (F)ull day or a (H)alf day (for payment purposes).
       * @example H
       * @enum {string}
       */
      payPerSession: 'H' | 'F'
      /**
       * @description A brief summary description of this activity for use in forms and lists
       * @example Maths level 1
       */
      summary: string
      /**
       * @description A detailed description for this activity
       * @example A basic maths course suitable for introduction to the subject
       */
      description?: string
      category: components['schemas']['ActivityCategory']
      /**
       * @description The most recent risk assessment level for this activity
       * @example high
       */
      riskLevel: string
      /** @description The list of minimum education levels that can apply to this activity */
      minimumEducationLevel: components['schemas']['ActivityMinimumEducationLevel'][]
      /**
       * Format: date
       * @description The date on which this activity ends. From this date, there will be no more planned instances of the activity. If null, the activity has no end date and will be scheduled indefinitely.
       * @example 2022-12-21
       */
      endDate?: string
      /**
       * Format: int32
       * @description The capacity of the activity
       */
      capacity: number
      /**
       * Format: int32
       * @description The number of prisoners currently allocated to the activity
       */
      allocated: number
      /**
       * Format: date-time
       * @description The date and time when this activity was created
       */
      createdTime: string
      /**
       * @description Whether the activity is live or archived
       * @example live
       * @enum {string}
       */
      activityState: 'ARCHIVED' | 'LIVE'
      /**
       * @description Whether the activity is a paid activity
       * @example true
       */
      paid: boolean
    }
    /** @description Describes the minimum education levels which apply to an activity */
    ActivityMinimumEducationLevel: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity minimum education level
       * @example 123456
       */
      id: number
      /**
       * @description The education level code
       * @example Basic
       */
      educationLevelCode: string
      /**
       * @description The education level description
       * @example Basic
       */
      educationLevelDescription: string
      /**
       * @description The study area code
       * @example ENGLA
       */
      studyAreaCode: string
      /**
       * @description The study area description
       * @example English Language
       */
      studyAreaDescription: string
    }
    /** @description Describes one instance of an activity schedule */
    ActivityScheduleInstance: {
      /**
       * Format: int64
       * @description The internally-generated ID for this scheduled instance
       * @example 123456
       */
      id: number
      /**
       * Format: date
       * @description The specific date for this scheduled instance
       * @example 2022-09-30
       */
      date: string
      /**
       * Format: partial-time
       * @description The start time for this scheduled instance
       * @example 09:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time for this scheduled instance
       * @example 10:00
       */
      endTime: string
      /**
       * @description Time slot of the scheduled instance
       * @enum {string}
       */
      timeSlot: 'AM' | 'PM' | 'ED'
      /**
       * @description Flag to indicate if this scheduled instance has been cancelled since being scheduled
       * @example false
       */
      cancelled: boolean
      /**
       * Format: date-time
       * @description Date and time this scheduled instance was cancelled (or null if not cancelled)
       */
      cancelledTime?: string
      /**
       * @description The person who cancelled this scheduled instance (or null if not cancelled)
       * @example Adam Smith
       */
      cancelledBy?: string
      /**
       * @description The reason this scheduled instance was cancelled
       * @example Staff unavailable
       */
      cancelledReason?: string
      /**
       * @description Comment on cancelling
       * @example Teacher unavailable
       */
      comment?: string
      /**
       * Format: int64
       * @description The id for the previous scheduled instance
       * @example 123456
       */
      previousScheduledInstanceId?: number
      /**
       * Format: date
       * @description The date for the previous scheduled instance
       * @example 2022-09-30
       */
      previousScheduledInstanceDate?: string
      /**
       * Format: int64
       * @description The id for the next scheduled instance
       * @example 123456
       */
      nextScheduledInstanceId?: number
      /**
       * Format: date
       * @description The date for the next scheduled instance
       * @example 2022-09-30
       */
      nextScheduledInstanceDate?: string
      /** @description The list of attendees */
      attendances: components['schemas']['Attendance'][]
      activitySchedule: components['schemas']['ActivityScheduleLite']
    }
    /** @description
     *       Describes the weekly schedule for an activity. There can be several of these defined for one activity.
     *       An activity schedule describes when, during the week, an activity will be run and where.
     *       e.g. Tuesday PM and Thursday AM - suitable for Houseblock 2 to attend.
     *       e.g. Monday AM and Thursday PM - suitable for Houseblock 3 to attend.
     *       this 'lite' version of ActivitySchedule does not have allocated or instances.
     *        */
    ActivityScheduleLite: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity schedule
       * @example 123456
       */
      id: number
      /**
       * @description The description of this activity schedule
       * @example Monday AM Houseblock 3
       */
      description: string
      internalLocation?: components['schemas']['InternalLocation']
      /**
       * Format: int32
       * @description The maximum number of prisoners allowed for a scheduled instance of this schedule
       * @example 10
       */
      capacity: number
      activity: components['schemas']['ActivityLite']
      /**
       * Format: int32
       * @description The number of weeks in the schedule
       * @example 1
       */
      scheduleWeeks: number
      /** @description The slots associated with this activity schedule */
      slots: components['schemas']['ActivityScheduleSlot'][]
      /**
       * Format: date
       * @description The date on which this schedule will start. From this date, any schedules will be created as real, planned instances
       * @example 2022-09-21
       */
      startDate: string
      /**
       * Format: date
       * @description The date on which this schedule will end. From this date, any schedules will be created as real, planned instances
       * @example 2022-10-21
       */
      endDate?: string
      /** @description a flag to indicate if this activity is scheduled according to prison standard regime times */
      usePrisonRegimeTime: boolean
    }
    /** @description
     *       Describes a slot for an activity schedule. There can be several of these defined for one activity schedule.
     *       An activity schedule slot describes when, during the week, an activity will be run.
     *       e.g. Tuesday PM on a Monday and Thursday.
     *        */
    ActivityScheduleSlot: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity schedule slot
       * @example 123456
       */
      id: number
      /**
       * @description Activity schedule timeslot
       * @enum {string}
       */
      timeSlot: 'AM' | 'PM' | 'ED'
      /**
       * Format: int32
       * @description The week of the schedule this slot relates to
       * @example 1
       */
      weekNumber: number
      /**
       * Format: partial-time
       * @description The time that any instances of this schedule slot will start
       * @example 9:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The time that any instances of this schedule slot will finish
       * @example 11:30
       */
      endTime: string
      /**
       * @description The days of the week on which the schedule slot takes place
       * @example [Mon,Tue,Wed]
       */
      daysOfWeek: string[]
      /**
       * @description Indicates whether the schedule slot takes place on a Monday
       * @example true
       */
      mondayFlag: boolean
      /**
       * @description Indicates whether the schedule slot takes place on a Tuesday
       * @example true
       */
      tuesdayFlag: boolean
      /**
       * @description Indicates whether the schedule slot takes place on a Wednesday
       * @example true
       */
      wednesdayFlag: boolean
      /**
       * @description Indicates whether the schedule slot takes place on a Thursday
       * @example false
       */
      thursdayFlag: boolean
      /**
       * @description Indicates whether the schedule slot takes place on a Friday
       * @example false
       */
      fridayFlag: boolean
      /**
       * @description Indicates whether the schedule slot takes place on a Saturday
       * @example false
       */
      saturdayFlag: boolean
      /**
       * @description Indicates whether the schedule slot takes place on a Sunday
       * @example false
       */
      sundayFlag: boolean
    }
    /** @description An attendance record for a prisoner, can be marked or unmarked */
    Attendance: {
      /**
       * Format: int64
       * @description The internally-generated ID for this attendance
       * @example 123456
       */
      id: number
      /**
       * Format: int64
       * @description The ID for scheduled instance for this attendance
       * @example 123456
       */
      scheduleInstanceId: number
      /**
       * @description The prison number this attendance record is for
       * @example A1234AA
       */
      prisonerNumber: string
      attendanceReason?: components['schemas']['AttendanceReason']
      /**
       * @description Free text to allow comments to be put against the attendance
       * @example Prisoner was too unwell to attend the activity.
       */
      comment?: string
      /**
       * Format: date-time
       * @description The date and time the attendance was updated
       */
      recordedTime?: string
      /**
       * @description The person who updated the attendance
       * @example A.JONES
       */
      recordedBy?: string
      /**
       * @description WAITING or COMPLETED
       * @example WAITING
       */
      status: string
      /**
       * Format: int32
       * @description The amount in pence to pay the prisoner for the activity
       * @example 100
       */
      payAmount?: number
      /**
       * Format: int32
       * @description The bonus amount in pence to pay the prisoner for the activity
       * @example 50
       */
      bonusAmount?: number
      /** Format: int32 */
      pieces?: number
      /**
       * @description Should payment be issued for SICK, REST or OTHER
       * @example true
       */
      issuePayment?: boolean
      /**
       * @description Was an incentive level warning issued for REFUSED
       * @example true
       */
      incentiveLevelWarningIssued?: boolean
      /**
       * @description Free text to allow other reasons for non attendance against the attendance
       * @example Prisoner has a valid reason to miss the activity.
       */
      otherAbsenceReason?: string
      /**
       * @description Free text for any case note entered against the attendance record
       * @example Prisoner has refused to attend the activity without a valid reason to miss the activity.
       */
      caseNoteText?: string
      /** @description The attendance history records for this attendance */
      attendanceHistory: components['schemas']['AttendanceHistory'][]
      /**
       * @description Flag to show whether this attendance is editable
       * @example true
       */
      editable: boolean
      /**
       * @description Flag to indicate if the attendance is payable
       * @example true
       */
      payable: boolean
    }
    /** @description An attendance record for a prisoner, can be marked or unmarked */
    AttendanceHistory: {
      /**
       * Format: int64
       * @description The internally-generated ID for this attendance
       * @example 123456
       */
      id: number
      attendanceReason?: components['schemas']['AttendanceReason']
      /**
       * @description Free text to allow comments to be put against the attendance
       * @example Prisoner was too unwell to attend the activity.
       */
      comment?: string
      /**
       * Format: date-time
       * @description The date and time the attendance was updated
       */
      recordedTime: string
      /**
       * @description The person who updated the attendance
       * @example A.JONES
       */
      recordedBy: string
      /**
       * @description Should payment be issued for SICK, REST or OTHER
       * @example true
       */
      issuePayment?: boolean
      /**
       * @description Was an incentive level warning issued for REFUSED
       * @example true
       */
      incentiveLevelWarningIssued?: boolean
      /**
       * @description Free text to allow other reasons for non attendance against the attendance
       * @example Prisoner has a valid reason to miss the activity.
       */
      otherAbsenceReason?: string
      /**
       * @description Free text for any case note entered against the attendance record
       * @example Prisoner has refused to attend the activity without a valid reason to miss the activity.
       */
      caseNoteText?: string
    }
    /** @description The reason for attending or not */
    AttendanceReason: {
      /**
       * Format: int64
       * @description The internally generated identifier for this (non) attendance reason
       * @example 1
       */
      id: number
      /**
       * @description The code for the (non) attendance reason
       * @example SICK
       */
      code: string
      /**
       * @description The description of the (non) attendance reason
       * @example Sick
       */
      description: string
      /**
       * @description A flag to show whether the reason is Attended (true) or Not Attended (false)
       * @example true
       */
      attended: boolean
      /**
       * @description A flag to show whether or not to capture whether the prisoner should still be paid
       * @example true
       */
      capturePay: boolean
      /**
       * @description A flag to show whether or not to capture more detail
       * @example true
       */
      captureMoreDetail: boolean
      /**
       * @description A flag to show whether or not to capture a case note
       * @example true
       */
      captureCaseNote: boolean
      /**
       * @description A flag to show whether or not to capture whether an incentive level warning has been issued due to non attendance
       * @example false
       */
      captureIncentiveLevelWarning: boolean
      /**
       * @description A flag to show whether or not to capture other text
       * @example false
       */
      captureOtherText: boolean
      /**
       * @description A flag to show whether or not the reason should be displayed in the UI as an option for non attendance
       * @example false
       */
      displayInAbsence: boolean
      /**
       * @description The sequence in which the reason should be displayed in the UI
       * @example 1
       */
      displaySequence?: number
      /**
       * @description Any internal notes to explain the use of the reason
       * @example Maps to ACCAB in NOMIS
       */
      notes: string
    }
    /**
     * @description An internal NOMIS location for an activity to take place
     * @example 98877667
     */
    InternalLocation: {
      /**
       * Format: int32
       * @description The NOMIS internal location id for this schedule
       * @example 98877667
       */
      id: number
      /**
       * @description The NOMIS internal location code for this schedule
       * @example EDU-ROOM-1
       */
      code: string
      /**
       * @description The NOMIS internal location description for this schedule
       * @example Education - R1
       */
      description: string
    }
    /** @description Describes a prisons scheduled events */
    PrisonerScheduledEvents: {
      /**
       * @description The prison code for these scheduled events
       * @example MDI
       */
      prisonCode?: string
      /**
       * @description The set of prisoner numbers for theses scheduled events
       * @example ['GF10101', 'GR123YI']
       */
      prisonerNumbers?: string[]
      /**
       * Format: date
       * @description The start date for this collection of scheduled events
       * @example 2022-11-01
       */
      startDate?: string
      /**
       * Format: date
       * @description The end date (inclusive) for this collection of scheduled events
       * @example 2022-11-28
       */
      endDate?: string
      /** @description A list of scheduled appointments for this prisoner in this date range */
      appointments?: components['schemas']['ScheduledEvent'][]
      /** @description A list of (active) scheduled court hearings for this prisoner in this date range */
      courtHearings?: components['schemas']['ScheduledEvent'][]
      /** @description A list of scheduled visits for this prisoner in this date range */
      visits?: components['schemas']['ScheduledEvent'][]
      /** @description A list of scheduled activities for this prisoner in this date range */
      activities?: components['schemas']['ScheduledEvent'][]
      /** @description A list of external transfers for this prisoner in this date range */
      externalTransfers?: components['schemas']['ScheduledEvent'][]
      /** @description A list of adjudications for this prisoner in this date range */
      adjudications?: components['schemas']['ScheduledEvent'][]
    }
    /** @description Describes a scheduled event */
    ScheduledEvent: {
      /**
       * @description The prison code for this scheduled event
       * @example MDI
       */
      prisonCode?: string
      /**
       * @description The source of this event - valid values are NOMIS or SAA (scheduling activities and appointments)
       * @example NOMIS
       */
      eventSource?: string
      /**
       * @description The event type (APPOINTMENT, ACTIVITY, COURT_HEARING, EXTERNAL_TRANSFER, ADJUDICATION_HEARING, VISIT)
       * @example APPOINTMENT
       */
      eventType?: string
      /**
       * Format: int64
       * @description For activities from SAA the ID for the activity scheduled instance, or null when from NOMIS
       * @example 9999
       */
      scheduledInstanceId?: number
      /**
       * Format: int64
       * @description For appointments from SAA the ID for the appointment series, or null when from NOMIS
       * @example 9999
       */
      appointmentSeriesId?: number
      /**
       * Format: int64
       * @description For appointments from SAA the ID for the appointment, or null when from NOMIS
       * @example 9999
       */
      appointmentId?: number
      /**
       * Format: int64
       * @description For appointments from SAA the ID for the appointment attendee, or null when from NOMIS
       * @example 9999
       */
      appointmentAttendeeId?: number
      /**
       * Format: int64
       * @description For adjudication hearings from NOMIS the ID for the OIC hearing, or null for other types
       * @example 9999
       */
      oicHearingId?: number
      /**
       * Format: int64
       * @description The event ID for events from NOMIS, otherwise null if from SAA
       * @example 10001
       */
      eventId?: number
      /**
       * Format: int64
       * @description The booking id of the prisoner this event relates to.
       * @example 10001
       */
      bookingId?: number
      /**
       * Format: int64
       * @description The NOMIS internal location id where this event takes place
       * @example 10001
       */
      internalLocationId?: number
      /**
       * @description The NOMIS location code for this event
       * @example 5-A-SIDE COM
       */
      internalLocationCode?: string
      /**
       * @description The NOMIS location user description for this event
       * @example GYM ORDERLY
       */
      internalLocationUserDescription?: string
      /**
       * @description The NOMIS location description for this event
       * @example MDI-GYM-5-A-SIDE COM
       */
      internalLocationDescription?: string
      /**
       * @description Event category code (e.g appointment category code, activity category code)
       * @example GOVE
       */
      categoryCode?: string
      /**
       * @description Event category description.
       * @example Governor
       */
      categoryDescription?: string
      /**
       * @description The event summary to show on unlock lists, schedules and calendars
       * @example Court hearing
       */
      summary?: string
      /**
       * @description Any comments supplied that relate to this event
       * @example Reception for 8am please.
       */
      comments?: string
      /**
       * @description Set to true if this event will take place in the prisoner's cell
       * @example false
       */
      inCell: boolean
      /**
       * @description Flag to indicate if the location of the activity is on wing
       * @example false
       */
      onWing: boolean
      /**
       * @description Flag to indicate if the location of the activity is off wing and not in a listed location
       * @example false
       */
      offWing: boolean
      /**
       * @description Set to true if this event takes place outside the prison
       * @example false
       */
      outsidePrison: boolean
      /**
       * @description Set to true if this event has been cancelled
       * @example false
       */
      cancelled: boolean
      /**
       * @description Set to true if this prisoner is suspended for this event (only applies to activities)
       * @example false
       */
      suspended: boolean
      /**
       * @description Set to true if this prisoner is auto-suspended for this event (only applies to activities)
       * @example false
       */
      autoSuspended: boolean
      /**
       * @description The prisoner number
       * @example GF10101
       */
      prisonerNumber?: string
      /**
       * Format: date
       * @description The specific date for this event
       * @example 2022-09-30
       */
      date?: string
      /**
       * Format: partial-time
       * @description The start time for this scheduled instance
       * @example 09:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time for this scheduled instance
       * @example 10:00
       */
      endTime?: string
      /**
       * Format: int32
       * @description The event priority - configurable by prison, or via defaults.
       */
      priority: number
      /**
       * Format: date
       * @description The start date of the first appointment cancelled in the series
       */
      appointmentSeriesCancellationStartDate?: string
      /**
       * Format: partial-time
       * @description The start time of the first appointment cancelled in the series
       * @example 10:30
       */
      appointmentSeriesCancellationStartTime?: string
      /**
       * @description The appointment series frequency
       * @example DAILY
       * @enum {string}
       */
      appointmentSeriesFrequency?: 'WEEKDAY' | 'DAILY' | 'WEEKLY' | 'FORTNIGHTLY' | 'MONTHLY'
      /**
       * @description Set to true if this activity is a paid activity
       * @example false
       */
      paidActivity?: boolean
      /**
       * @description Should activity payment be issued for SICK, REST or OTHER
       * @example true
       */
      issuePayment?: boolean
      /**
       * @description The activity attendance status - WAITING or COMPLETED
       * @example WAITING
       */
      attendanceStatus?: string
      /**
       * @description The code for the activity (non) attendance reason
       * @example SICK
       */
      attendanceReasonCode?: string
    }
    /** @description
     *       The details of an internal location that has events scheduled to take place there. Supports movement lists.
     *       Contains additional information about the events taking place at the location.
     *       The system of record for internal locations is NOMIS and they are managed in that application.
     *        */
    InternalLocationEvents: {
      /**
       * Format: int64
       * @description
       *         The id of the internal location. Mapped from AGENCY_INTERNAL_LOCATIONS.INTERNAL_LOCATION_ID in NOMIS.
       *
       * @example 27723
       */
      id: number
      /**
       * @description
       *         The prison code/agency id of the internal location. Mapped from AGENCY_LOCATIONS.AGY_LOC_ID in NOMIS.
       *
       * @example SKI
       */
      prisonCode: string
      /**
       * @description The code of the internal location. Mapped from AGENCY_INTERNAL_LOCATIONS.DESCRIPTION
       * @example EDUC-ED1-ED1
       */
      code: string
      /**
       * @description The description of the internal location. Mapped from AGENCY_INTERNAL_LOCATIONS.USER_DESC
       * @example Education 1
       */
      description: string
      /** @description Collection of scheduled events due to take place at the internal location */
      events: components['schemas']['ScheduledEvent'][]
    }
    /** @description prison regime slots for a day of the week */
    PrisonRegimeSlot: {
      /** @enum {string} */
      dayOfWeek: 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY'
      /** Format: partial-time */
      amStart: string
      /** Format: partial-time */
      amFinish: string
      /** Format: partial-time */
      pmStart: string
      /** Format: partial-time */
      pmFinish: string
      /** Format: partial-time */
      edStart: string
      /** Format: partial-time */
      edFinish: string
    }
    /** @description Describes a top-level activity */
    PrisonRegime: {
      /**
       * Format: int64
       * @description The internally-generated ID for this prison regime
       * @example 123456
       */
      id: number
      /**
       * @description The prison code where this activity takes place
       * @example MDI
       */
      prisonCode: string
      /**
       * Format: partial-time
       * @description The start time for the am slot
       * @example 09:00
       */
      amStart: string
      /**
       * Format: partial-time
       * @description The end time for the am slot
       * @example 12:00
       */
      amFinish: string
      /**
       * Format: partial-time
       * @description The start time for the pm slot
       * @example 13:00
       */
      pmStart: string
      /**
       * Format: partial-time
       * @description The end time for the pm slot
       * @example 16:30
       */
      pmFinish: string
      /**
       * Format: partial-time
       * @description The start time for the ed slot
       * @example 18:00
       */
      edStart: string
      /**
       * Format: partial-time
       * @description The end time for the ed slot
       * @example 20:00
       */
      edFinish: string
      /**
       * @description day of week the regime is applicable to
       * @enum {string}
       */
      dayOfWeek: 'MONDAY' | 'TUESDAY' | 'WEDNESDAY' | 'THURSDAY' | 'FRIDAY' | 'SATURDAY' | 'SUNDAY'
    }
    /** @description A prisoner who is allocated to an activity */
    Allocation: {
      /**
       * Format: int64
       * @description The internally-generated ID for this allocation
       * @example 123456
       */
      id: number
      /**
       * @description The prisoner number (Nomis ID)
       * @example A1234AA
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description The offender booking id
       * @example 10001
       */
      bookingId: number
      activitySummary: string
      /** Format: int64 */
      activityId: number
      /** Format: int64 */
      scheduleId: number
      scheduleDescription: string
      /** @description Indicates whether this allocation is to an activity within the 'Not in work' category */
      isUnemployment: boolean
      prisonPayBand?: components['schemas']['PrisonPayBand']
      /**
       * Format: date
       * @description The date when the prisoner will start the activity
       * @example 2022-09-10
       */
      startDate: string
      /**
       * Format: date
       * @description The date when the prisoner will stop attending the activity
       * @example 2023-09-10
       */
      endDate?: string
      /**
       * Format: date-time
       * @description The date and time the prisoner was allocated to the activity
       */
      allocatedTime?: string
      /**
       * @description The person who allocated the prisoner to the activity
       * @example Mr Blogs
       */
      allocatedBy?: string
      /**
       * Format: date-time
       * @description The date and time the prisoner was deallocated from the activity
       */
      deallocatedTime?: string
      /**
       * @description The person who deallocated the prisoner from the activity
       * @example Mrs Blogs
       */
      deallocatedBy?: string
      deallocatedReason?: components['schemas']['DeallocationReason']
      /**
       * Format: date-time
       * @description The date and time the allocation was suspended
       */
      suspendedTime?: string
      /**
       * @description The person who suspended the prisoner from the activity
       * @example Mrs Blogs
       */
      suspendedBy?: string
      /**
       * @description The descriptive reason why this prisoner was suspended from the activity
       * @example Temporarily released from prison
       */
      suspendedReason?: string
      /**
       * @description The status of the allocation. Note that SUSPENDED is suspended without pay.
       * @example ACTIVE
       * @enum {string}
       */
      status: 'ACTIVE' | 'PENDING' | 'SUSPENDED' | 'AUTO_SUSPENDED' | 'ENDED' | 'SUSPENDED_WITH_PAY'
      plannedDeallocation?: components['schemas']['PlannedDeallocation']
      plannedSuspension?: components['schemas']['PlannedSuspension']
      /** @description The days and times that the prisoner is excluded from this activity's schedule. All values must match a slot where the activity is scheduled to run, and due to sync to nomis, there can not not be exclusions defined on the same day and time slot over multiple weeks. */
      exclusions: components['schemas']['Slot'][]
      /** @description The name of the prisoner. Included only if includePrisonerSummary = true */
      prisonerName?: string
      /**
       * @description The prisoner's first name. Included only if includePrisonerSummary = true
       * @example Joe
       */
      prisonerFirstName?: string
      /**
       * @description The prisoner's last name. Included only if includePrisonerSummary = true
       * @example Bloggs
       */
      prisonerLastName?: string
      /**
       * @description The status of the prisoner. Included only if includePrisonerSummary = true
       * @example ACTIVE IN
       */
      prisonerStatus?: string
      /**
       * @description The prison code of the prison which of the prisoner currently resides. Included only if includePrisonerSummary = true
       * @example MDI
       */
      prisonerPrisonCode?: string
      /** @description The cell location of the prisoner. Included only if includePrisonerSummary = true */
      cellLocation?: string
      earliestReleaseDate?: components['schemas']['EarliestReleaseDate']
      /** @description Does the prisoner have non-associations?. Included only if includePrisonerSummary = true. Null implies that non-associations could not be retrieved */
      nonAssociations?: boolean
    }
    /**
     * @description The code and descriptive reason why this prisoner was deallocated from the activity
     * @example PLANNED
     */
    DeallocationReason: {
      /**
       * @description The code for the deallocation reason
       * @example RELEASED
       */
      code: string
      /**
       * @description The description for the deallocation reason
       * @example Released from prison
       */
      description: string
    }
    /** @description Describes one instance of a planned deallocation */
    PlannedDeallocation: {
      /**
       * Format: int64
       * @description The internally-generated ID for this planned de-allocation
       * @example 24
       */
      id: number
      /**
       * Format: date
       * @description The planned de-allocation date
       * @example 2023-07-31
       */
      plannedDate: string
      /**
       * @description The person who planned the de-allocation
       * @example ADMIN
       */
      plannedBy: string
      plannedReason: components['schemas']['DeallocationReason']
      /**
       * Format: date-time
       * @description The system time when the de-allocation plan was made
       */
      plannedAt: string
    }
    /** @description Describes one instance of a planned suspension */
    PlannedSuspension: {
      /**
       * Format: date
       * @description The planned start date of the suspension
       * @example 2023-07-31
       */
      plannedStartDate: string
      /**
       * Format: date
       * @description The planned end date of the suspension
       * @example 2023-07-31
       */
      plannedEndDate?: string
      /**
       * Format: int64
       * @description The optional case note identifier which was added to the prisoner's profile along with the suspension
       * @example 123456
       */
      caseNoteId?: number
      /**
       * @description The username of the person who planned the suspension
       * @example ADMIN
       */
      plannedBy: string
      /**
       * Format: date-time
       * @description The system time when the suspension plan was made
       */
      plannedAt: string
      /** @description Is the suspension paid or not */
      paid?: boolean
    }
    /** @description Describes one instance of a prison pay band */
    PrisonPayBand: {
      /**
       * Format: int64
       * @description The internally-generated ID for this prison pay band
       * @example 123456
       */
      id: number
      /**
       * Format: int32
       * @description The order in which the pay band should be presented within a list e.g. dropdown
       * @example 1
       */
      displaySequence: number
      /**
       * @description The alternative text to use in place of the description e.g. Low, Medium, High
       * @example Low
       */
      alias: string
      /**
       * @description The description of pay band in this prison
       * @example Pay band 1
       */
      description: string
      /**
       * Format: int32
       * @description The pay band number this is associated with in NOMIS (1-10)
       * @example 1
       */
      nomisPayBand: number
      /**
       * @description The prison code for the pay band. Can also be 'DEFAULT' if none set up for prison
       * @example MDI
       */
      prisonCode: string
      /**
       * Format: date-time
       * @description The date and time this pay band was created
       */
      createdTime?: string
      /** @description The username of the user authenticated via HMPPS auth that created the pay band */
      createdBy?: string
      /**
       * Format: date-time
       * @description The date and time the pay band was last changed
       */
      updatedTime?: string
      /** @description The username of the user authenticated via HMPPS auth that last edited the pay band */
      updatedBy?: string
    }
    /** @description Describes a prisoners allocations */
    PrisonerAllocations: {
      /**
       * @description The prisoner number
       * @example GF10101
       */
      prisonerNumber: string
      /** @description The list of allocations for the prisoner */
      allocations: components['schemas']['Allocation'][]
    }
    /** @description The create request with the new pay band details */
    PrisonPayBandCreateRequest: {
      /**
       * Format: int32
       * @description The order in which the pay band should be presented within a list e.g. dropdown
       * @example 1
       */
      displaySequence: number
      /**
       * @description The alternative text to use in place of the description e.g. Low, Medium, High
       * @example Low
       */
      alias: string
      /**
       * @description The description of pay band in this prison
       * @example Pay band 1
       */
      description: string
      /**
       * Format: int32
       * @description The pay band number this is associated with in NOMIS (1-10)
       * @example 1
       */
      nomisPayBand: number
    }
    /** @description Allocation migration request */
    AllocationMigrateRequest: {
      /**
       * @description The prison code where this allocation is to be made
       * @example PVI
       */
      prisonCode: string
      /**
       * Format: int64
       * @description The activity ID to which this allocation should be made
       * @example 12332
       */
      activityId: number
      /**
       * Format: int64
       * @description The alternative activity ID in a split regime
       * @example 1322
       */
      splitRegimeActivityId?: number
      /**
       * @description The prisoner display number from NOMIS
       * @example A3334AB
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description The prisoner booking id from NOMIS
       * @example 99098484
       */
      bookingId: number
      /**
       * @description The prisoner cell location
       * @example RSI-A-1-2-001
       */
      cellLocation?: string
      /**
       * @description The pay band code from NOMIS
       * @example 2
       */
      nomisPayBand?: string
      /**
       * Format: date
       * @description Date on which this allocation starts or started. Not nullable.
       * @example 2022-12-23
       */
      startDate: string
      /**
       * Format: date
       * @description Date on which this allocation ended or will end. Nullable.
       * @example 2022-12-23
       */
      endDate?: string
      /**
       * @description If an end date is set there may be a comment. Nullable.
       * @example Due to end in January.
       */
      endComment?: string
      /**
       * @description True if this prisoner allocation is suspended.
       * @example true
       */
      suspendedFlag: boolean
      /** @description The days and times that the prisoner is excluded from this activity's schedule. All values must match a slot where the activity is scheduled to run, and due to sync to nomis, there can not not be exclusions defined on the same day and time slot over multiple weeks. */
      exclusions?: components['schemas']['Slot'][]
    }
    /** @description Response for a successful migration of one allocation to an activity */
    AllocationMigrateResponse: {
      /**
       * Format: int64
       * @description The actual activity ID to which the allocation was made
       * @example 123232
       */
      activityId: number
      /**
       * Format: int64
       * @description The allocation ID created in the activities service
       * @example 32323
       */
      allocationId: number
    }
    /** @description Activity migration request */
    ActivityMigrateRequest: {
      /**
       * @description A nomis program service code (activity category)
       * @example PRISON JOBS
       */
      programServiceCode: string
      /**
       * @description The prison code where this activity takes place
       * @example PVI
       */
      prisonCode: string
      /**
       * Format: date
       * @description Date on which this activity starts or started. Can not be null.
       * @example 2022-12-23
       */
      startDate: string
      /**
       * Format: date
       * @description Date when this activity ends. Can be null.
       * @example 2022-12-23
       */
      endDate?: string
      /**
       * Format: int64
       * @description Optional NOMIS internal location id
       * @example 98877667
       */
      internalLocationId?: number
      /**
       * @description Optional NOMIS internal location code
       * @example A011
       */
      internalLocationCode?: string
      /**
       * @description Optional NOMIS internal location description
       * @example PVI-1-2-A011
       */
      internalLocationDescription?: string
      /**
       * Format: int32
       * @description The maximum number of prisoners who can attend. Not null.
       * @example 10
       */
      capacity: number
      /**
       * @description A summary description for the activity.
       * @example Maths level 1
       */
      description: string
      /**
       * @description Indicates (F)ull or (H)alf day (for payment purposes). Not nullable.
       * @example H
       * @enum {string}
       */
      payPerSession: 'H' | 'F'
      /**
       * @description Whether the schedule runs on bank holidays
       * @example true
       */
      runsOnBankHoliday: boolean
      /**
       * @description Whether the activity takes place outside of the prison
       * @example true
       */
      outsideWork: boolean
      /** @description Details of when this activity runs during the week */
      scheduleRules: components['schemas']['NomisScheduleRule'][]
      /** @description The pay rates which apply to this activity. Where none are specified we will assume an unpaid activity. */
      payRates: components['schemas']['NomisPayRate'][]
    }
    /** @description Describes a pay rate for an activity. */
    NomisPayRate: {
      /**
       * @description The incentive level code from NOMIS
       * @example BAS
       */
      incentiveLevel: string
      /**
       * @description The pay band code from NOMIS. If null, will be defaulted to 1
       * @example 2
       */
      nomisPayBand?: string
      /**
       * Format: int32
       * @description The pay rate for one half day session in pence
       * @example 120
       */
      rate: number
    }
    /** @description The scheduling rules in Nomis. At least one day and time must be specified. */
    NomisScheduleRule: {
      /**
       * Format: partial-time
       * @description Start time on the day
       * @example 10:45
       */
      startTime: string
      /**
       * Format: partial-time
       * @description End time on the day
       * @example 11:45
       */
      endTime: string
      /**
       * @description Runs on a Monday
       * @example true
       */
      monday: boolean
      /**
       * @description Runs on a Tuesday
       * @example true
       */
      tuesday: boolean
      /**
       * @description Runs on a Wednesday
       * @example true
       */
      wednesday: boolean
      /**
       * @description Runs on a Thursday
       * @example true
       */
      thursday: boolean
      /**
       * @description Runs on a Friday
       * @example true
       */
      friday: boolean
      /**
       * @description Runs on a Saturday
       * @example true
       */
      saturday: boolean
      /**
       * @description Runs on a Sunday
       * @example true
       */
      sunday: boolean
      /**
       * @description Time slot
       * @enum {string}
       */
      timeSlot?: 'AM' | 'PM' | 'ED'
    }
    ActivityMigrateResponse: {
      prisonCode: string
      /** Format: int64 */
      activityId: number
      /** Format: int64 */
      splitRegimeActivityId?: number
    }
    /** @description The migration request with the appointment details */
    AppointmentMigrateRequest: {
      /**
       * @description The NOMIS prison code where this appointment takes place
       * @example PVI
       */
      prisonCode: string
      /**
       * @description The prisoner to allocate to the appointment
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description The NOMIS OFFENDER_BOOKINGS.OFFENDER_BOOK_ID value for mapping to a prisoner booking record in NOMIS
       * @example 456
       */
      bookingId: number
      /**
       * @description The NOMIS reference code for this appointment.
       * @example CHAP
       */
      categoryCode: string
      /**
       * Format: int64
       * @description
       *         The NOMIS internal location id within the specified prison.
       *
       * @example 123
       */
      internalLocationId: number
      /**
       * Format: date
       * @description The date of the appointment
       */
      startDate: string
      /**
       * Format: partial-time
       * @description The starting time of the appointment
       * @example 09:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time of the appointment
       * @example 10:30
       */
      endTime?: string
      /**
       * @description
       *         Notes relating to the appointment.
       *
       * @example This appointment will help adjusting to life outside of prison
       */
      comment?: string
      /**
       * @description
       *         Indicates that this appointment has been cancelled
       *
       * @example false
       */
      isCancelled?: boolean
      /**
       * Format: date-time
       * @description The date and time this appointment was created
       */
      created: string
      /**
       * @description
       *         The username of the user authenticated via NOMIS/HMPPS auth that created the appointment
       *
       * @example AAA01U
       */
      createdBy: string
      /**
       * Format: date-time
       * @description
       *         The date and time this appointment was last changed
       *
       */
      updated?: string
      /**
       * @description
       *         The username of the user authenticated via NOMIS/HMPPS auth that modified the appointment
       *
       * @example AAA01U
       */
      updatedBy?: string
    }
    /** @description
     *       Represents an appointment instance for a specific prisoner to attend at the specified location, date and time.
     *       The fully denormalised representation of the appointment series, appointments and attendees equivalent to a row in
     *       the NOMIS OFFENDER_IND_SCHEDULES table.
     *       Appointment instances do not exist as database records and are the product of the join between appointment attendees,
     *       appointments and appointment series.
     *       The appointment attendee id is used for the appointment instance id as there is a one to one relationship between an
     *       appointment attendee and appointment instances.
     *       Appointment instances are used primarily for the one way sync to NOMIS.
     *        */
    AppointmentInstance: {
      /**
       * Format: int64
       * @description
       *         The internally generated identifier for this appointment instance. N.B. this is the appointment attendee id due to
       *         there being a one to one relationship between an appointment attendee and appointment instances.
       *
       * @example 123456
       */
      id: number
      /**
       * Format: int64
       * @description The internally generated identifier for the appointment series
       * @example 1234
       */
      appointmentSeriesId: number
      /**
       * Format: int64
       * @description The internally generated identifier for the appointment
       * @example 12345
       */
      appointmentId: number
      /**
       * Format: int64
       * @description
       *         The internally generated identifier for the appointment attendee. N.B. this is used as the appointment instance id
       *         due to there being a one to one relationship between an appointment attendee and appointment instances.
       *
       * @example 123456
       */
      appointmentAttendeeId: number
      /**
       * @description The appointment type (INDIVIDUAL or GROUP)
       * @example INDIVIDUAL
       * @enum {string}
       */
      appointmentType: 'INDIVIDUAL' | 'GROUP'
      /**
       * @description The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS
       * @example SKI
       */
      prisonCode: string
      /**
       * @description The NOMIS OFFENDERS.OFFENDER_ID_DISPLAY value for mapping to a prisoner record in NOMIS
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description The NOMIS OFFENDER_BOOKINGS.OFFENDER_BOOK_ID value for mapping to a prisoner booking record in NOMIS
       * @example 456
       */
      bookingId: number
      /**
       * @description The NOMIS REFERENCE_CODES.CODE (DOMAIN = 'INT_SCH_RSN') value for mapping to NOMIS
       * @example CHAP
       */
      categoryCode: string
      /**
       * @description
       *         Free text name further describing the appointment instance. Used as part of the appointment name with the
       *         format "Appointment description (Category description) if specified.
       *
       * @example Meeting with the governor
       */
      customName?: string
      /**
       * Format: int64
       * @description
       *         The NOMIS AGENCY_INTERNAL_LOCATIONS.INTERNAL_LOCATION_ID value for mapping to NOMIS.
       *         Will be null if in cell = true
       *
       * @example 123
       */
      internalLocationId?: number
      /**
       * @description
       *         Flag to indicate if the location of the appointment instance is in cell rather than an internal prison location.
       *         Internal location id should be null if in cell = true
       *
       * @example false
       */
      inCell: boolean
      /**
       * Format: date
       * @description The date of the appointment instance
       */
      appointmentDate: string
      /**
       * Format: partial-time
       * @description The starting time of the appointment instance
       * @example 09:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time of the appointment instance
       * @example 10:30
       */
      endTime?: string
      /**
       * @description
       *         Extra information for the prisoner attending this appointment instance.
       *         Shown only on the appointments details page and on printed movement slips. Wing staff will be notified there is
       *         extra information via the unlock list.
       *
       * @example This appointment will help adjusting to life outside of prison
       */
      extraInformation?: string
      /**
       * Format: date-time
       * @description The date and time this appointment instance was created. Will not change
       */
      createdTime: string
      /**
       * @description
       *         The username of the user authenticated via HMPPS auth that created the appointment instance.
       *         Usually a NOMIS username
       *
       * @example AAA01U
       */
      createdBy: string
      /**
       * Format: date-time
       * @description
       *         The date and time this appointment instance was last changed.
       *         Will be null if this appointment instance has not been altered since it was created
       *
       */
      updatedTime?: string
      /**
       * @description
       *         The username of the user authenticated via HMPPS auth that edited this appointment instance.
       *         Will be null if this appointment instance has not been altered since it was created
       *
       * @example AAA01U
       */
      updatedBy?: string
    }
    /** @description The prisoner allocation request details */
    EventAcknowledgeRequest: {
      /**
       * @description The list of IDs to acknowledge
       * @example [
       *       3,
       *       5,
       *       6
       *     ]
       */
      eventReviewIds: number[]
    }
    /** @description Set of search filters for searching audit records */
    AuditRecordSearchFilters: {
      /**
       * @description The code of the prison
       * @example PVI
       */
      prisonCode?: string
      /**
       * @description The prisoner number
       * @example A1234AA
       */
      prisonerNumber?: string
      /**
       * @description The username of the logged-in user
       * @example JONESA
       */
      username?: string
      /**
       * @description The top-level audit category
       * @example ACTIVITY
       * @enum {string}
       */
      auditType?: 'PRISONER' | 'ACTIVITY' | 'APPOINTMENT'
      /**
       * @description The specific event type
       * @example ACTIVITY_CREATED
       * @enum {string}
       */
      auditEventType?:
        | 'ACTIVITY_CREATED'
        | 'ACTIVITY_UPDATED'
        | 'APPOINTMENT_CANCELLED'
        | 'APPOINTMENT_CANCELLED_ON_TRANSFER'
        | 'APPOINTMENT_SERIES_CREATED'
        | 'APPOINTMENT_DELETED'
        | 'APPOINTMENT_EDITED'
        | 'APPOINTMENT_UNCANCELLED'
        | 'BONUS_PAYMENT_MADE_FOR_ACTIVITY_ATTENDANCE'
        | 'APPOINTMENT_SET_CREATED'
        | 'INCENTIVE_LEVEL_WARNING_GIVEN_FOR_ACTIVITY_ATTENDANCE'
        | 'PRISONER_ACCEPTED_FROM_WAITING_LIST'
        | 'PRISONER_ADDED_TO_WAITING_LIST'
        | 'PRISONER_ALLOCATED'
        | 'PRISONER_DEALLOCATED'
        | 'PRISONER_DECLINED_FROM_WAITING_LIST'
        | 'PRISONER_REMOVED_FROM_WAITING_LIST'
        | 'PRISONER_SUSPENDED_FROM_ACTIVITY'
        | 'PRISONER_UNSUSPENDED_FROM_ACTIVITY'
        | 'PRISONER_MERGE'
      /**
       * Format: date-time
       * @description The date and time on or after which to search for events
       */
      startTime?: string
      /**
       * Format: date-time
       * @description The date and time on or before which to search for events
       */
      endTime?: string
      /**
       * Format: int64
       * @description The ID of the activity
       * @example 123456
       */
      activityId?: number
      /**
       * Format: int64
       * @description The ID of the activity schedule
       * @example 123456
       */
      scheduleId?: number
    }
    /** @description Describes a system even that has been recorded for audit purposes */
    LocalAuditRecord: {
      /**
       * Format: int64
       * @description The internally-generated ID for this audit record
       * @example 123456
       */
      localAuditId: number
      /**
       * @description The username of the logg-in user that triggered this event
       * @example JONESA
       */
      username: string
      /**
       * @description The top-level audit category
       * @example ACTIVITY
       * @enum {string}
       */
      auditType: 'PRISONER' | 'ACTIVITY' | 'APPOINTMENT'
      /**
       * @description The specific event type
       * @example ACTIVITY_CREATED
       * @enum {string}
       */
      auditEventType:
        | 'ACTIVITY_CREATED'
        | 'ACTIVITY_UPDATED'
        | 'APPOINTMENT_CANCELLED'
        | 'APPOINTMENT_CANCELLED_ON_TRANSFER'
        | 'APPOINTMENT_SERIES_CREATED'
        | 'APPOINTMENT_DELETED'
        | 'APPOINTMENT_EDITED'
        | 'APPOINTMENT_UNCANCELLED'
        | 'BONUS_PAYMENT_MADE_FOR_ACTIVITY_ATTENDANCE'
        | 'APPOINTMENT_SET_CREATED'
        | 'INCENTIVE_LEVEL_WARNING_GIVEN_FOR_ACTIVITY_ATTENDANCE'
        | 'PRISONER_ACCEPTED_FROM_WAITING_LIST'
        | 'PRISONER_ADDED_TO_WAITING_LIST'
        | 'PRISONER_ALLOCATED'
        | 'PRISONER_DEALLOCATED'
        | 'PRISONER_DECLINED_FROM_WAITING_LIST'
        | 'PRISONER_REMOVED_FROM_WAITING_LIST'
        | 'PRISONER_SUSPENDED_FROM_ACTIVITY'
        | 'PRISONER_UNSUSPENDED_FROM_ACTIVITY'
        | 'PRISONER_MERGE'
      /**
       * Format: date-time
       * @description The date and time at which this event occurred
       */
      recordedTime: string
      /**
       * @description The code of the prison to which the event relates
       * @example PVI
       */
      prisonCode: string
      /**
       * @description The prisoner number (if any) to which the event relates
       * @example A1234AA
       */
      prisonerNumber?: string
      /**
       * Format: int64
       * @description The ID of the activity (if any) to which the event relates
       * @example 123456
       */
      activityId?: number
      /**
       * Format: int64
       * @description The ID of the activity schedule (if any) to which the event relates
       * @example 123456
       */
      activityScheduleId?: number
      /**
       * @description A descriptive message of the event
       * @example An activity called 'Some Activity'(1) with category C and starting on 2023-03-23 at prison PBI was created. Event created on 2023-03-22 at 09:00:03 by Bob.
       */
      message: string
    }
    /** @description The result of an audit record search */
    LocalAuditSearchResults: {
      /** @description The matching records */
      content: components['schemas']['LocalAuditRecord'][]
      /**
       * Format: int32
       * @description The current page number
       * @example 0
       */
      pageNumber: number
      /**
       * Format: int32
       * @description The total number of pages
       * @example 5
       */
      totalPages: number
    }
    /** @description The search parameters to use to filter appointments */
    AppointmentSearchRequest: {
      /**
       * @description
       *         The appointment type (INDIVIDUAL or GROUP) to match with the appointment series. Will restrict the search results to
       *         appointments that are part of a series with the matching type when this search parameter is supplied.
       *
       * @example INDIVIDUAL
       * @enum {string}
       */
      appointmentType?: 'INDIVIDUAL' | 'GROUP'
      /**
       * Format: date
       * @description
       *         The start date to match with the appointments. Will restrict the search results to appointments
       *         that have the matching start date when this search parameter is supplied but no end date is supplied.
       *         When an end date is also supplied, the search uses a date range and will restrict the search results to
       *         appointments that have a start date within the date range.
       *
       */
      startDate: string
      /**
       * @description
       *         The time slot to match with the appointments. Will restrict the search results to appointments that have a start
       *         time between the times defined by the prison for that time slot when this search parameter is supplied.
       *
       * @example [
       *       "AM",
       *       "PM",
       *       "ED"
       *     ]
       */
      timeSlots?: ('AM' | 'PM' | 'ED')[]
      /**
       * @description
       *         The NOMIS reference code to match with the appointments. Will restrict the search results to appointments
       *         that have the matching category code when this search parameter is supplied.
       *
       * @example GYMW
       */
      categoryCode?: string
      /**
       * Format: int64
       * @description
       *         The NOMIS internal location id to match with the appointments. Will restrict the search results to
       *         appointments that have the matching internal location id when this search parameter is supplied.
       *
       * @example 123
       */
      internalLocationId?: number
      /**
       * @description
       *         The in cell flag value to match with the appointments. Will restrict the search results to appointments
       *         that have the matching in cell value when this search parameter is supplied.
       *
       * @example false
       */
      inCell?: boolean
      /**
       * @description
       *         The allocated prisoner or prisoners to match with the appointments. Will restrict the search results to
       *         appointments that have the at least one of the supplied prisoner numbers attending when this search parameter
       *         is supplied.
       *
       * @example [
       *       "A1234BC"
       *     ]
       */
      prisonerNumbers?: string[]
      /**
       * @description
       *         The username of the user authenticated via HMPPS auth to match with the appointments. Will restrict the
       *         search results to appointments that were created by this username when this search parameter is supplied.
       *
       * @example AAA01U
       */
      createdBy?: string
    }
    /** @description
     *       Summary search result details of a specific appointment attendee found via search. Contains properties needed to
     *       make additional API calls and to populate a table of search results.
     *        */
    AppointmentAttendeeSearchResult: {
      /**
       * Format: int64
       * @description
       *         The internally generated identifier for this prisoner attending a specific appointment in an appointment series or set.
       *         N.B. this is used as the appointment instance id due to there being a one to one relationship between an appointment
       *         attendee and appointment instances.
       *
       * @example 123456
       */
      appointmentAttendeeId: number
      /**
       * @description The NOMIS OFFENDERS.OFFENDER_ID_DISPLAY value for mapping to a prisoner record in NOMIS
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description The NOMIS OFFENDER_BOOKINGS.OFFENDER_BOOK_ID value for mapping to a prisoner booking record in NOMIS
       * @example 456
       */
      bookingId: number
    }
    /** @description
     *       Summarises an appointment category for display purposes. Contains only properties needed to make additional API calls
     *       and to display.
     *        */
    AppointmentCategorySummary: {
      /**
       * @description The NOMIS REFERENCE_CODES.CODE (DOMAIN = 'INT_SCH_RSN') value for mapping to NOMIS
       * @example CHAP
       */
      code: string
      /**
       * @description The description of the appointment category
       * @example Chaplaincy
       */
      description: string
    }
    /** @description
     *       Summarises an appointment location for display purposes. Contains only properties needed to make additional API calls
     *       and to display. NOMIS is the current system of record for appointment locations and they are managed there.
     *        */
    AppointmentLocationSummary: {
      /**
       * Format: int64
       * @description The NOMIS AGENCY_INTERNAL_LOCATIONS.INTERNAL_LOCATION_ID value for mapping to NOMIS.
       * @example 27
       */
      id: number
      /**
       * @description
       *         The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS.
       *
       * @example SKI
       */
      prisonCode: string
      /**
       * @description The description of the appointment location. Mapped from AGENCY_INTERNAL_LOCATIONS.USER_DESC
       * @example Chapel
       */
      description: string
    }
    /** @description
     *       Summary search result details of a specific appointment found via search. Contains properties needed to
     *       make additional API calls and to populate a table of search results.
     *        */
    AppointmentSearchResult: {
      /**
       * Format: int64
       * @description The internally generated identifier for the appointment series
       * @example 12345
       */
      appointmentSeriesId: number
      /**
       * Format: int64
       * @description The internally generated identifier for this appointment
       * @example 123456
       */
      appointmentId: number
      /**
       * @description The type of the appointment series (INDIVIDUAL or GROUP)
       * @example INDIVIDUAL
       * @enum {string}
       */
      appointmentType: 'INDIVIDUAL' | 'GROUP'
      /**
       * @description
       *         The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS.
       *
       * @example SKI
       */
      prisonCode: string
      /** @description
       *         The appointment's name combining the optional custom name with the category description. If custom name has been
       *         specified, the name format will be "Custom name (Category description)"
       *          */
      appointmentName: string
      /** @description
       *         The prisoner or prisoners attending this appointment. Appointments of type INDIVIDUAL will have one
       *         prisoner attending to each appointment. Appointments of type GROUP can have more than one prisoner
       *         attending each appointment
       *          */
      attendees: components['schemas']['AppointmentAttendeeSearchResult'][]
      category: components['schemas']['AppointmentCategorySummary']
      /**
       * @description
       *         Free text name further describing the appointment. Used as part of the appointment name with the
       *         format "Custom name (Category description) if specified.
       *
       * @example Meeting with the governor
       */
      customName?: string
      internalLocation?: components['schemas']['AppointmentLocationSummary']
      /**
       * @description
       *         Flag to indicate if the location of the appointment is in cell rather than an internal prison location.
       *         Internal location will be null if in cell = true
       *
       * @example false
       */
      inCell: boolean
      /**
       * Format: date
       * @description The date this appointment is taking place on
       */
      startDate: string
      /**
       * Format: partial-time
       * @description The starting time of this appointment
       * @example 13:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time of this appointment
       * @example 13:30
       */
      endTime?: string
      /**
       * @description time slot
       * @enum {string}
       */
      timeSlot: 'AM' | 'PM' | 'ED'
      /**
       * @description Indicates whether the appointment series was specified to repeat via its schedule
       * @example false
       */
      isRepeat: boolean
      /**
       * Format: int32
       * @description The sequence number of this appointment within the appointment series
       * @example 3
       */
      sequenceNumber: number
      /**
       * Format: int32
       * @description The sequence number of the final appointment within the appointment series
       * @example 6
       */
      maxSequenceNumber: number
      /**
       * @description Indicates whether this appointment has been changed from its original state
       * @example false
       */
      isEdited: boolean
      /**
       * @description Indicates whether this appointment has been cancelled
       * @example false
       */
      isCancelled: boolean
      /**
       * @description Indicates whether this appointment has expired
       * @example false
       */
      isExpired: boolean
    }
    /** @description
     *       Described on the UI as an "Attendee". A prisoner attending a specific appointment in an appointment series or set.
     *       Contains the limited summary information needed to display the prisoner information and whether they attended or not.
     *        */
    AppointmentAttendeeSummary: {
      /**
       * Format: int64
       * @description
       *         The internally generated identifier for this prisoner attending a specific appointment in an appointment series or set.
       *         N.B. this is used as the appointment instance id due to there being a one to one relationship between an appointment
       *         attendee and appointment instances.
       *
       * @example 123456
       */
      id: number
      prisoner: components['schemas']['PrisonerSummary']
      /** @description
       *         Specifies whether the prisoner attended the specific appointment in an appointment series or set.
       *         A null value means that the prisoner's attendance has not been recorded yet.
       *          */
      attended?: boolean
      /**
       * Format: date-time
       * @description
       *         The latest date and time attendance was recorded. Note that attendance records can be updated and this is the most
       *         recent date and time it was recorded. A null value means that the prisoner's attendance has not been recorded yet.
       *
       */
      attendanceRecordedTime?: string
      /**
       * @description
       *         The username of the user that last recorded attendance. Note that attendance records can be updated and this is the
       *         most recent user that marked attendance. A null value means that the prisoner's attendance has not been recorded yet.
       *
       * @example AAA01U
       */
      attendanceRecordedBy?: string
    }
    /** @description
     *       Described on the UI as an "Appointment" and represents the scheduled event on a specific date and time.
     *       Contains the full details of all the appointment properties and the summary collection of prisoners attending this appointment.
     *       An appointment is part of either a series of an appointments on a schedule or a set of appointments on the same day.
     *       The summary information of which appointment collection they are part of is included in these details.
     *       All updates and cancellations happen at this appointment level with the parent appointment series being immutable.
     *        */
    AppointmentDetails: {
      /**
       * Format: int64
       * @description The internally generated identifier for this appointment
       * @example 123456
       */
      id: number
      appointmentSeries?: components['schemas']['AppointmentSeriesSummary']
      appointmentSet?: components['schemas']['AppointmentSetSummary']
      /**
       * @description The appointment type (INDIVIDUAL or GROUP)
       * @example INDIVIDUAL
       * @enum {string}
       */
      appointmentType: 'INDIVIDUAL' | 'GROUP'
      /**
       * Format: int32
       * @description The sequence number of this appointment within the appointment series
       * @example 3
       */
      sequenceNumber: number
      /**
       * @description The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS
       * @example SKI
       */
      prisonCode: string
      /** @description
       *         The appointment's name combining the optional custom name with the category description. If custom name has been
       *         specified, the name format will be "Custom name (Category description)"
       *          */
      appointmentName: string
      /** @description
       *         Summary of the prisoner or prisoners attending this appointment and their attendance record if any.
       *         Attendees are at the appointment level to allow for per appointment attendee changes.
       *          */
      attendees: components['schemas']['AppointmentAttendeeSummary'][]
      category: components['schemas']['AppointmentCategorySummary']
      tier?: components['schemas']['EventTier']
      organiser?: components['schemas']['EventOrganiser']
      /**
       * @description
       *         Free text name further describing the appointment. Used as part of the appointment name with the
       *         format "Custom name (Category description) if specified.
       *
       * @example Meeting with the governor
       */
      customName?: string
      internalLocation?: components['schemas']['AppointmentLocationSummary']
      /**
       * @description
       *         Flag to indicate if the location of the appointment is in cell rather than an internal prison location.
       *         Internal location will be null if in cell = true
       *
       * @example false
       */
      inCell: boolean
      /**
       * Format: date
       * @description The date this appointment is taking place on
       */
      startDate: string
      /**
       * Format: partial-time
       * @description The starting time of this appointment
       * @example 13:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time of this appointment
       * @example 13:30
       */
      endTime?: string
      /**
       * @description
       *         Indicates that this appointment has expired i.e. it's start date and time is in the past
       *
       * @example false
       */
      isExpired: boolean
      /**
       * @description
       *         Extra information for the prisoner or prisoners attending this appointment.
       *         Shown only on the appointments details page and on printed movement slips. Wing staff will be notified there is
       *         extra information via the unlock list.
       *
       * @example This appointment will help adjusting to life outside of prison
       */
      extraInformation?: string
      /**
       * Format: date-time
       * @description The date and time this appointment was created. Will not change
       */
      createdTime: string
      /** @description
       *         The username of the user that created this appointment
       *          */
      createdBy: string
      /**
       * @description
       *         Indicates that this appointment has been independently changed from the original state it was in when
       *         it was created as part of an appointment series
       *
       * @example false
       */
      isEdited: boolean
      /**
       * Format: date-time
       * @description
       *         The date and time this appointment was last changed.
       *         Will be null if this appointment has not been altered since it was created
       *
       */
      updatedTime?: string
      /** @description
       *         The username of the user that last edited this appointment.
       *         Will be null if this appointment has not been altered since it was created
       *          */
      updatedBy?: string
      /**
       * @description
       *         Indicates that this appointment has been cancelled
       *
       * @example false
       */
      isCancelled: boolean
      /**
       * @description
       *         Indicates that this appointment has been deleted and removed from scheduled events.
       *
       * @example false
       */
      isDeleted: boolean
      /**
       * Format: date-time
       * @description
       *         The date and time this appointment was cancelled.
       *         Will be null if this appointment has not been cancelled
       *
       */
      cancelledTime?: string
      /** @description
       *         The username of the user who cancelled this appointment.
       *         Will be null if this appointment has not been cancelled
       *          */
      cancelledBy?: string
    }
    /** @description
     *       Described on the UI as an "Appointment series" and only shown for repeat appointments.
     *       The top level of the standard appointment hierarchy containing summary information of a limited set of the initial
     *       property values common to all appointments in the series as well as the count of appointments in the series.
     *       The properties at this level cannot be changed via the API however the child appointment property values can be changed
     *       independently to support rescheduling, cancelling and altered attendee lists per appointment.
     *       N.B. there is no collection of attending prisoners at this top level as all attendees are per appointment. This is to
     *       support attendee modification for each scheduled appointment and to prevent altering the past by editing attendees
     *       in an appointment series where some appointments have past.
     *        */
    AppointmentSeriesSummary: {
      /**
       * Format: int64
       * @description The internally generated identifier for this appointment series
       * @example 12345
       */
      id: number
      schedule?: components['schemas']['AppointmentSeriesSchedule']
      /**
       * Format: int32
       * @description
       *         The total count of appointments in the series that have not been deleted. Counts both appointments in the past and
       *         those scheduled.
       *
       */
      appointmentCount: number
      /**
       * Format: int32
       * @description
       *         The count of the remaining scheduled appointments in the series that have not been cancelled or deleted.
       *
       */
      scheduledAppointmentCount: number
    }
    /** @description
     *       Described on the UI as an "Appointment set" or "set of back-to-back appointments".
     *       Contains the limited summary information needed to display the fact that an appointment was created as part of a set.
     *        */
    AppointmentSetSummary: {
      /**
       * Format: int64
       * @description The internally generated identifier for this appointment set
       * @example 12345
       */
      id: number
      /**
       * Format: int32
       * @description
       *         The number of appointments in the set that have not been deleted. Counts both appointments in the past and
       *         those scheduled.
       *
       * @example 3
       */
      appointmentCount: number
      /**
       * Format: int32
       * @description
       *         The count of the remaining scheduled appointments in the set that have not been cancelled or deleted.
       *
       */
      scheduledAppointmentCount: number
    }
    /** @description Summary of the prisoner attending the appointment */
    PrisonerSummary: {
      /**
       * @description The NOMIS OFFENDERS.OFFENDER_ID_DISPLAY value for mapping to a prisoner record in NOMIS
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description The NOMIS OFFENDER_BOOKINGS.OFFENDER_BOOK_ID value for mapping to a prisoner booking record in NOMIS
       * @example 456
       */
      bookingId: number
      /**
       * @description The prisoner's first name
       * @example Albert
       */
      firstName: string
      /**
       * @description The prisoner's first name
       * @example Abbot
       */
      lastName: string
      /**
       * @description The prisoner's status at their current prison
       * @example ACTIVE IN
       */
      status?: string
      /**
       * @description
       *         The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS.
       *
       * @example SKI
       */
      prisonCode: string
      /**
       * @description
       *         The prisoner's residential cell location when inside the prison.
       *
       * @example A-1-002
       */
      cellLocation: string
      /**
       * @description
       *         The prisoner's category.
       *
       * @example P
       */
      category?: string
    }
    /** @description
     *         The list of appointments to create
     *          */
    AppointmentSetAppointment: {
      /**
       * @description The prisoner attending the appointment
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * Format: partial-time
       * @description The starting time of the appointment
       * @example 09:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time of the appointment
       * @example 10:30
       */
      endTime: string
      /**
       * @description
       *         Extra information for the prisoner or prisoners attending the appointment. Shown only on the appointments details
       *         page and on printed movement slips. Wing staff will be notified there is extra information via the unlock list.
       *
       * @example This appointment will help adjusting to life outside of prison
       */
      extraInformation?: string
    }
    /** @description The create request with the new appointment set details */
    AppointmentSetCreateRequest: {
      /**
       * @description The NOMIS prison code where these appointments takes place
       * @example PVI
       */
      prisonCode: string
      /**
       * @description The NOMIS reference code for these appointments. Must exist and be active
       * @example CHAP
       */
      categoryCode: string
      /**
       * @description The tier code for this appointment
       * @example TIER_1
       * @enum {string}
       */
      tierCode: 'TIER_1' | 'TIER_2' | 'FOUNDATION'
      /**
       * @description The organiser code for this appointment
       * @example PRISON_STAFF
       * @enum {string}
       */
      organiserCode?: 'PRISON_STAFF' | 'PRISONER' | 'EXTERNAL_PROVIDER' | 'OTHER'
      /**
       * @description
       *         Free text name further describing the appointment series. Will be used to create the appointment name using the
       *         format "Custom name (Category description) if specified.
       *
       * @example Meeting with the governor
       */
      customName?: string
      /**
       * Format: int64
       * @description
       *         The NOMIS internal location id within the specified prison. This must be supplied if inCell is false.
       *         The internal location id must exist, must be within the prison specified by the prisonCode property and be active.
       *
       * @example 123
       */
      internalLocationId?: number
      /**
       * @description
       *         Flag to indicate if the location of the appointments is in cell rather than an internal prison location.
       *         Internal location id will be ignored if inCell is true
       *
       * @example false
       */
      inCell: boolean
      /**
       * Format: date
       * @description The date of the appointments
       */
      startDate: string
      /** @description
       *         The list of appointments to create
       *          */
      appointments: components['schemas']['AppointmentSetAppointment'][]
    }
    /** @description
     *       Described on the UI as an "Appointment set" or "set of back-to-back appointments".
     *       Contains the initial property values common to all appointment series and appointments in the set.
     *       The properties at this level cannot be changed via the API.
     *        */
    AppointmentSet: {
      /**
       * Format: int64
       * @description The internally generated identifier for this appointment set
       * @example 12345
       */
      id: number
      /**
       * @description The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS
       * @example SKI
       */
      prisonCode: string
      /**
       * @description The NOMIS REFERENCE_CODES.CODE (DOMAIN = 'INT_SCH_RSN') value for mapping to NOMIS
       * @example CHAP
       */
      categoryCode: string
      tier?: components['schemas']['EventTier']
      organiser?: components['schemas']['EventOrganiser']
      /**
       * @description
       *         Free text name further describing the appointment set. Used as part of the appointment name with the
       *         format "Custom name (Category description) if specified.
       *
       * @example Meeting with the governor
       */
      customName?: string
      /**
       * Format: int64
       * @description
       *         The NOMIS AGENCY_INTERNAL_LOCATIONS.INTERNAL_LOCATION_ID value for mapping to NOMIS.
       *         Will be null if in cell = true
       *
       * @example 123
       */
      internalLocationId?: number
      /**
       * @description
       *         Flag to indicate if the location of the appointment set is in cell rather than an internal prison location.
       *         Internal location id should be null if in cell = true
       *
       * @example false
       */
      inCell: boolean
      /**
       * Format: date
       * @description The date of the first appointment in each appointment series in the set
       */
      startDate: string
      /** @description The appointments in the set */
      appointments: components['schemas']['Appointment'][]
      /**
       * Format: date-time
       * @description The date and time this appointment set was created. Will not change
       */
      createdTime: string
      /**
       * @description
       *         The username of the user authenticated via HMPPS auth that created this appointment set.
       *         Usually a NOMIS username
       *
       * @example AAA01U
       */
      createdBy: string
    }
    /** @description The create request with the new appointment series details */
    AppointmentSeriesCreateRequest: {
      /**
       * @description The appointment type (INDIVIDUAL or GROUP)
       * @example INDIVIDUAL
       * @enum {string}
       */
      appointmentType: 'INDIVIDUAL' | 'GROUP'
      /**
       * @description The NOMIS prison code where this appointment series takes place
       * @example PVI
       */
      prisonCode: string
      /**
       * @description The prisoner or prisoners attending the appointment or appointments in the series
       * @example [
       *       "A1234BC"
       *     ]
       */
      prisonerNumbers: string[]
      /**
       * @description The NOMIS reference code for this appointment. Must exist and be active
       * @example CHAP
       */
      categoryCode: string
      /**
       * @description The tier code for this appointment
       * @example TIER_1
       * @enum {string}
       */
      tierCode: 'TIER_1' | 'TIER_2' | 'FOUNDATION'
      /**
       * @description The organiser code for this appointment
       * @example PRISON_STAFF
       * @enum {string}
       */
      organiserCode?: 'PRISON_STAFF' | 'PRISONER' | 'EXTERNAL_PROVIDER' | 'OTHER'
      /**
       * @description
       *         Free text name further describing the appointment series. Will be used to create the appointment name using the
       *         format "Custom name (Category description) if specified.
       *
       * @example Meeting with the governor
       */
      customName?: string
      /**
       * Format: int64
       * @description
       *         The NOMIS internal location id within the specified prison. This must be supplied if inCell is false.
       *         The internal location id must exist, must be within the prison specified by the prisonCode property and be active.
       *
       * @example 123
       */
      internalLocationId?: number
      /**
       * @description
       *         Flag to indicate if the location of the appointment series is in cell rather than an internal prison location.
       *         Internal location id will be ignored if inCell is true
       *
       * @example false
       */
      inCell: boolean
      /**
       * Format: date
       * @description The date of the first appointment in the series
       */
      startDate: string
      /**
       * Format: partial-time
       * @description The starting time of the appointment or appointments in the series
       * @example 09:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time of the appointment or appointments in the series
       * @example 10:30
       */
      endTime: string
      schedule?: components['schemas']['AppointmentSeriesSchedule']
      /**
       * @description
       *         Extra information for the prisoner or prisoners attending the appointment or appointments in the series.
       *         Shown only on the appointments details page and on printed movement slips. Wing staff will be notified there is
       *         extra information via the unlock list.
       *
       * @example This appointment will help adjusting to life outside of prison
       */
      extraInformation?: string
      /**
       * Format: int64
       * @description
       *         The id of the original appointment that the new appointment was copied from
       *
       * @example 789
       */
      originalAppointmentId?: number
    }
    /** @description The request with the prisoner waiting list details */
    WaitingListApplicationRequest: {
      /**
       * @description The prisoner number (NOMIS ID)
       * @example A1234AA
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description The internally-generated ID for this activity schedule (assumes 1-2-1 with activity)
       * @example 7654321
       */
      activityScheduleId: number
      /**
       * Format: date
       * @description The past or present date on which the waiting list application was requested
       * @example 2023-06-23
       */
      applicationDate: string
      /**
       * @description The person who made the request
       * @example Fred Bloggs
       */
      requestedBy: string
      /**
       * @description Any particular comments related to the waiting list request
       * @example The prisoner has specifically requested to attend this activity
       */
      comments?: string
      /**
       * @description The status of the application. Only PENDING, APPROVED or DECLINED are allowed when creating.
       * @example PENDING
       * @enum {string}
       */
      status: 'PENDING' | 'APPROVED' | 'DECLINED' | 'ALLOCATED' | 'REMOVED'
    }
    /** @description The request with the suspension details */
    UnsuspendPrisonerRequest: {
      /**
       * @description The prisoner number (NOMIS ID)
       * @example A1234AA
       */
      prisonerNumber: string
      /**
       * @description The allocation or allocations affected by the suspensions request. They must all be for the same prisoner
       * @example [
       *       1,
       *       2,
       *       3,
       *       4
       *     ]
       */
      allocationIds: number[]
      /**
       * Format: date
       * @description The date when the prisoner will be suspended till from the activity
       * @example 2023-09-10
       */
      suspendUntil: string
    }
    /** @description The request with the suspension details */
    SuspendPrisonerRequest: {
      /**
       * @description The prisoner number (NOMIS ID)
       * @example A1234AA
       */
      prisonerNumber: string
      /**
       * @description The allocation or allocations affected by the suspensions request. They must all be for the same prisoner
       * @example [
       *       1,
       *       2,
       *       3,
       *       4
       *     ]
       */
      allocationIds: number[]
      /**
       * Format: date
       * @description The date when the prisoner will be suspended from the activity
       * @example 2023-09-10
       */
      suspendFrom: string
      suspensionCaseNote?: components['schemas']['AddCaseNoteRequest']
      /**
       * @description The type of suspension. Only SUSPENDED or SUSPENDED_WITH_PAY are allowed when suspending
       * @example SUSPENDED_WITH_PAY
       * @enum {string}
       */
      status: 'ACTIVE' | 'PENDING' | 'SUSPENDED' | 'AUTO_SUSPENDED' | 'ENDED' | 'SUSPENDED_WITH_PAY'
    }
    /** @description The create request with the new activity details */
    ActivityCreateRequest: {
      /**
       * @description The prison code where this activity takes place
       * @example PVI
       */
      prisonCode: string
      /**
       * @description Flag to indicate if attendance is required for this activity, e.g. gym induction might not be mandatory attendance
       * @example false
       */
      attendanceRequired: boolean
      /**
       * @description Flag to indicate if the location of the activity is in cell
       * @example false
       */
      inCell: boolean
      /**
       * @description Flag to indicate if the location of the activity is on wing
       * @example false
       */
      onWing: boolean
      /**
       * @description Flag to indicate if the location of the activity is off wing and not in a listed location
       * @example false
       */
      offWing: boolean
      /**
       * @description Flag to indicate if the activity is piece work
       * @example false
       */
      pieceWork: boolean
      /**
       * @description Flag to indicate if the activity carried out outside of the prison
       * @example false
       */
      outsideWork: boolean
      /**
       * @description Flag to indicate if the activity is a paid activity. It true then pay rates are required, if false then no pay rates should be provided
       * @example true
       */
      paid: boolean
      /**
       * @description Indicates whether the activity session is a (F)ull day or a (H)alf day (for payment purposes).
       * @example H
       * @enum {string}
       */
      payPerSession?: 'H' | 'F'
      /**
       * @description A brief summary description of this activity for use in forms and lists
       * @example Maths level 1
       */
      summary: string
      /**
       * @description A detailed description for this activity
       * @example A basic maths course suitable for introduction to the subject
       */
      description?: string
      /**
       * Format: int64
       * @description The category id for this activity, one of the high-level categories
       */
      categoryId: number
      /**
       * @description The tier code for this activity, as defined by the Future Prison Regime team
       * @example TIER_1
       * @enum {string}
       */
      tierCode: 'TIER_1' | 'TIER_2' | 'FOUNDATION'
      /**
       * @description The organiser code for the organiser of this activity
       * @example PRISON_STAFF
       */
      organiserCode?: string
      /**
       * @description A list of eligibility rules ids which apply to this activity.
       * @example [
       *       1,
       *       2,
       *       3
       *     ]
       */
      eligibilityRuleIds: number[]
      /** @description The list of pay rates that can apply to this activity */
      pay: components['schemas']['ActivityPayCreateRequest'][]
      /**
       * @description The most recent risk assessment level for this activity
       * @example high
       */
      riskLevel: string
      /**
       * Format: date
       * @description The future date on which this activity will start. From this date, any schedules will be created as real, planned instances
       * @example 2022-12-23
       */
      startDate: string
      /**
       * Format: date
       * @description The date on which this activity ends. From this date, there will be no more planned instances of the activity. If null, the activity has no end date and will be scheduled indefinitely.
       * @example 2022-12-23
       */
      endDate?: string
      /** @description The list of minimum education levels that apply to this activity */
      minimumEducationLevel: components['schemas']['ActivityMinimumEducationLevelCreateRequest'][]
      /**
       * Format: int64
       * @description The optional NOMIS internal location id for this schedule
       * @example 98877667
       */
      locationId?: number
      /**
       * Format: int32
       * @description The maximum number of prisoners allowed for a scheduled instance of this schedule
       * @example 10
       */
      capacity?: number
      /**
       * Format: int32
       * @description The number of weeks in the schedule
       * @example 1
       */
      scheduleWeeks: number
      /** @description The days and times an activity schedule can take place */
      slots: components['schemas']['Slot'][]
      /**
       * @description Whether the schedule runs on bank holidays
       * @example true
       */
      runsOnBankHoliday: boolean
    }
    /** @description Describes the minimum education levels to be created for an activity */
    ActivityMinimumEducationLevelCreateRequest: {
      /**
       * @description The Education level code
       * @example 1
       */
      educationLevelCode: string
      /**
       * @description The Education level description
       * @example Reading Measure 1.0
       */
      educationLevelDescription: string
      /**
       * @description The study area code
       * @example ENGLA
       */
      studyAreaCode: string
      /**
       * @description The study area description
       * @example English Language
       */
      studyAreaDescription: string
    }
    /** @description Describes the pay rates and bands to be created for an activity */
    ActivityPayCreateRequest: {
      /**
       * @description The NOMIS code for the incentive/earned privilege level
       * @example BAS
       */
      incentiveNomisCode: string
      /**
       * @description The incentive/earned privilege level
       * @example Basic
       */
      incentiveLevel: string
      /**
       * Format: int64
       * @description The id of the prison pay band used
       * @example 1
       */
      payBandId: number
      /**
       * Format: int32
       * @description The earning rate for one half day session for someone of this incentive level and pay band (in pence)
       * @example 150
       */
      rate?: number
      /**
       * Format: int32
       * @description Where payment is related to produced amounts of a product, this indicates the payment rate (in pence) per pieceRateItems produced
       * @example 150
       */
      pieceRate?: number
      /**
       * Format: int32
       * @description Where payment is related to the number of items produced in a batch of a product, this is the batch size that attract 1 x pieceRate
       * @example 10
       */
      pieceRateItems?: number
      /**
       * Format: date
       * @description The effective start date for this pay rate
       * @example 2022-12-23
       */
      startDate?: string
    }
    /** @description Describes a top-level activity */
    Activity: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity
       * @example 123456
       */
      id: number
      /**
       * @description The prison code where this activity takes place
       * @example PVI
       */
      prisonCode: string
      /**
       * @description Flag to indicate if attendance is required for this activity, e.g. gym induction might not be mandatory attendance
       * @example false
       */
      attendanceRequired: boolean
      /**
       * @description Flag to indicate if the location of the activity is in cell
       * @example false
       */
      inCell: boolean
      /**
       * @description Flag to indicate if the location of the activity is on wing
       * @example false
       */
      onWing: boolean
      /**
       * @description Flag to indicate if the location of the activity is off wing and not in a listed location
       * @example false
       */
      offWing: boolean
      /**
       * @description Flag to indicate if the activity is piece work
       * @example false
       */
      pieceWork: boolean
      /**
       * @description Flag to indicate if the activity carried out outside of the prison
       * @example false
       */
      outsideWork: boolean
      /**
       * @description Indicates whether the activity session is a (F)ull day or a (H)alf day (for payment purposes).
       * @example H
       * @enum {string}
       */
      payPerSession: 'H' | 'F'
      /**
       * @description A brief summary description of this activity for use in forms and lists
       * @example Maths level 1
       */
      summary: string
      /**
       * @description A detailed description for this activity
       * @example A basic maths course suitable for introduction to the subject
       */
      description?: string
      category: components['schemas']['ActivityCategory']
      tier?: components['schemas']['EventTier']
      organiser?: components['schemas']['EventOrganiser']
      /**
       * @description A list of eligibility rules which apply to this activity. These can be positive (include) and negative (exclude)
       * @example [FEMALE_ONLY,AGED_18-25]
       */
      eligibilityRules: components['schemas']['ActivityEligibility'][]
      /** @description A list of schedules for this activity. These contain the time slots / recurrence settings for instances of this activity. */
      schedules: components['schemas']['ActivitySchedule'][]
      /** @description The list of pay rates by incentive level and pay band that can apply to this activity */
      pay: components['schemas']['ActivityPay'][]
      /**
       * Format: date
       * @description The date on which this activity will start. From this date, any schedules will be created as real, planned instances
       * @example 2022-09-21
       */
      startDate: string
      /**
       * Format: date
       * @description The date on which this activity ends. From this date, there will be no more planned instances of the activity. If null, the activity has no end date and will be scheduled indefinitely.
       * @example 2022-12-21
       */
      endDate?: string
      /**
       * @description The most recent risk assessment level for this activity
       * @example high
       */
      riskLevel: string
      /**
       * Format: date-time
       * @description The date and time when this activity was created
       */
      createdTime: string
      /**
       * @description The person who created this activity
       * @example Adam Smith
       */
      createdBy: string
      /**
       * Format: date-time
       * @description The date and time when this activity was updated
       */
      updatedTime?: string
      /**
       * @description The person who updated this activity
       * @example Adam Smith
       */
      updatedBy?: string
      /** @description The list of minimum education levels that can apply to this activity */
      minimumEducationLevel: components['schemas']['ActivityMinimumEducationLevel'][]
      /**
       * @description Whether the activity is a paid activity
       * @example true
       */
      paid: boolean
    }
    /**
     * @description Describes an eligibility rule as applied to an activity
     * @example [FEMALE_ONLY,AGED_18-25]
     */
    ActivityEligibility: {
      /**
       * Format: int64
       * @description The internal ID of the activity that these rules apply to
       * @example 123456
       */
      id: number
      eligibility: components['schemas']['EligibilityRule']
    }
    /** @description Describes the pay rates and bands which apply to an activity */
    ActivityPay: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity pay
       * @example 123456
       */
      id: number
      /**
       * @description The NOMIS code for the incentive/earned privilege level
       * @example BAS
       */
      incentiveNomisCode: string
      /**
       * @description The incentive/earned privilege level
       * @example Basic
       */
      incentiveLevel: string
      prisonPayBand: components['schemas']['PrisonPayBand']
      /**
       * Format: int32
       * @description The earning rate for one half day session for someone of this incentive level and pay band (in pence)
       * @example 150
       */
      rate?: number
      /**
       * Format: int32
       * @description Where payment is related to produced amounts of a product, this indicates the payment rate (in pence) per pieceRateItems produced
       * @example 150
       */
      pieceRate?: number
      /**
       * Format: int32
       * @description Where payment is related to the number of items produced in a batch of a product, this is the batch size that attract 1 x pieceRate
       * @example 10
       */
      pieceRateItems?: number
      /**
       * Format: date
       * @description The effective start date for this pay rate
       * @example 2024-06-18
       */
      startDate?: string
    }
    /** @description
     *       Describes the weekly schedule for an activity. There can be several of these defined for one activity.
     *       An activity schedule describes when, during the week, an activity will be run and where.
     *       e.g. Tuesday PM and Thursday AM - suitable for Houseblock 2 to attend.
     *       e.g. Monday AM and Thursday PM - suitable for Houseblock 3 to attend.
     *        */
    ActivitySchedule: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity schedule
       * @example 123456
       */
      id: number
      /** @description The planned instances associated with this activity schedule */
      instances: components['schemas']['ScheduledInstance'][]
      /** @description The list of allocated prisoners who are allocated to this schedule, at this time and location */
      allocations: components['schemas']['Allocation'][]
      /**
       * @description The description of this activity schedule
       * @example Entry level Maths 1
       */
      description: string
      /** @description Indicates the dates between which the schedule has been suspended */
      suspensions: components['schemas']['Suspension'][]
      internalLocation?: components['schemas']['InternalLocation']
      /**
       * Format: int32
       * @description The maximum number of prisoners allowed for a scheduled instance of this schedule
       * @example 10
       */
      capacity: number
      activity: components['schemas']['ActivityLite']
      /**
       * Format: int32
       * @description The number of weeks in the schedule
       * @example 1
       */
      scheduleWeeks: number
      /** @description The slots associated with this activity schedule */
      slots: components['schemas']['ActivityScheduleSlot'][]
      /**
       * Format: date
       * @description The date on which this schedule will start. From this date, any schedules will be created as real, planned instances
       * @example 2022-09-21
       */
      startDate: string
      /**
       * Format: date
       * @description The date on which this schedule will end. From this date, any schedules will be created as real, planned instances
       * @example 2022-10-21
       */
      endDate?: string
      /**
       * @description Whether the schedule runs on bank holidays
       * @example true
       */
      runsOnBankHoliday: boolean
      /**
       * Format: date-time
       * @description The date and time when this activity schedule was updated
       */
      updatedTime?: string
      /**
       * @description The person who updated this activity schedule
       * @example Adam Smith
       */
      updatedBy?: string
      /** @description a flag to indicate if this activity is scheduled according to prison standard regime times */
      usePrisonRegimeTime: boolean
    }
    /** @description Defines one eligibility rule */
    EligibilityRule: {
      /**
       * Format: int64
       * @description The internally-generated ID for this eligibility rule
       * @example 123456
       */
      id: number
      /**
       * @description The code for this eligibility rule
       * @example OVER_21
       */
      code: string
      /**
       * @description The description for this eligibility rule
       * @example The prisoner must be over 21 to attend
       */
      description: string
    }
    /** @description Describes one instance of an activity schedule */
    ScheduledInstance: {
      /**
       * Format: int64
       * @description The internally-generated ID for this scheduled instance
       * @example 123456
       */
      id: number
      /**
       * Format: date
       * @description The specific date for this scheduled instance
       * @example 2022-09-30
       */
      date: string
      /**
       * Format: partial-time
       * @description The start time for this scheduled instance
       * @example 09:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time for this scheduled instance
       * @example 10:00
       */
      endTime: string
      /**
       * @description The timeslot
       * @enum {string}
       */
      timeSlot: 'AM' | 'PM' | 'ED'
      /**
       * @description Flag to indicate if this scheduled instance has been cancelled since being scheduled
       * @example false
       */
      cancelled: boolean
      /**
       * Format: date-time
       * @description Date and time this scheduled instance was cancelled (or null if not cancelled)
       */
      cancelledTime?: string
      /**
       * @description The person who cancelled this scheduled instance (or null if not cancelled)
       * @example Adam Smith
       */
      cancelledBy?: string
      /** @description The attendance records for this scheduled instance */
      attendances: components['schemas']['Attendance'][]
    }
    /** @description Describes the period of time an activity schedule has been suspended */
    Suspension: {
      /**
       * Format: date
       * @description The date from which the activity schedule was suspended
       * @example 2022-09-02
       */
      suspendedFrom: string
      /**
       * Format: date
       * @description The date until which the activity schedule was suspended. If null, the schedule is suspended indefinitely
       * @example 2022-09-02
       */
      suspendedUntil?: string
    }
    /** @description The update request with the waiting list changes */
    WaitingListApplicationUpdateRequest: {
      /**
       * Format: date
       * @description
       *           The updated past or present date on which the waiting list application was requested.
       *
       *           Note this cannot be after the date the waiting list application was first made.
       *
       * @example 2023-06-23
       */
      applicationDate?: string
      /**
       * @description The updated person who made the request
       * @example Fred Bloggs
       */
      requestedBy?: string
      /**
       * @description The updated comments related to the waiting list request
       * @example The prisoner has specifically requested to attend this activity
       */
      comments?: string
      /**
       * @description The updated status of the application. Only PENDING, APPROVED or DECLINED are allowed when updating.
       * @example PENDING
       * @enum {string}
       */
      status?: 'PENDING' | 'APPROVED' | 'DECLINED' | 'ALLOCATED' | 'REMOVED'
    }
    /** @description The prison pay band to update */
    PrisonPayBandUpdateRequest: {
      /**
       * Format: int32
       * @description The order in which the pay band should be presented within a list e.g. dropdown
       * @example 1
       */
      displaySequence?: number
      /**
       * @description The alternative text to use in place of the description e.g. Low, Medium, High
       * @example Low
       */
      alias: string
      /**
       * @description The description of pay band in this prison
       * @example Pay band 1
       */
      description: string
      /**
       * Format: int32
       * @description The pay band number this is associated with in NOMIS (1-10)
       * @example 1
       */
      nomisPayBand?: number
    }
    /** @description The update request with the new appointment details and how to apply the update */
    AppointmentUpdateRequest: {
      /**
       * @description
       *         The updated NOMIS reference code. Must exist and be active.
       *
       * @example GYMW
       */
      categoryCode?: string
      /**
       * @description The tier code for this appointment
       * @example TIER_1
       * @enum {string}
       */
      tierCode?: 'TIER_1' | 'TIER_2' | 'FOUNDATION'
      /**
       * @description The organiser code for this appointment
       * @example PRISON_STAFF
       * @enum {string}
       */
      organiserCode?: 'PRISON_STAFF' | 'PRISONER' | 'EXTERNAL_PROVIDER' | 'OTHER'
      /**
       * Format: int64
       * @description
       *         The updated NOMIS internal location id within the specified prison. This must be supplied if inCell is false.
       *         The internal location id must exist, must be within the prison specified by the prisonCode property on the
       *         appointment and be active.
       *
       * @example 123
       */
      internalLocationId?: number
      /**
       * @description
       *         Flag to indicate if the location of the appointment or appointments is in cell rather than an internal prison location.
       *         Internal location id will be ignored if inCell is true
       *
       * @example false
       */
      inCell?: boolean
      /**
       * Format: date
       * @description
       *         The updated date of the appointment. NOTE: this property specifies the start date to use along with the existing
       *         schedule frequency to move all appointments that will take place after the appointment when used in conjunction
       *         with the applyTo property
       *
       */
      startDate?: string
      /**
       * Format: partial-time
       * @description The updated starting time
       * @example 09:00
       */
      startTime?: string
      /**
       * Format: partial-time
       * @description The updated end time
       * @example 10:30
       */
      endTime?: string
      /**
       * @description
       *         Updated extra information for the prisoner or prisoners attending the appointment or appointments.
       *         Shown only on the appointments details page and on printed movement slips. Wing staff will be notified there is
       *         extra information via the unlock list.
       *
       * @example This appointment will help adjusting to life outside of prison
       */
      extraInformation?: string
      /**
       * @description The prisoner or prisoners to remove from the appointment or appointments
       * @example [
       *       "A1234BC"
       *     ]
       */
      removePrisonerNumbers?: string[]
      /**
       * @description The new prisoner or prisoners that will be attending the appointment or appointments
       * @example [
       *       "A1234BC"
       *     ]
       */
      addPrisonerNumbers?: string[]
      /**
       * @description
       *         Specifies which appointment or appointments this update should apply to.
       *         Defaults to THIS_APPOINTMENT meaning the update will be applied to the appointment specified by the
       *         supplied id only.
       *
       * @example THIS_APPOINTMENT
       * @enum {string}
       */
      applyTo: 'THIS_APPOINTMENT' | 'THIS_AND_ALL_FUTURE_APPOINTMENTS' | 'ALL_FUTURE_APPOINTMENTS'
      isPropertyUpdate: boolean
    }
    /** @description The update request with the new allocation details */
    AllocationUpdateRequest: {
      /**
       * Format: date
       * @description The date when the prisoner will start the activity
       * @example 2022-09-10
       */
      startDate?: string
      /**
       * Format: date
       * @description The date when the prisoner will stop attending the activity
       * @example 2023-09-10
       */
      endDate?: string
      /**
       * @description A flag to indicate that the allocation end date is to be removed
       * @example true
       */
      removeEndDate?: boolean
      /**
       * @description The reason code for the deallocation
       * @example RELEASED
       * @enum {string}
       */
      reasonCode?:
        | 'OTHER'
        | 'PERSONAL'
        | 'PROBLEM'
        | 'REMOVED'
        | 'SECURITY'
        | 'UNACCEPTABLE_ATTENDANCE'
        | 'UNACCEPTABLE_BEHAVIOUR'
        | 'WITHDRAWN'
      /**
       * Format: int64
       * @description Where a prison uses pay bands to differentiate earnings, this is the pay band given to this prisoner
       */
      payBandId?: number
      /** @description The days and times that the prisoner is excluded from this activity's schedule. All values must match a slot where the activity is scheduled to run, and due to sync to nomis, there can not not be exclusions defined on the same day and time slot over multiple weeks. */
      exclusions?: components['schemas']['Slot'][]
      /**
       * Format: int64
       * @description The scheduled instance id required when allocation starts today
       */
      scheduleInstanceId?: number
    }
    /** @description The update request with the new activity details */
    ActivityUpdateRequest: {
      /**
       * Format: int64
       * @description The category id for this activity, one of the high-level categories
       */
      categoryId?: number
      /**
       * @description The tier code for this activity, as defined by the Future Prison Regime team
       * @example TIER_1
       * @enum {string}
       */
      tierCode?: 'TIER_1' | 'TIER_2' | 'FOUNDATION'
      /**
       * @description The organiser code for this activity
       * @example PRISON_STAFF
       */
      organiserCode?: string
      /**
       * @description A brief summary description of this activity for use in forms and lists
       * @example Maths level 1
       */
      summary?: string
      /**
       * Format: date
       * @description The date on which this activity will start. From this date, any schedules will be created as real, planned instances
       * @example 2022-12-23
       */
      startDate?: string
      /**
       * Format: date
       * @description The date on which this activity ends. From this date, there will be no more planned instances of the activity. If null, the activity has no end date and will be scheduled indefinitely.
       * @example 2022-12-23
       */
      endDate?: string
      /**
       * @description Whether the schedule runs on bank holidays
       * @example true
       */
      runsOnBankHoliday?: boolean
      /**
       * Format: int32
       * @description The maximum number of prisoners allowed for a scheduled instance of this schedule
       * @example 10
       */
      capacity?: number
      /**
       * @description The most recent risk assessment level for this activity
       * @example high
       */
      riskLevel?: string
      /**
       * Format: int64
       * @description The optional NOMIS internal location id for this schedule
       * @example 98877667
       */
      locationId?: number
      /**
       * @description Flag to indicate if the location of the activity is in cell
       * @example false
       */
      inCell?: boolean
      /**
       * @description Flag to indicate if the location of the activity is on wing
       * @example false
       */
      onWing?: boolean
      /**
       * @description Flag to indicate if the location of the activity is off wing and not in a listed location
       * @example false
       */
      offWing?: boolean
      /**
       * @description Flag to indicate if attendance is required for this activity, e.g. gym induction might not be mandatory attendance
       * @example false
       */
      attendanceRequired?: boolean
      /** @description The list of minimum education levels that apply to this activity */
      minimumEducationLevel?: components['schemas']['ActivityMinimumEducationLevelCreateRequest'][]
      /** @description The list of pay rates that can apply to this activity. Must be null or empty if the activity is unpaid */
      pay?: components['schemas']['ActivityPayCreateRequest'][]
      /**
       * Format: int32
       * @description The number of weeks in the schedule
       * @example 1
       */
      scheduleWeeks?: number
      /** @description The days and times an activity schedule can take place */
      slots?: components['schemas']['Slot'][]
      /**
       * @description A flag to indicate that the end date is to be removed
       * @default false
       * @example true
       */
      removeEndDate: boolean
      /**
       * @description Flag to indicate if the activity is a paid activity or not. If true then pay rates are required, if false then no pay rates should be provided. Cannot be updated if already allocated.
       * @example true
       */
      paid?: boolean
    }
    /** @description A list of paid attendance counts for each booking in the prison on the date */
    AttendanceReconciliationResponse: {
      /**
       * @description The prison code
       * @example BXI
       */
      prisonCode: string
      /**
       * Format: date
       * @description The date to check
       * @example 2023-10-25
       */
      date: string
      /**
       * @description A list of bookings and the number of paid attendances for each
       * @example { [ "bookingId": 12345, "count": 2 ] }
       */
      bookings: components['schemas']['BookingCount'][]
    }
    /**
     * @description The count for a booking ID
     * @example { [ "bookingId": 12345, "count": 2 ] }
     */
    BookingCount: {
      /**
       * Format: int64
       * @description The booking ID
       * @example 12345
       */
      bookingId: number
      /**
       * Format: int64
       * @description The count for the booking ID
       * @example 2
       */
      count: number
    }
    /** @description A list of allocation counts for each booking in the prison */
    AllocationReconciliationResponse: {
      /**
       * @description The prison code
       * @example BXI
       */
      prisonCode: string
      /**
       * @description A list of bookings and the number of active allocations for each
       * @example { [ "bookingId": 12345, "count": 2 ] }
       */
      bookings: components['schemas']['BookingCount'][]
    }
    /** @description
     *       Represents the key data required to synchronise an attendance with Nomis
     *        */
    AttendanceSync: {
      /**
       * Format: int64
       * @description The attendance primary key
       * @example 123456
       */
      attendanceId: number
      /**
       * Format: int64
       * @description The scheduled instance primary key
       * @example 123456
       */
      scheduledInstanceId: number
      /**
       * Format: int64
       * @description The activity schedule primary key
       * @example 123456
       */
      activityScheduleId: number
      /**
       * Format: date
       * @description The scheduled instance date
       * @example 2023-03-30
       */
      sessionDate: string
      /**
       * Format: partial-time
       * @description The scheduled instance start time
       * @example 10:00
       */
      sessionStartTime: string
      /**
       * Format: partial-time
       * @description The scheduled instance end time
       * @example 11:00
       */
      sessionEndTime: string
      /**
       * @description The offender's unique identifier
       * @example A1234BC
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description The offender booking primary key
       * @example 123456
       */
      bookingId: number
      /** @description The reason for attending or not */
      attendanceReasonCode?: string
      /**
       * @description Free text to allow comments to be put against the attendance
       * @example Prisoner was too unwell to attend the activity.
       */
      comment?: string
      /**
       * @description WAITING, COMPLETED.
       * @example WAITING
       */
      status: string
      /**
       * Format: int32
       * @description The amount in pence to pay the prisoner for the activity
       * @example 100
       */
      payAmount?: number
      /**
       * Format: int32
       * @description The bonus amount in pence to pay the prisoner for the activity
       * @example 50
       */
      bonusAmount?: number
      /**
       * @description Should payment be issued for SICK, REST or OTHER
       * @example true
       */
      issuePayment?: boolean
    }
    HmppsSubjectAccessRequestContent: {
      /** @description The content of the subject access request response */
      content: Record<string, never>
    }
    /** @description Describes a pay rate applied to an activity */
    ActivityPayLite: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity pay
       * @example 123456
       */
      id: number
      /**
       * @description The NOMIS code for the incentive/earned privilege level
       * @example BAS
       */
      incentiveNomisCode: string
      /**
       * @description The incentive/earned privilege level
       * @example Basic
       */
      incentiveLevel: string
      /**
       * Format: int64
       * @description The pay band id for this activity pay
       * @example 123456
       */
      prisonPayBandId: number
      /**
       * Format: int32
       * @description The earning rate for one half day session for someone of this incentive level and pay band (in pence)
       * @example 150
       */
      rate?: number
      /**
       * Format: int32
       * @description Where payment is related to produced amounts of a product, this indicates the payment rate (in pence) per pieceRateItems produced
       * @example 150
       */
      pieceRate?: number
      /**
       * Format: int32
       * @description Where payment is related to the number of items produced in a batch of a product, this is the batch size that attract 1 x pieceRate
       * @example 10
       */
      pieceRateItems?: number
    }
    AddressDto: {
      /**
       * @description Primary Address
       * @example false
       */
      primary: boolean
      /**
       * @description No Fixed Address
       * @example false
       */
      noFixedAddress: boolean
      /**
       * Format: int64
       * @description Address Id
       * @example 543524
       */
      addressId?: number
      /**
       * @description Address Type. Note: Reference domain is ADDR_TYPE
       * @example BUS
       */
      addressType?: string
      /**
       * @description Flat
       * @example 3B
       */
      flat?: string
      /**
       * @description Premise
       * @example Liverpool Prison
       */
      premise?: string
      /**
       * @description Street
       * @example Slinn Street
       */
      street?: string
      /**
       * @description Locality
       * @example Brincliffe
       */
      locality?: string
      /**
       * @description Town/City. Note: Reference domain is CITY
       * @example Liverpool
       */
      town?: string
      /**
       * @description Postal Code
       * @example LI1 5TH
       */
      postalCode?: string
      /**
       * @description County. Note: Reference domain is COUNTY
       * @example HEREFORD
       */
      county?: string
      /**
       * @description Country. Note: Reference domain is COUNTRY
       * @example ENG
       */
      country?: string
      /**
       * @description Comment
       * @example This is a comment text
       */
      comment?: string
      /**
       * Format: date
       * @description Date Added
       */
      startDate?: string
      /**
       * Format: date
       * @description Date ended
       */
      endDate?: string
      /**
       * @description The phone number associated with the address
       * @example null
       */
      phones?: components['schemas']['Telephone'][]
      /**
       * @description The address usages/types
       * @example null
       */
      addressUsages?: components['schemas']['AddressUsageDto'][]
    }
    /**
     * @description The address usages/types
     * @example null
     */
    AddressUsageDto: {
      /**
       * Format: int64
       * @description Address ID of the associated address
       * @example 23422313
       */
      addressId?: number
      /**
       * @description The address usages
       * @example HDC
       */
      addressUsage?: string
      /**
       * @description The address usages description
       * @example HDC Address
       */
      addressUsageDescription?: string
      /**
       * @description Active Flag
       * @example true
       */
      activeFlag?: boolean
    }
    /** @description Allocation details with activity pay rate if applicable */
    AllocationPayRate: {
      payRate?: components['schemas']['ActivityPayLite']
      allocation: components['schemas']['Allocation']
    }
    /** @description Cross references prisoners details with activity requirements */
    AllocationSuitability: {
      workplaceRiskAssessment?: components['schemas']['WRASuitability']
      incentiveLevel?: components['schemas']['IncentiveLevelSuitability']
      education?: components['schemas']['EducationSuitability']
      releaseDate?: components['schemas']['ReleaseDateSuitability']
      /** @description The prisoner's currently active allocations with pay rates */
      allocations: components['schemas']['AllocationPayRate'][]
      /** @description The prisoner's previous allocations to this activity where they have been deallocated by a member of staff, with an optional case note */
      previousDeallocations: components['schemas']['DeallocationCaseNote'][]
    }
    /** @description Ended allocation details with optional deallocation case note text */
    DeallocationCaseNote: {
      allocation: components['schemas']['Allocation']
      caseNoteText?: string
    }
    /** @description The prisoner's education levels */
    Education: {
      /** Format: int64 */
      bookingId: number
      /** Format: date */
      startDate: string
      /** Format: date */
      endDate: string
      studyArea: string
      educationLevel: string
      /** Format: int32 */
      numberOfYears: number
      graduationYear: string
      comment: string
      school: string
      isSpecialEducation: boolean
      schedule: string
      addresses: components['schemas']['AddressDto'][]
    }
    /** @description Prisoner workplace education suitability */
    EducationSuitability: {
      /**
       * @description The prisoner's suitability
       * @example true
       */
      suitable: boolean
      /** @description The prisoner's education levels */
      education: components['schemas']['Education'][]
    }
    /** @description Prisoner's incentive level suitability */
    IncentiveLevelSuitability: {
      /**
       * @description The prisoner's suitability
       * @example true
       */
      suitable: boolean
      /**
       * @description The prisoner's current incentive level
       * @example standard
       */
      incentiveLevel?: string
    }
    /** @description Prisoner release date suitability */
    ReleaseDateSuitability: {
      /**
       * @description The prisoner's suitability
       * @example true
       */
      suitable: boolean
      earliestReleaseDate: components['schemas']['EarliestReleaseDate']
    }
    /**
     * @description The phone number associated with the address
     * @example null
     */
    Telephone: {
      /**
       * @description Telephone number
       * @example 0114 2345678
       */
      number: string
      /**
       * @description Telephone type
       * @example TEL
       */
      type: string
      /**
       * Format: int64
       * @description Phone Id
       * @example 2234232
       */
      phoneId?: number
      /**
       * @description Telephone extension number
       * @example 123
       */
      ext?: string
    }
    /** @description Prisoner workplace risk assessment suitability */
    WRASuitability: {
      /**
       * @description The prisoner's suitability
       * @example true
       */
      suitable: boolean
      /**
       * @description The prisoner's WRA level
       * @example medium
       */
      riskLevel: string
    }
    /** @description Prisoner non-association details */
    NonAssociationDetails: {
      /**
       * @description Is allocated to this activity?
       * @example true
       */
      allocated: boolean
      /**
       * @description The reason code
       * @example GANG_RELATED
       */
      reasonCode: string
      /**
       * @description The reason description
       * @example Gang related
       */
      reasonDescription: string
      /**
       * @description The role code
       * @example VICTIM
       */
      roleCode: string
      /**
       * @description The role description
       * @example VICTIM
       */
      roleDescription: string
      /**
       * @description The restriction type
       * @example WING
       */
      restrictionType: string
      /**
       * @description The restriction type description
       * @example Cell, landing and wing
       */
      restrictionTypeDescription: string
      otherPrisonerDetails: components['schemas']['OtherPrisonerDetails']
      /**
       * Format: date-time
       * @description Date and time the non-association was updated. In Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.
       */
      whenUpdated: string
      /**
       * @description Additional free text comments related to the non-association.
       * @example Violent acts
       */
      comments?: string
    }
    /** @description Non-association prisoner details */
    OtherPrisonerDetails: {
      /**
       * @description The prisoners number
       * @example G0135GA
       */
      prisonerNumber: string
      /**
       * @description The prisoners first name
       * @example Joseph
       */
      firstName: string
      /**
       * @description The prisoners last name
       * @example Bloggs
       */
      lastName: string
      /**
       * @description Description of living unit (e.g. cell) the offender is assigned to.
       * @example PVI-1-2-4
       */
      cellLocation: string
    }
    /** @description Describes a candidate for allocation to an activity */
    ActivityCandidate: {
      /**
       * @description The candidate's name
       * @example Joe Bloggs
       */
      name: string
      /**
       * @description The candidate's first name
       * @example Joe
       */
      firstName: string
      /**
       * @description The candidate's last name
       * @example Bloggs
       */
      lastName: string
      /**
       * @description The candidate's prisoner number
       * @example GF10101
       */
      prisonerNumber: string
      /**
       * @description The candidate's cell location
       * @example MDI-1-1-101
       */
      cellLocation?: string
      /** @description Any activities the candidate is currently allocated to (excluding ended) */
      otherAllocations: components['schemas']['Allocation'][]
      earliestReleaseDate: components['schemas']['EarliestReleaseDate']
      /** @description Does the prisoner have non-associations? Null implies that non-associations could not be retrieved */
      nonAssociations?: boolean
    }
    PageActivityCandidate: {
      /** Format: int32 */
      totalPages?: number
      /** Format: int64 */
      totalElements?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['ActivityCandidate'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Describes a prisoner scheduled to attend to an activity */
    ScheduledAttendee: {
      /**
       * Format: int64
       * @description The internal ID of the scheduled instance
       * @example 1
       */
      scheduledInstanceId: number
      /**
       * Format: int64
       * @description The internal ID of the allocation
       * @example 1
       */
      allocationId: number
      /**
       * @description The candidate's prisoner number
       * @example GF10101
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description The booking id of the prisoner
       * @example 10001
       */
      bookingId?: number
      /**
       * @description Set to true if this prisoner is suspended from the scheduled event
       * @example false
       */
      suspended: boolean
      /**
       * @description Set to true if this prisoner is auto-suspended from the scheduled event
       * @example false
       */
      autoSuspended: boolean
    }
    /** @description Attendance summary details */
    AttendanceSummaryDetails: {
      /**
       * Format: int64
       * @description The number of prisoners allocated to this scheduled instance
       * @example 5
       */
      allocations: number
      /**
       * Format: int64
       * @description The number of attendees for this scheduled instance
       * @example 5
       */
      attendees?: number
      /**
       * Format: int64
       * @description The number of attendance records not recorded
       * @example 2
       */
      notRecorded?: number
      /**
       * Format: int64
       * @description The number of attendance recorded marked as attended
       * @example 2
       */
      attended?: number
      /**
       * Format: int64
       * @description The number of attendance recorded marked as absence
       * @example 1
       */
      absences?: number
      /**
       * Format: int64
       * @description The number of attendance recorded marked as paid
       * @example 2
       */
      paid?: number
    }
    /** @description An overview of attendance details for scheduled instances */
    ScheduledInstanceAttendanceSummary: {
      /**
       * Format: int64
       * @description The id of the scheduled instance
       * @example 10
       */
      scheduledInstanceId: number
      /**
       * Format: int64
       * @description The id of the activity
       * @example 1
       */
      activityId: number
      /**
       * Format: int64
       * @description The id of the activity schedule
       * @example 2
       */
      activityScheduleId: number
      /**
       * @description Summary of the activity
       * @example Maths 1
       */
      summary: string
      /**
       * Format: int64
       * @description Category id of the activity
       * @example 2
       */
      categoryId: number
      /**
       * Format: date
       * @description The date of the scheduled instance
       * @example 2023-03-30
       */
      sessionDate: string
      /**
       * Format: partial-time
       * @description The start time of the scheduled instance
       * @example 09:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time of the scheduled instance
       * @example 12:00
       */
      endTime: string
      /**
       * @description time slot of scheduled instance
       * @enum {string}
       */
      timeSlot: 'AM' | 'PM' | 'ED'
      /**
       * @description Flag to indicate if the location of the activity is in cell
       * @example false
       */
      inCell: boolean
      /**
       * @description Flag to indicate if the location of the activity is on wing
       * @example false
       */
      onWing: boolean
      /**
       * @description Flag to indicate if the location of the activity is off wing and not in a listed location
       * @example false
       */
      offWing: boolean
      internalLocation?: components['schemas']['InternalLocation']
      /**
       * @description Flag to indicate if the scheduled instance has been cancelled
       * @example false
       */
      cancelled: boolean
      attendanceSummary: components['schemas']['AttendanceSummaryDetails']
      /**
       * @description Flag to indicate if attendance is required
       * @example false
       */
      attendanceRequired: boolean
    }
    /** @description Describes the rollout plan of a prison which may or may not be rolled out */
    RolloutPrisonPlan: {
      /**
       * @description The prison code of the requested prison
       * @example PVI
       */
      prisonCode: string
      /**
       * @description Flag to indicate if activities are enabled
       * @example true
       */
      activitiesRolledOut: boolean
      /**
       * Format: date
       * @description The date activities rolled out. Can be null if the prison is not yet scheduled for rollout.
       * @example 2022-09-30
       */
      activitiesRolloutDate?: string
      /**
       * @description Flag to indicate if appointments are enabled
       * @example true
       */
      appointmentsRolledOut: boolean
      /**
       * Format: date
       * @description The date appointments rolled out. Can be null if the prison is not yet scheduled for rollout.
       * @example 2022-09-30
       */
      appointmentsRolloutDate?: string
      /**
       * Format: int32
       * @description max days to expire events based on prisoner movement, default is 21
       */
      maxDaysToExpiry: number
      /**
       * @description Flag to indicate if this prison is presently rolled out and live to the prison
       * @example true
       */
      prisonLive: boolean
    }
    DlqMessage: {
      body: {
        [key: string]: Record<string, never>
      }
      messageId: string
    }
    GetDlqResult: {
      /** Format: int32 */
      messagesFoundCount: number
      /** Format: int32 */
      messagesReturnedCount: number
      messages: components['schemas']['DlqMessage'][]
    }
    /** @description Summarises an activity */
    ActivitySummary: {
      /**
       * Format: int64
       * @description The internally-generated ID for this activity
       * @example 123456
       */
      id: number
      /**
       * @description The name of the activity
       * @example Maths level 1
       */
      activityName?: string
      category: components['schemas']['ActivityCategory']
      /**
       * Format: int32
       * @description The capacity of the activity
       */
      capacity: number
      /**
       * Format: int32
       * @description The number of prisoners currently allocated to the activity
       */
      allocated: number
      /**
       * Format: int32
       * @description The number of prisoners currently currently on the waitlist for the activity
       */
      waitlisted: number
      /**
       * Format: date-time
       * @description The date and time when this activity was created
       */
      createdTime: string
      /**
       * @description Whether the activity is live or archived
       * @example LIVE
       * @enum {string}
       */
      activityState: 'ARCHIVED' | 'LIVE'
    }
    /** @description
     *       A count summary of appointments based on a category
     *        */
    AppointmentCountSummary: {
      appointmentCategorySummary: components['schemas']['AppointmentCategorySummary']
      /**
       * Format: int64
       * @description The number of appointments
       * @example 25
       */
      count: number
    }
    Location: {
      /**
       * Format: int64
       * @description Location identifier.
       */
      locationId: number
      /**
       * @description Location type.
       * @example null
       */
      locationType: string
      /**
       * @description Location description.
       * @example null
       */
      description: string
      /**
       * @description Identifier of Agency this location is associated with.
       * @example null
       */
      agencyId: string
      /**
       * @description What events this room can be used for.
       * @example null
       */
      locationUsage?: string
      /**
       * Format: int64
       * @description Identifier of this location's parent location.
       */
      parentLocationId?: number
      /**
       * Format: int32
       * @description Current occupancy of location.
       */
      currentOccupancy?: number
      /**
       * @description Location prefix. Defines search prefix that will constrain search to this location and its subordinate locations.
       * @example null
       */
      locationPrefix?: string
      /**
       * Format: int32
       * @description Operational capacity of the location.
       */
      operationalCapacity?: number
      /**
       * @description User-friendly location description.
       * @example null
       */
      userDescription?: string
      /** @example null */
      internalLocationCode?: string
    }
    /** @description Location prefix response */
    LocationPrefixDto: {
      /**
       * @description Location prefix translated from group name
       * @example MDI-1-
       */
      locationPrefix: string
    }
    LocationGroup: {
      /**
       * @description The name of the group
       * @example null
       */
      name: string
      /**
       * @description A key for the group
       * @example null
       */
      key: string
      /**
       * @description The child groups of this group
       * @example null
       */
      children: components['schemas']['LocationGroup'][]
    }
    /** @description
     *       The summary of an internal location that has events scheduled to take place there. Supports movement lists.
     *       Will contain additional summary information about the events taking place at the location as well as the total
     *       number of prisoners due to arrive at the location.
     *       The system of record for internal locations is NOMIS and they are managed in that application.
     *        */
    InternalLocationEventsSummary: {
      /**
       * Format: int64
       * @description
       *         The id of the internal location. Mapped from AGENCY_INTERNAL_LOCATIONS.INTERNAL_LOCATION_ID in NOMIS.
       *
       * @example 27723
       */
      id: number
      /**
       * @description
       *         The prison code/agency id of the internal location. Mapped from AGENCY_LOCATIONS.AGY_LOC_ID in NOMIS.
       *
       * @example SKI
       */
      prisonCode: string
      /**
       * @description The code of the internal location. Mapped from AGENCY_INTERNAL_LOCATIONS.DESCRIPTION
       * @example EDUC-ED1-ED1
       */
      code: string
      /**
       * @description The description of the internal location. Mapped from AGENCY_INTERNAL_LOCATIONS.USER_DESC
       * @example Education 1
       */
      description: string
    }
    /** @description Describes one event that has occurred to indicate a change of circumstance */
    EventReview: {
      /**
       * Format: int64
       * @description The internally-generated ID for this event
       * @example 123456
       */
      eventReviewId: number
      /**
       * @description Describes the service which generated this event
       * @example prisoner-offender-search
       */
      serviceIdentifier?: string
      /**
       * @description The internal name for the event
       * @example prisoner-offender-events.prisoner.cell-move
       */
      eventType?: string
      /**
       * Format: date-time
       * @description The date and time that this event occurred
       */
      eventTime?: string
      /**
       * @description The prison code where this event took place
       * @example MDI
       */
      prisonCode?: string
      /**
       * @description The prisoner number which this event relates to
       * @example G1234FF
       */
      prisonerNumber?: string
      /**
       * Format: int32
       * @description The booking ID related to this prisoner
       * @example 123456
       */
      bookingId?: number
      /**
       * @description The description of the event that occurred
       * @example The prisoner was moved to a different cell.
       */
      eventData?: string
      /**
       * Format: date-time
       * @description The date and time that this event was acknowledged.
       */
      acknowledgedTime?: string
      /**
       * @description The username of the person who acknowledged the event.
       * @example U4588F
       */
      acknowledgedBy?: string
      /**
       * @description A simple description of the event acton
       * @example ACTIVITY_SUSPENDED
       * @enum {string}
       */
      eventDescription?:
        | 'ACTIVITY_SUSPENDED'
        | 'ACTIVITY_ENDED'
        | 'RELEASED'
        | 'PERMANENT_RELEASE'
        | 'TEMPORARY_RELEASE'
    }
    /** @description The result of an event review search */
    EventReviewSearchResults: {
      /** @description The matching records */
      content: components['schemas']['EventReview'][]
      /**
       * Format: int32
       * @description The current page number
       * @example 1
       */
      pageNumber: number
      /**
       * Format: int64
       * @description The total number of elements
       * @example 20
       */
      totalElements: number
      /**
       * Format: int32
       * @description The total number of pages
       * @example 5
       */
      totalPages: number
    }
    /** @description
     *       Represents the key data required to report on attendance
     *        */
    AllAttendance: {
      /**
       * Format: int64
       * @description The attendance primary key
       * @example 123456
       */
      attendanceId: number
      /**
       * @description The prison code where this activity takes place
       * @example PVI
       */
      prisonCode: string
      /**
       * Format: date
       * @description The date of the session for which attendance may have been marked or a planned absence recorded
       * @example 2023-03-30
       */
      sessionDate: string
      /**
       * @description AM, PM, ED.
       * @example AM
       */
      timeSlot: string
      /**
       * Format: partial-time
       * @description The start time
       * @example 9:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time
       * @example 11:30
       */
      endTime: string
      /**
       * @description WAITING, COMPLETED.
       * @example WAITING
       */
      status: string
      /** @description The reason for attending or not */
      attendanceReasonCode?: string
      /**
       * @description Should payment be issued for SICK, REST or OTHER
       * @example true
       */
      issuePayment?: boolean
      /**
       * @description The prisoner number for this attendance record
       * @example A1234AA
       */
      prisonerNumber: string
      /**
       * Format: int64
       * @description The id of the particular session instance for this attendance record
       * @example 1
       */
      scheduledInstanceId: number
      /**
       * Format: int64
       * @description The id of the activity for this attendance record
       * @example 1
       */
      activityId: number
      /**
       * @description The title of the activity for this attendance record
       * @example Math Level 1
       */
      activitySummary: string
      /**
       * @description The name of the activity category for this attendance record
       * @example Education
       */
      categoryName: string
      /**
       * Format: date-time
       * @description The date and time the attendance was updated
       */
      recordedTime?: string
      /**
       * @description Is attendance required?
       * @example true
       */
      attendanceRequired: boolean
      /**
       * @description event tier
       * @enum {string}
       */
      eventTier?: 'TIER_1' | 'TIER_2' | 'FOUNDATION'
      /**
       * @description Was an incentive level warning issued for REFUSED
       * @example true
       */
      incentiveLevelWarningIssued?: boolean
    }
    /** @description suspended prisoner activity attendance */
    SuspendedPrisonerActivityAttendance: {
      /**
       * Format: partial-time
       * @description the activity start time
       */
      startTime: string
      /**
       * Format: partial-time
       * @description the activity end time
       */
      endTime: string
      /** @description internal location description */
      internalLocation?: string
      /**
       * @description Flag to indicate if the location of the activity is in cell
       * @example false
       */
      inCell: boolean
      /**
       * @description Flag to indicate if the location of the activity is on wing
       * @example false
       */
      onWing: boolean
      /**
       * @description Flag to indicate if the location of the activity is off wing and not in a listed location
       * @example false
       */
      offWing: boolean
      /** @description time slot */
      timeSlot: string
      /** @description category name */
      categoryName: string
      /** @description attendance reason code */
      attendanceReasonCode: string
      /**
       * Format: int64
       * @description The id of the particular session instance for this attendance record
       * @example 1
       */
      scheduledInstanceId: number
      /**
       * @description The title of the activity for this attendance record
       * @example Math Level 1
       */
      activitySummary: string
    }
    /** @description suspended prisoner activity attendance */
    SuspendedPrisonerAttendance: {
      /** @description prisoner number */
      prisonerNumber: string
      /** @description attendance */
      attendance: components['schemas']['SuspendedPrisonerActivityAttendance'][]
    }
    /** @description attendee and appointment details for a given status, ie not records */
    AppointmentAttendeeByStatus: {
      prisonerNumber: string
      /** Format: int64 */
      bookingId: number
      /** Format: int64 */
      appointmentId: number
      /** Format: int64 */
      appointmentAttendeeId: number
      appointmentName: string
      /** Format: date */
      startDate: string
      /** Format: partial-time */
      startTime: string
      /** Format: partial-time */
      endTime: string
    }
    /** @description
     *       Contains the summary information of a limited set the appointment properties along with counts of appointment attendance
     *       records. Supports management level views of appointment attendance and statistics.
     *        */
    AppointmentAttendanceSummary: {
      /**
       * Format: int64
       * @description The internally generated identifier for this appointment
       * @example 123456
       */
      id: number
      /**
       * @description The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS
       * @example SKI
       */
      prisonCode: string
      /** @description
       *         The appointment's name combining the optional custom name with the category description. If custom name has been
       *         specified, the name format will be "Custom name (Category description)"
       *          */
      appointmentName: string
      internalLocation?: components['schemas']['AppointmentLocationSummary']
      /**
       * @description Flag to indicate if the location of the appointment is in cell
       * @example false
       */
      inCell: boolean
      /**
       * Format: date
       * @description The date this appointment is taking place on
       */
      startDate: string
      /**
       * Format: partial-time
       * @description The starting time of this appointment
       * @example 13:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time of this appointment
       * @example 13:30
       */
      endTime?: string
      /**
       * @description Indicates that this appointment has been cancelled
       * @example false
       */
      isCancelled: boolean
      /**
       * Format: int64
       * @description The number of attendees for this appointment
       * @example 6
       */
      attendeeCount: number
      /**
       * Format: int64
       * @description The number of attendees recorded as having attended this appointment
       * @example 2
       */
      attendedCount: number
      /**
       * Format: int64
       * @description The number of attendees recorded as having not attended this appointment
       * @example 1
       */
      nonAttendedCount: number
      /**
       * Format: int64
       * @description The number of attendees whose attendance has not yet been recorded
       * @example 3
       */
      notRecordedCount: number
      /** @description
       *         The prisoner or prisoners attending this appointment. Appointments of type INDIVIDUAL will have one
       *         prisoner attending each appointment. Appointments of type GROUP can have more than one prisoner
       *         attending each appointment
       *          */
      attendees: components['schemas']['AppointmentAttendeeSearchResult'][]
      /**
       * @description optional event tier
       * @enum {string}
       */
      eventTierType?: 'TIER_1' | 'TIER_2' | 'FOUNDATION'
    }
    /** @description
     *       Described on the UI as an "Appointment set" or "set of back-to-back appointments".
     *       Contains the full details of the initial property values common to all appointments in the set for display purposes.
     *       The properties at this level cannot be changed via the API.
     *        */
    AppointmentSetDetails: {
      /**
       * Format: int64
       * @description The internally generated identifier for this appointment set
       * @example 12345
       */
      id: number
      /**
       * @description The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS
       * @example SKI
       */
      prisonCode: string
      /** @description
       *         The appointment set's name combining the optional custom name with the category description. If custom name has been
       *         specified, the name format will be "Custom name (Category description)"
       *          */
      appointmentName: string
      category: components['schemas']['AppointmentCategorySummary']
      /**
       * @description
       *         Free text name further describing the appointment set. Used as part of the appointment name with the
       *         format "Custom name (Category description) if specified.
       *
       * @example Meeting with the governor
       */
      customName?: string
      internalLocation?: components['schemas']['AppointmentLocationSummary']
      /**
       * @description
       *         Flag to indicate if the location of the appointment series in the set is in cell rather than an internal prison location.
       *         Internal location id should be null if in cell = true
       *
       * @example false
       */
      inCell: boolean
      /**
       * Format: date
       * @description The date of the first appointment in each appointment series in the set
       */
      startDate: string
      /** @description The details of all the appointments in the the set */
      appointments: components['schemas']['AppointmentDetails'][]
      /**
       * Format: date-time
       * @description The date and time this appointment set was created. Will not change
       */
      createdTime: string
      /** @description
       *         The username of the user that created this appointment set
       *          */
      createdBy: string
      /**
       * Format: date-time
       * @description
       *         The date and time one or more appointments in this set was last changed.
       *         Will be null if no appointments in the set have been altered since they were created
       *
       */
      updatedTime?: string
      /** @description
       *         The username of the user that last edited one or more appointments in this set.
       *         Will be null if no appointments in the set have been altered since they were created
       *          */
      updatedBy?: string
    }
    /** @description
     *       Described on the UI as an "Appointment series" and only shown for repeat appointments.
     *       The top level of the standard appointment hierarchy containing full details of the initial property values common to
     *       all appointments in the series for display purposes.
     *       Contains the summary collection of all the child appointments in the series plus the schedule definition if the
     *       appointment series repeats.
     *       The properties at this level cannot be changed via the API however the child appointment property values can be changed
     *       independently to support rescheduling, cancelling and altered attendee lists per appointment.
     *       N.B. there is no collection of attending prisoners at this top level as all attendees are per appointment. This is to
     *       support attendee modification for each scheduled appointment and to prevent altering the past by editing attendees
     *       in an appointment series where some appointments have past.
     *        */
    AppointmentSeriesDetails: {
      /**
       * Format: int64
       * @description The internally generated identifier for this appointment series
       * @example 12345
       */
      id: number
      /**
       * @description The appointment type (INDIVIDUAL or GROUP)
       * @example INDIVIDUAL
       * @enum {string}
       */
      appointmentType: 'INDIVIDUAL' | 'GROUP'
      /**
       * @description The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS
       * @example SKI
       */
      prisonCode: string
      /** @description
       *         The appointment series' name combining the optional custom name with the category description. If custom name has been
       *         specified, the name format will be "Custom name (Category description)"
       *          */
      appointmentName: string
      category: components['schemas']['AppointmentCategorySummary']
      tier?: components['schemas']['EventTier']
      organiser?: components['schemas']['EventOrganiser']
      /**
       * @description
       *         Free text name further describing the appointment series. Used as part of the appointment name with the
       *         format "Custom name (Category description) if specified.
       *
       * @example Meeting with the governor
       */
      customName?: string
      internalLocation?: components['schemas']['AppointmentLocationSummary']
      /**
       * @description
       *         Flag to indicate if the location of the appointment series is in cell rather than an internal prison location.
       *         Internal location id should be null if in cell = true
       *
       * @example false
       */
      inCell: boolean
      /**
       * Format: date
       * @description The date of the first appointment in the series
       */
      startDate: string
      /**
       * Format: partial-time
       * @description The starting time of the appointment or appointments in the series
       * @example 09:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time of the appointment or appointments in the series
       * @example 10:30
       */
      endTime?: string
      schedule?: components['schemas']['AppointmentSeriesSchedule']
      /**
       * @description
       *         Extra information for the prisoner or prisoners attending the appointment or appointments in the series.
       *         Shown only on the appointments details page and on printed movement slips. Wing staff will be notified there is
       *         extra information via the unlock list.
       *
       * @example This appointment will help adjusting to life outside of prison
       */
      extraInformation?: string
      /**
       * Format: date-time
       * @description The date and time this appointment series was created. Will not change
       */
      createdTime: string
      /** @description
       *         The username of the user that created this appointment series
       *          */
      createdBy: string
      /**
       * Format: date-time
       * @description
       *         The date and time one or more appointments in this series was last changed.
       *         Will be null if no appointments in the series have been altered since they were created
       *
       */
      updatedTime?: string
      /** @description
       *         The username of the user that last edited one or more appointments in this series.
       *         Will be null if no appointments in the series have been altered since they were created
       *          */
      updatedBy?: string
      /** @description
       *         Summary of the individual appointment or appointments in this series both expired and scheduled.
       *         Non recurring appointment series will have a single appointment containing the same property values as the parent
       *         appointment series. The same start date, time and end time. Recurring appointment series will have one or more
       *         appointments. The first in the series will also contain the same property values as the parent appointment series
       *         and subsequent appointments will have start dates following on from the original start date incremented as specified
       *         by the series' schedule. Each appointment can be edited independently of the parent. All properties of an
       *         appointment are separate to those of the parent appointment series.
       *         The full series of appointments specified by the schedule will have been created in advance.
       *          */
      appointments: components['schemas']['AppointmentSummary'][]
    }
    /** @description
     *       Described on the UI as an "Appointment" and represents the scheduled event on a specific date and time.
     *       Contains the summary information of a limited set the appointment properties. N.B. does not contain
     *       information on the prisoners attending this appointment to improve API performance.
     *       All updates and cancellations happen at this appointment level with the parent appointment series or set being immutable.
     *        */
    AppointmentSummary: {
      /**
       * Format: int64
       * @description The internally generated identifier for this appointment
       * @example 123456
       */
      id: number
      /**
       * Format: int32
       * @description The sequence number of this appointment within the appointment series
       * @example 3
       */
      sequenceNumber: number
      /**
       * Format: date
       * @description The date this appointment is taking place on
       */
      startDate: string
      /**
       * Format: partial-time
       * @description The starting time of this appointment
       * @example 13:00
       */
      startTime: string
      /**
       * Format: partial-time
       * @description The end time of this appointment
       * @example 13:30
       */
      endTime?: string
      /**
       * @description
       *         Indicates that this appointment has been independently changed from the original state it was in when
       *         it was created as part of an appointment series
       *
       * @example false
       */
      isEdited: boolean
      /**
       * @description
       *         Indicates that this appointment has been cancelled
       *
       * @example false
       */
      isCancelled: boolean
      /**
       * @description
       *         Indicates that this appointment has been deleted and removed from scheduled events.
       *
       * @example false
       */
      isDeleted: boolean
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  deallocate: {
    parameters: {
      query?: never
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        scheduleId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonerDeallocationRequest']
      }
    }
    responses: {
      /** @description One or more prisoners were deallocated from the schedule. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The activity schedule for this ID was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  uncancelScheduledInstance: {
    parameters: {
      query?: never
      header?: never
      path: {
        instanceId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UncancelScheduledInstanceRequest']
      }
    }
    responses: {
      /** @description The scheduled instance was successfully un cancelled. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description The scheduled instance is not cancelled or it is in the past */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not Found, the scheduled instance does not exist */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  cancelScheduledInstance: {
    parameters: {
      query?: never
      header?: never
      path: {
        instanceId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ScheduleInstanceCancelRequest']
      }
    }
    responses: {
      /** @description Scheduled instance successfully cancelled */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The scheduled instance was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  retryDlq: {
    parameters: {
      query?: never
      header?: never
      path: {
        dlqName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['RetryDlqResult']
        }
      }
    }
  }
  retryAllDlqs: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['RetryDlqResult'][]
        }
      }
    }
  }
  purgeQueue: {
    parameters: {
      query?: never
      header?: never
      path: {
        queueName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['PurgeQueueResult']
        }
      }
    }
  }
  markAttendances: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AttendanceUpdateRequest'][]
      }
    }
    responses: {
      /** @description The attendance records were updated. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  uncancelAppointment: {
    parameters: {
      query?: never
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        appointmentId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AppointmentUncancelRequest']
      }
    }
    responses: {
      /** @description The appointment or series of appointments was uncancelled. */
      202: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentSeries']
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The appointment for this id was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  cancelAppointment: {
    parameters: {
      query?: never
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        appointmentId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AppointmentCancelRequest']
      }
    }
    responses: {
      /** @description The appointment or series of appointments was cancelled. */
      202: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentSeries']
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The appointment for this id was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  markAttendance: {
    parameters: {
      query?: never
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        appointmentId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AppointmentAttendanceRequest']
      }
    }
    responses: {
      /** @description Attendance for the appointment was recorded. */
      202: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentSeries']
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The appointment for this id was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  markMultipleAttendances: {
    parameters: {
      query?: {
        /** @description How to mark the attendance records. */
        action?: 'ATTENDED' | 'NOT_ATTENDED' | 'RESET'
      }
      header?: {
        'Caseload-Id'?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MultipleAppointmentAttendanceRequest'][]
      }
    }
    responses: {
      /** @description Attendance for the appointment was recorded. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentSeries']
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  searchWaitingLists: {
    parameters: {
      query?: {
        /** @description The page number of search results (default: 0) */
        page?: number
        /** @description The number of search results per page (default: 50) */
        pageSize?: number
      }
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        prisonCode: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['WaitingListSearchRequest']
      }
    }
    responses: {
      /** @description Waiting list application search results */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PagedWaitingListApplication']
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Waiting list application not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  publishDomainEvent: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PublishEventUtilityModel']
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'text/plain': string
        }
      }
    }
  }
  getAllocationsBy: {
    parameters: {
      query?: {
        /** @description If true will only return active allocations. Defaults to true. */
        activeOnly?: boolean
        /** @description If true will fetch and add prisoner details from prisoner search. Defaults to false. */
        includePrisonerSummary?: boolean
        /** @description If provided will filter allocations by the given date. Format YYYY-MM-DD. */
        date?: string
      }
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        scheduleId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The allocations for an activity schedule */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Allocation'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Schedule ID not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  allocate: {
    parameters: {
      query?: never
      header?: never
      path: {
        scheduleId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonerAllocationRequest']
      }
    }
    responses: {
      /** @description The allocation was created and added to the schedule. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The activity schedule for this ID was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getScheduledInstancesByIds: {
    parameters: {
      query?: never
      header?: {
        'Caseload-Id'?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
    responses: {
      /** @description The scheduled instances found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ActivityScheduleInstance'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getScheduledEventsForSinglePrisoner: {
    parameters: {
      query: {
        /** @description Prisoner number (required). Format A9999AA. */
        prisonerNumber: string
        /** @description Start date of query (required). Format YYYY-MM-DD. */
        startDate: string
        /** @description End date of query (required). Format YYYY-MM-DD. The end date must be within 3 months of the start date) */
        endDate: string
        /** @description Time slot for the events (optional). If supplied, one of AM, PM or ED. */
        timeSlot?: 'AM' | 'PM' | 'ED'
      }
      header?: never
      path: {
        /** @description The 3-digit prison code. */
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful call - zero or more scheduled events found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerScheduledEvents']
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getScheduledEventsForMultiplePrisoners: {
    parameters: {
      query: {
        /** @description The exact date to return events for (required) in format YYYY-MM-DD */
        date: string
        /** @description Time slot of the events (optional). If supplied, one of AM, PM or ED. */
        timeSlot?: 'AM' | 'PM' | 'ED'
      }
      header?: never
      path: {
        /** @description The 3-character prison code. */
        prisonCode: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description Successful call - zero or more scheduled events found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerScheduledEvents']
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getScheduledEventsForMultipleLocations: {
    parameters: {
      query: {
        /** @description The exact date to return events for (required) in format YYYY-MM-DD */
        date: string
        /** @description Time slot of the events (optional). If supplied, one of AM, PM or ED. */
        timeSlot?: 'AM' | 'PM' | 'ED'
      }
      header?: never
      path: {
        /** @description The 3-character prison code. */
        prisonCode: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
    responses: {
      /** @description Successful call - zero or more scheduled events found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['InternalLocationEvents'][]
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  setPrisonRegimeSlots: {
    parameters: {
      query?: never
      header?: never
      path: {
        agencyId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonRegimeSlot'][]
      }
    }
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonRegime'][]
        }
      }
    }
  }
  prisonerAllocations: {
    parameters: {
      query?: {
        /** @description If true will only return active allocations. Defaults to true. */
        activeOnly?: boolean
      }
      header?: never
      path: {
        prisonCode: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': string[]
      }
    }
    responses: {
      /** @description The allocations for the prisoners */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonerAllocations'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createPayBand: {
    parameters: {
      query?: never
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        prisonCode: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonPayBandCreateRequest']
      }
    }
    responses: {
      /** @description Prison pay band created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonPayBand'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  migrateAllocation: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AllocationMigrateRequest']
      }
    }
    responses: {
      /** @description The allocation was migrated. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AllocationMigrateResponse']
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  migrateActivity: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ActivityMigrateRequest']
      }
    }
    responses: {
      /** @description The activity was migrated. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ActivityMigrateResponse']
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  migrateAppointment: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AppointmentMigrateRequest']
      }
    }
    responses: {
      /** @description The appointment was migrated. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentInstance']
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  triggerPurposefulActivityReportsJob: {
    parameters: {
      query?: {
        /** @description Report is calculated for the week up to the prior saturday. increase offset to generate reports for weeks prior to that */
        weekOffset?: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Accepted */
      202: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'text/plain': string
        }
      }
    }
  }
  triggerManageAttendanceRecordsJob: {
    parameters: {
      query?: {
        /** @description If supplied will create attendance records for the given rolled out prison. */
        prisonCode?: string
        /** @description If supplied will create attendance records for the given date. Default to the current date. */
        date?: string
        /** @description If true will run the attendance expiry process in addition to other features. Defaults to false. */
        withExpiry?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'text/plain': string
        }
      }
    }
  }
  triggerManageAllocationsJob: {
    parameters: {
      query?: {
        /** @description If true will run the activate pending allocations process. Defaults to false. */
        withActivate?: boolean
        /** @description If true will run the deallocate allocations that are ending process. Defaults to false. */
        withDeallocateEnding?: boolean
        /** @description If true will run the deallocate allocations that are expiring process. Defaults to false. */
        withDeallocateExpiring?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'text/plain': string
        }
      }
    }
  }
  triggerFixZeroPayJob: {
    parameters: {
      query: {
        /** @description If supplied will deallocate prisoners */
        deallocate?: boolean
        /** @description If supplied will make activity unpaid */
        makeUnpaid?: boolean
        /** @description If supplied will reallocate prisoners */
        allocate?: boolean
        /** @description The prison code */
        prisonCode: string
        /** @description The activity schedule Id */
        activityScheduleId: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Accepted */
      202: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'text/plain': string
        }
      }
    }
  }
  triggerCreateScheduledInstancesJob: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'text/plain': string
        }
      }
    }
  }
  triggerManageAllocationsJob_1: {
    parameters: {
      query: {
        /** @description The number of days into the future to manage appointments up to a maximum of 60. The attendees for future appointments starting on those days this will be managed. */
        daysAfterNow: number
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Accepted */
      202: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'text/plain': string
        }
      }
    }
  }
  triggerAppointmentsMetricsJob: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Accepted */
      202: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'text/plain': string
        }
      }
    }
  }
  triggerActivityMetricsJob: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'text/plain': string
        }
      }
    }
  }
  acknowledgeEvents: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The prison code e.g. MDI */
        prison: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['EventAcknowledgeRequest']
      }
    }
    responses: {
      /** @description The event IDS were acknowledged. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Invalid request body */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAuditRecords: {
    parameters: {
      query?: {
        page?: number
        size?: number
        sortDirection?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AuditRecordSearchFilters']
      }
    }
    responses: {
      /** @description Search performed successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LocalAuditSearchResults']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  searchAppointments: {
    parameters: {
      query?: never
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        prisonCode: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AppointmentSearchRequest']
      }
    }
    responses: {
      /** @description Prison code and search parameters were accepted and results returned. */
      202: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentSearchResult'][]
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAppointmentDetailsById: {
    parameters: {
      query?: never
      header?: {
        'Caseload-Id'?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
    responses: {
      /** @description Appointment found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentDetails']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createAppointmentSet: {
    parameters: {
      query?: never
      header?: {
        'Caseload-Id'?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AppointmentSetCreateRequest']
      }
    }
    responses: {
      /** @description The appointment set was created. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentSet']
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createAppointmentSeries: {
    parameters: {
      query?: never
      header?: {
        'Caseload-Id'?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AppointmentSeriesCreateRequest']
      }
    }
    responses: {
      /** @description The appointment series was created. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentSeries']
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  addToWaitingList: {
    parameters: {
      query?: never
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        prisonCode: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['WaitingListApplicationRequest']
      }
    }
    responses: {
      /** @description The waiting list entry was created and added to the schedule. */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The activity schedule in the request for this ID was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  unsuspend: {
    parameters: {
      query?: never
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        prisonCode: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UnsuspendPrisonerRequest']
      }
    }
    responses: {
      /** @description The suspensions were updated. */
      202: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Allocation']
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  suspend: {
    parameters: {
      query?: never
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        prisonCode: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SuspendPrisonerRequest']
      }
    }
    responses: {
      /** @description The suspensions were updated. */
      202: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Allocation']
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  create: {
    parameters: {
      query?: never
      header?: {
        'Caseload-Id'?: string
      }
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ActivityCreateRequest']
      }
    }
    responses: {
      /** @description The activity was created. */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Activity']
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getWaitingListById: {
    parameters: {
      query?: never
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        waitingListId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Waiting list application found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['WaitingListApplication']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The waiting list application for this ID was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateWaitingList: {
    parameters: {
      query?: never
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        waitingListId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['WaitingListApplicationUpdateRequest']
      }
    }
    responses: {
      /** @description The updated waiting list application. */
      202: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['WaitingListApplication']
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Waiting list application not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updatePayBand: {
    parameters: {
      query?: never
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        prisonCode: string
        prisonPayBandId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonPayBandUpdateRequest']
      }
    }
    responses: {
      /** @description Prison pay band updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonPayBand'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateAppointment: {
    parameters: {
      query?: never
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        appointmentId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AppointmentUpdateRequest']
      }
    }
    responses: {
      /** @description The appointment or series of appointments was updated. */
      202: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentSeries']
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The appointment for this id was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  update: {
    parameters: {
      query?: never
      header?: never
      path: {
        allocationId: number
        prisonCode: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AllocationUpdateRequest']
      }
    }
    responses: {
      /** @description The allocation was updated. */
      202: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Allocation']
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Allocation ID not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  update_1: {
    parameters: {
      query?: never
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        prisonCode: string
        activityId: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ActivityUpdateRequest']
      }
    }
    responses: {
      /** @description The activity was updated. */
      202: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Activity']
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Activity ID not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAttendanceReconciliation: {
    parameters: {
      query: {
        /** @description Attendance date */
        date: string
      }
      header?: never
      path: {
        /** @description Prison id */
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Reconciliation information retrieved */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AttendanceReconciliationResponse']
        }
      }
      /** @description There was an error with the request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAllocationReconciliation: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Prison id */
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Reconciliation information retrieved */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AllocationReconciliationResponse']
        }
      }
      /** @description There was an error with the request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAttendanceSync: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Attendance id */
        attendanceId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Attendance retrieved */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AttendanceSync']
        }
      }
      /** @description There was an error with the request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Attendance not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSarContentByReference: {
    parameters: {
      query?: {
        /** @description NOMIS Prison Reference Number */
        prn?: string
        /** @description nDelius Case Reference Number */
        crn?: string
        /** @description Optional parameter denoting minimum date of event occurrence which should be returned in the response */
        fromDate?: string
        /** @description Optional parameter denoting maximum date of event occurrence which should be returned in the response */
        toDate?: string
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Request successfully processed - content found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['HmppsSubjectAccessRequestContent']
        }
      }
      /** @description Request successfully processed - no content found */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Subject Identifier is not recognised by this service */
      209: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description The client does not have authorisation to make this request */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unexpected error occurred */
      500: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getScheduleById: {
    parameters: {
      query?: {
        /** @description If provided will filter earliest sessions >= the given date. Format YYYY-MM-DD, otherwise defaults to 4 weeks prior to the current date. */
        earliestSessionDate?: string
      }
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        scheduleId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Activity found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ActivitySchedule']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The activity for this ID was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getWaitingListApplicationsBy: {
    parameters: {
      query?: never
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        scheduleId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The waiting list applications for an activity schedule */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['WaitingListApplication'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Schedule ID not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  allocationSuitability: {
    parameters: {
      query: {
        /** @description Prisoner number (required). Format A9999AA. */
        prisonerNumber: string
      }
      header?: never
      path: {
        scheduleId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Candidate suitability details. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AllocationSuitability']
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The activity schedule for this ID was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getNonAssociations: {
    parameters: {
      query: {
        /** @description Prisoner number. Format A9999AA. */
        prisonerNumber: string
      }
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        scheduleId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Get non-associations for the prisoner */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NonAssociationDetails'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  candidates: {
    parameters: {
      query?: {
        suitableIncentiveLevel?: string[]
        suitableRiskLevel?: string[]
        suitableForEmployed?: boolean
        noAllocations?: boolean
        search?: string
        /** @description Zero-based page index (0..N) */
        page?: number
        /** @description The size of the page to be returned */
        size?: number
        /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
        sort?: string[]
      }
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        scheduleId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description A paginated list of candidates was returned. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageActivityCandidate']
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The activity schedule for this ID was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getScheduledInstanceById: {
    parameters: {
      query?: never
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        instanceId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Scheduled instance found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ActivityScheduleInstance']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The scheduled instance was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getScheduledAttendeesByScheduledInstance: {
    parameters: {
      query?: never
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        instanceId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Scheduled attendees found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ScheduledAttendee'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The scheduled instance was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  attendanceSummary: {
    parameters: {
      query: {
        /**
         * @description The prison code of the prison to return an attendance summary for
         * @example MDI
         */
        prisonCode: string
        /**
         * @description The date of the attendance summary. Format, YYYY-MM-DD.
         * @example 2023-09-20
         */
        date: string
      }
      header?: {
        'Caseload-Id'?: string
      }
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Attendance summary */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ScheduledInstanceAttendanceSummary'][]
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The scheduled instance was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getRolledOutPrisons: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description List of prisons that are rolled out */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RolloutPrisonPlan'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonByCode: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Prison rollout plan found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RolloutPrisonPlan']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getDlqMessages: {
    parameters: {
      query?: {
        maxMessages?: number
      }
      header?: never
      path: {
        dlqName: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          '*/*': components['schemas']['GetDlqResult']
        }
      }
    }
  }
  getActivityScheduleInstancesByDateRange: {
    parameters: {
      query: {
        /** @description Start date of query (required). Format YYYY-MM-DD. */
        startDate: string
        /** @description End date of query (required). The end date must be within 3 months of the start date. */
        endDate: string
        /** @description The time slot (optional). If supplied, one of AM, PM or ED. */
        slot?: 'AM' | 'PM' | 'ED'
        /** @description Return cancelled scheduled instances? */
        cancelled?: boolean
      }
      header?: never
      path: {
        /** @description The 3-character prison code. */
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful call - zero or more scheduled instance records found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ActivityScheduleInstance'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonPayBands: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Prison pay bands found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonPayBand'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getActivities: {
    parameters: {
      query?: {
        excludeArchived?: boolean
      }
      header?: never
      path: {
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Activities */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ActivitySummary'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPrisonRegimeByPrisonCode: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Prison regime found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonRegime'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  migratedAppointmentsSummary: {
    parameters: {
      query: {
        /** @description Inclusive start date of migrated appointments. Must be today or in the future */
        startDate: string
        /** @description A list of category codes to retrieve summaries appointments */
        categoryCodes: string[]
      }
      header?: never
      path: {
        /** @description The 3-digit prison code */
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Appointment summary details */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentCountSummary'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCellLocationsForGroup: {
    parameters: {
      query: {
        groupName: string
      }
      header?: never
      path: {
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful call - zero or more cell locations found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Location'][]
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocationPrefixForGroup: {
    parameters: {
      query: {
        groupName: string
      }
      header?: never
      path: {
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful call - Location prefix found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LocationPrefixDto']
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocationGroups: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful call - zero or more location groups found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LocationGroup'][]
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getInternalLocationEventsSummary: {
    parameters: {
      query: {
        /** @description Date of scheduled events (required). Format YYYY-MM-DD */
        date: string
        /** @description Time slot for the scheduled events (optional). If supplied, one of AM, PM or ED. */
        timeSlot?: 'AM' | 'PM' | 'ED'
      }
      header?: never
      path: {
        /** @description The 3-digit prison code. */
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful call - zero or more internal locations with scheduled events found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['InternalLocationEventsSummary']
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getEventsForReview: {
    parameters: {
      query: {
        /** @description The date for which to request events, format YYYY-MM-DD, e.g. 2023-10-01 */
        date: string
        /** @description The prisoner number, eg. A9999AA (optional). Default is all prisoner numbers. */
        prisonerNumber?: string
        /** @description Whether to include acknowledged events (optional). Default is false. */
        includeAcknowledged?: boolean
        /** @description The page number to return (optional). Default is page zero. */
        page?: number
        /** @description The maximum number of items to return in each page (optional). Default is 10. */
        size?: number
        /** @description The sort direction based on the time the events occurred. Default is ascending. */
        sortDirection?: string
      }
      header?: never
      path: {
        /** @description The prison code e.g. MDI */
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Search performed successfully */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['EventReviewSearchResults']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAttendanceByDate: {
    parameters: {
      query?: {
        eventTier?: 'TIER_1' | 'TIER_2' | 'FOUNDATION'
      }
      header?: never
      path: {
        prisonCode: string
        sessionDate: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Attendance list found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AllAttendance'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAttendanceForSuspendedPrisoners: {
    parameters: {
      query: {
        /** @description date of query (required). Format YYYY-MM-DD. */
        date: string
        reason?: string
        categories?: (
          | 'SAA_EDUCATION'
          | 'SAA_INDUSTRIES'
          | 'SAA_PRISON_JOBS'
          | 'SAA_GYM_SPORTS_FITNESS'
          | 'SAA_INDUCTION'
          | 'SAA_INTERVENTIONS'
          | 'SAA_FAITH_SPIRITUALITY'
          | 'SAA_NOT_IN_WORK'
          | 'SAA_OTHER'
        )[]
      }
      header?: never
      path: {
        /** @description The 3-character prison code. */
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful call */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SuspendedPrisonerAttendance'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAttendanceById: {
    parameters: {
      query?: never
      header?: never
      path: {
        attendanceId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Attendance found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Attendance']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The attendance was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAttendanceReasons: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Attendance reasons found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AttendanceReason'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAppointmentAttendanceByStatus: {
    parameters: {
      query: {
        /** @description Date of appointments. Format YYYY-MM-DD */
        date: string
        /** @description appointment category code */
        categoryCode?: string
        /** @description appointment custom name */
        customName?: string
        prisonerNumber?: string
        eventTier?: 'TIER_1' | 'TIER_2' | 'FOUNDATION'
        organiserCode?: string
      }
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        /** @description The 3-character prison code */
        prisonCode: string
        /** @description attendance status */
        status: 'ATTENDED' | 'NOT_ATTENDED' | 'CANCELLED' | 'NOT_RECORDED' | 'EVENT_TIER'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful call - zero or more scheduled appointments found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentAttendeeByStatus']
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAppointmentAttendanceSummaries: {
    parameters: {
      query: {
        /** @description Date of appointments (required). Format YYYY-MM-DD */
        date: string
        /** @description appointment category code */
        categoryCode?: string
        /** @description appointment custom name */
        customName?: string
      }
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        /** @description The 3-digit prison code (required) */
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Successful call - zero or more scheduled appointments found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentAttendanceSummary']
        }
      }
      /** @description Invalid request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Requested resource not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAppointmentDetailsById_1: {
    parameters: {
      query?: never
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        appointmentId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Appointment found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentDetails']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The appointment for this id was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAppointmentSetDetailsById: {
    parameters: {
      query?: never
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        appointmentSetId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Appointment set found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentSetDetails']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The appointment set for this id was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAppointmentSeriesById: {
    parameters: {
      query?: never
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        appointmentSeriesId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Appointment series found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentSeries']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The appointment series for this id was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAppointmentDetailsById_2: {
    parameters: {
      query?: never
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        appointmentSeriesId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Appointment series found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentSeriesDetails']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The appointment series for this id was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAppointmentLocations: {
    parameters: {
      query?: never
      header?: never
      path: {
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Appointment locations found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentLocationSummary'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAppointmentInstanceById: {
    parameters: {
      query?: never
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        appointmentInstanceId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Appointment instance found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentInstance']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The appointment instance for this ID was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAppointmentCategories: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Appointment categories found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentCategorySummary'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAllocationById: {
    parameters: {
      query?: never
      header?: {
        'Caseload-Id'?: string
      }
      path: {
        allocationId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description allocation found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Allocation']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The allocation for this ID was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getDeallocationReasons: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Deallocation reasons found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DeallocationReason'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCategories: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Activity categories found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ActivityCategory'][]
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getActivitySchedules: {
    parameters: {
      query?: never
      header?: never
      path: {
        activityId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Activity schedules */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ActivityScheduleLite']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Activity ID not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getActivityByIdWithFilters: {
    parameters: {
      query?: {
        /** @description The date of the earliest scheduled instances to include. Defaults to newer than 1 month ago. */
        earliestSessionDate?: string
      }
      header?: never
      path: {
        activityId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Activity found */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Activity']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description The activity for this ID was not found. */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteActivity: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description The prison code where this activity exists */
        prisonCode: string
        /** @description The activity ID to remove */
        activityId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description The activity was deleted. */
      200: {
        headers: {
          [name: string]: unknown
        }
        content?: never
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden, requires an appropriate role */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteMigratedAppointments: {
    parameters: {
      query: {
        /** @description Inclusive start date of migrated appointments to be deleted. Must be today or in the future */
        startDate: string
        /** @description The category code assigned to migrated appointments to be deleted. */
        categoryCode?: string
      }
      header?: never
      path: {
        /** @description The 3-digit prison code. */
        prisonCode: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Migrated appointments matching the supplied criteria are being deleted. */
      202: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentSearchResult'][]
        }
      }
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorised, requires a valid Oauth2 token */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
